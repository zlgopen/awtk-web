[
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建emitter对象。",
        "name": "emitter_create",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "分发事件。如果当前分发的回调函数返回RET_REMOVE，该回调函数将被移出。\n禁用状态下，本函数不做任何事情。",
        "name": "emitter_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "如果当前分发的回调函数返回RET_STOP，dispatch中断分发，并返回RET_STOP，否则返回RET_OK。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "分发事件。\n> 对emitter_dispatch的包装，分发一个简单的事件。\n如果当前分发的回调函数返回RET_STOP，dispatch中断分发，并返回RET_STOP，否则返回RET_OK。",
        "name": "emitter_dispatch_simple_event",
        "return": {
          "type": "ret_t",
          "desc": ""
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_type_t",
            "name": "etype",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "handler",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": "注册指定事件的处理函数。",
        "name": "emitter_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于emitter_off。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "注销指定事件的处理函数。",
        "name": "emitter_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "启用。",
        "name": "emitter_enable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "禁用。\n\n禁用后emitter_dispatch无效，但可以注册和注销。",
        "name": "emitter_disable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁。",
        "name": "emitter_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为emitter对象(供脚本语言使用)。\n\n主要给脚本语言使用。",
        "name": "emitter_cast",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/emitter.h",
    "desc": "事件分发器, 用于实现观察者模式。",
    "name": "emitter_t",
    "order": -10,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/rect.h",
    "desc": "点。包括一个x坐标和一个y坐标。",
    "name": "point_t",
    "annotation": {
      "scriptable": true
    },
    "order": -10,
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/rect.h",
    "desc": "点(浮点数)。包括一个x坐标和一个y坐标。",
    "name": "pointf_t",
    "order": -10,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "w",
        "desc": "宽度。",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": "高度。",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/rect.h",
    "desc": "矩形。包括一个x坐标、y坐标、宽度和高度。",
    "name": "rectf_t",
    "order": -10,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建rect对象。\n\n> 主要供脚本语言使用。",
        "name": "rect_create",
        "return": {
          "type": "rect_t*",
          "desc": "rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "rect",
            "desc": "rect对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置rect对象的xywh。\n\n> 主要供脚本语言使用。",
        "name": "rect_set",
        "return": {
          "type": "rect_t*",
          "desc": "rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "rect",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为rect对象。\n\n> 供脚本语言使用。",
        "name": "rect_cast",
        "return": {
          "type": "rect_t*",
          "desc": "rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁rect对象。\n\n> 主要供脚本语言使用。",
        "name": "rect_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "w",
        "desc": "宽度。",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": "高度。",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/rect.h",
    "desc": "矩形。包括一个x坐标、y坐标、宽度和高度。",
    "name": "rect_t",
    "order": -10,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建图片对象(一般供脚本语言中使用)。",
        "name": "bitmap_create",
        "return": {
          "type": "bitmap_t*",
          "desc": "返回bitmap对象。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "uint32_t",
            "name": "line_length",
            "desc": "line_length。"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建图片对象。",
        "name": "bitmap_create_ex",
        "return": {
          "type": "bitmap_t*",
          "desc": "返回bitmap对象。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取图片一个像素占用的字节数。",
        "name": "bitmap_get_bpp",
        "return": {
          "type": "uint32_t",
          "desc": "返回一个像素占用的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁图片(for script only)。",
        "name": "bitmap_destroy_with_self",
        "alias": "bitmap_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "位图格式。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取位图格式对应的颜色位数。",
        "name": "bitmap_get_bpp_of_format",
        "return": {
          "type": "uint32_t",
          "desc": "成功返回颜色位数，失败返回0。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "w",
        "desc": "宽度。",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": "高度。",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "line_length",
        "desc": "每一行实际占用的内存(也称为stride或pitch)，一般情况下为w*bpp。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "flags",
        "desc": "标志。请参考{bitmap_flag_t}。",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "format",
        "desc": "格式。请参考{bitmap_format_t}。",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": "名称。",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/bitmap.h",
    "desc": "位图。",
    "name": "bitmap_t",
    "order": -9,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "引用计数减1。引用计数为0时，销毁对象。",
        "name": "object_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "引用计数加1。",
        "name": "object_ref",
        "return": {
          "type": "object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取对象的类型名称。",
        "name": "object_get_type",
        "return": {
          "type": "const char*",
          "desc": "返回对象的类型名称。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取对象的描述信息。",
        "name": "object_get_desc",
        "return": {
          "type": "const char*",
          "desc": "返回对象的描述信息。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取对象占用内存的大小。",
        "name": "object_get_size",
        "return": {
          "type": "uint32_t",
          "desc": "返回对象占用内存的大小。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断对象是否是集合。",
        "name": "object_is_collection",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是集合，否则不是。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "对象的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置对象的名称。",
        "name": "object_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "object_t*",
            "name": "other",
            "desc": "比较的object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "比较两个对象。",
        "name": "object_compare",
        "return": {
          "type": "int",
          "desc": "返回比较结果。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的值。",
        "name": "object_get_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的字符串类型的值。",
        "name": "object_get_prop_str",
        "return": {
          "type": "const char*",
          "desc": "返回指定属性的字符串类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的指针类型的值。",
        "name": "object_get_prop_pointer",
        "return": {
          "type": "void*",
          "desc": "返回指定属性的指针类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的object类型的值。",
        "name": "object_get_prop_object",
        "return": {
          "type": "object_t*",
          "desc": "返回指定属性的object类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的整数类型的值。",
        "name": "object_get_prop_int",
        "return": {
          "type": "int32_t",
          "desc": "返回指定属性的整数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "bool_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的bool类型的值。",
        "name": "object_get_prop_bool",
        "return": {
          "type": "bool_t",
          "desc": "返回指定属性的bool类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "float_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的浮点数类型的值。",
        "name": "object_get_prop_float",
        "return": {
          "type": "float_t",
          "desc": "返回指定属性的浮点数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "double",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的浮点数类型的值。",
        "name": "object_get_prop_double",
        "return": {
          "type": "double",
          "desc": "返回指定属性的浮点数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "删除指定属性。",
        "name": "object_remove_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的值。",
        "name": "object_set_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的字符串类型的值。",
        "name": "object_set_prop_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "object_t*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的object类型的值。",
        "name": "object_set_prop_object",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的整数类型的值。",
        "name": "object_set_prop_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的bool类型的值。",
        "name": "object_set_prop_bool",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的浮点数类型的值。",
        "name": "object_set_prop_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的浮点数类型的值。",
        "name": "object_set_prop_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "目标对象。"
          },
          {
            "type": "object_t*",
            "name": "src",
            "desc": "源对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "拷贝指定的属性。",
        "name": "object_copy_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查是否存在指定的属性。",
        "name": "object_has_prop",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "expr",
            "desc": "表达式。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回计算结果。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "计算一个表达式，表达式中引用的变量从prop中获取。",
        "name": "object_eval",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "命令的名称。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查是否可以执行指定的命令。",
        "name": "object_can_exec",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示可以执行，否则表示不可以执行。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "命令的名称。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "执行指定的命令。",
        "name": "object_exec",
        "alias": "execute",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "触发EVT_PROPS_CHANGED事件。",
        "name": "object_notify_changed",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path，各级之间用.分隔。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查是否存在指定的属性。",
        "name": "object_has_prop_by_path",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的字符串类型的值。",
        "name": "object_get_prop_str_by_path",
        "return": {
          "type": "const char*",
          "desc": "返回指定属性的字符串类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的指针类型的值。",
        "name": "object_get_prop_pointer_by_path",
        "return": {
          "type": "void*",
          "desc": "返回指定属性的指针类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的object类型的值。",
        "name": "object_get_prop_object_by_path",
        "return": {
          "type": "object_t*",
          "desc": "返回指定属性的object类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的整数类型的值。",
        "name": "object_get_prop_int_by_path",
        "return": {
          "type": "int32_t",
          "desc": "返回指定属性的整数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "bool_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的bool类型的值。",
        "name": "object_get_prop_bool_by_path",
        "return": {
          "type": "bool_t",
          "desc": "返回指定属性的bool类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "float_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的浮点数类型的值。\n\ne",
        "name": "object_get_prop_float_by_path",
        "return": {
          "type": "float_t",
          "desc": "返回指定属性的浮点数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "value_t*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的值。",
        "name": "object_set_prop_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的字符串类型的值。",
        "name": "object_set_prop_str_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "object_t*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的object类型的值。",
        "name": "object_set_prop_object_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的整数类型的值。",
        "name": "object_set_prop_int_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的bool类型的值。",
        "name": "object_set_prop_bool_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的浮点数类型的值。",
        "name": "object_set_prop_float_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "命令的path。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查是否可以执行指定的命令。",
        "name": "object_can_exec_by_path",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示可以执行，否则表示不可以执行。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "命令的path。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "执行指定的命令。",
        "name": "object_exec_by_path",
        "alias": "execute_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int8_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的int8类型的值。",
        "name": "object_get_prop_int8",
        "return": {
          "type": "int8_t",
          "desc": "返回指定属性的int8类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int8_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的int8类型的值。",
        "name": "object_set_prop_int8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint8_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的uint8类型的值。",
        "name": "object_get_prop_uint8",
        "return": {
          "type": "uint8_t",
          "desc": "返回指定属性的uint8类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的uint8类型的值。",
        "name": "object_set_prop_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int16_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的int16类型的值。",
        "name": "object_get_prop_int16",
        "return": {
          "type": "int16_t",
          "desc": "返回指定属性的int16类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int16_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的int16类型的值。",
        "name": "object_set_prop_int16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint16_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的uint16类型的值。",
        "name": "object_get_prop_uint16",
        "return": {
          "type": "uint16_t",
          "desc": "返回指定属性的uint16类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的uint16类型的值。",
        "name": "object_set_prop_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的int32类型的值。",
        "name": "object_get_prop_int32",
        "return": {
          "type": "int32_t",
          "desc": "返回指定属性的int32类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的int32类型的值。",
        "name": "object_set_prop_int32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的uint32类型的值。",
        "name": "object_get_prop_uint32",
        "return": {
          "type": "uint32_t",
          "desc": "返回指定属性的uint32类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的uint32类型的值。",
        "name": "object_set_prop_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int64_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的int64类型的值。",
        "name": "object_get_prop_int64",
        "return": {
          "type": "int64_t",
          "desc": "返回指定属性的int64类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int64_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的int64类型的值。",
        "name": "object_set_prop_int64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint64_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的uint64类型的值。",
        "name": "object_get_prop_uint64",
        "return": {
          "type": "uint64_t",
          "desc": "返回指定属性的uint64类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint64_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的uint64类型的值。",
        "name": "object_set_prop_uint64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "ref_count",
        "desc": "引用计数。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": "对象的名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/object.h",
    "desc": "对象接口。",
    "name": "object_t",
    "order": -9,
    "parent": "emitter_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为bool的值。",
        "name": "value_set_bool",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为bool的值。",
        "name": "value_bool",
        "return": {
          "type": "bool_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int8_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int8的值。",
        "name": "value_set_int8",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int8的值。",
        "name": "value_int8",
        "return": {
          "type": "int8_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint8的值。",
        "name": "value_set_uint8",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为uint8的值。",
        "name": "value_uint8",
        "return": {
          "type": "int8_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int16_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int16的值。",
        "name": "value_set_int16",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int16的值。",
        "name": "value_int16",
        "return": {
          "type": "int16_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint16的值。",
        "name": "value_set_uint16",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为uint16的值。",
        "name": "value_uint16",
        "return": {
          "type": "uint16_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int32的值。",
        "name": "value_set_int32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int32的值。",
        "name": "value_int32",
        "return": {
          "type": "int32_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint32的值。",
        "name": "value_set_uint32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int64_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int64的值。",
        "name": "value_set_int64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int64的值。",
        "name": "value_int64",
        "return": {
          "type": "int64_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint64_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint64的值。",
        "name": "value_set_uint64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为uint64的值。",
        "name": "value_uint64",
        "return": {
          "type": "uint64_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为float\\_t的值。",
        "name": "value_set_float",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为float的值。",
        "name": "value_float32",
        "return": {
          "type": "float",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为double的值。",
        "name": "value_set_double",
        "alias": "value_set_float64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为double的值。",
        "name": "value_double",
        "alias": "value_float64",
        "return": {
          "type": "double",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为字符串的值(并拷贝字符串)。",
        "name": "value_dup_str",
        "alias": "value_set_str",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为字符串的值。",
        "name": "value_str",
        "return": {
          "type": "const char*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "char*",
            "name": "buff",
            "desc": "用于格式转换的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为字符串的值。",
        "name": "value_str_ex",
        "return": {
          "type": "const char*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断value是否为空值。",
        "name": "value_is_null",
        "return": {
          "type": "bool_t",
          "desc": "为空值返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int的值。",
        "name": "value_set_int",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "object_t*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为object的值。",
        "name": "value_set_object",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "转换为object的值。",
        "name": "value_object",
        "return": {
          "type": "object_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为token的值。",
        "name": "value_set_token",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取token的值。",
        "name": "value_token",
        "return": {
          "type": "uint32_t",
          "desc": "值。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建value对象。",
        "name": "value_create",
        "return": {
          "type": "value_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁value对象。",
        "name": "value_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "重置value对象。",
        "name": "value_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为value对象。\n\n> 供脚本语言使用",
        "name": "value_cast",
        "return": {
          "type": "value_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/value.h",
    "desc": "一个通用数据类型，用来存放整数、浮点数、字符串和其它对象。\n\n在C/C++中，一般不需动态创建对象，直接声明并初始化即可。如：\n\n```c\nvalue_t v;\nvalue_set_int(&v, 100);\n```\n\n> 在脚本语言中，需要动态创建对象。",
    "name": "value_t",
    "order": -9,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "wh_t",
            "name": "w",
            "desc": "LCD宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "LCD高度。"
          },
          {
            "type": "app_type_t",
            "name": "app_type",
            "desc": "应用程序的类型。"
          },
          {
            "type": "const char*",
            "name": "app_name",
            "desc": "应用程序的名称(必须为常量字符串)。"
          },
          {
            "type": "const char*",
            "name": "app_root",
            "desc": "应用程序的根目录，用于定位资源文件(必须为常量字符串)。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "初始化TK。",
        "name": "tk_init",
        "alias": "init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "进入TK事件主循环。",
        "name": "tk_run",
        "alias": "run",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "退出TK事件主循环。",
        "name": "tk_quit",
        "alias": "global_quit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取全局指针的X坐标。",
        "name": "tk_get_pointer_x",
        "alias": "global_get_pointer_x",
        "return": {
          "type": "int32_t",
          "desc": "返回全局指针的X坐标。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取全局指针的Y坐标。",
        "name": "tk_get_pointer_y",
        "alias": "global_get_pointer_y",
        "return": {
          "type": "int32_t",
          "desc": "返回全局指针的X坐标。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取全局指针是否按下。",
        "name": "tk_is_pointer_pressed",
        "alias": "global_is_pointer_pressed",
        "return": {
          "type": "bool_t",
          "desc": "返回全局指针是否按下。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "src/awtk_global.h",
    "desc": "TK全局对象。",
    "name": "global_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "bidi 类型常量定义。",
    "consts": [
      {
        "desc": "自动检查。",
        "name": "BIDI_TYPE_AUTO"
      },
      {
        "desc": "Left-To-Right letter。",
        "name": "BIDI_TYPE_LTR"
      },
      {
        "desc": "Right-To-Left letter。",
        "name": "BIDI_TYPE_RTL"
      },
      {
        "desc": "Left-To-Right letter Override。",
        "name": "BIDI_TYPE_LRO"
      },
      {
        "desc": "Right-To-Left letter Override。",
        "name": "BIDI_TYPE_RLO"
      },
      {
        "desc": "Weak Left To Right paragraph。",
        "name": "BIDI_TYPE_WLTR"
      },
      {
        "desc": "Weak Right To Left paragraph。",
        "name": "BIDI_TYPE_WRTL"
      }
    ],
    "header": "base/bidi.h",
    "name": "bidi_type_t",
    "prefix": "BIDI_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "图片绘制方法常量定义。",
    "consts": [
      {
        "desc": "缺省显示。将图片按原大小显示在目标矩形的左上角。",
        "name": "IMAGE_DRAW_DEFAULT"
      },
      {
        "desc": "居中显示。将图片按原大小显示在目标矩形的中央。",
        "name": "IMAGE_DRAW_CENTER"
      },
      {
        "desc": "图标显示。同居中显示，但会根据屏幕密度调整大小。",
        "name": "IMAGE_DRAW_ICON"
      },
      {
        "desc": "缩放显示。将图片缩放至目标矩形的大小(不保证宽高成比例)。",
        "name": "IMAGE_DRAW_SCALE"
      },
      {
        "desc": "自动缩放显示。将图片缩放至目标矩形的宽度或高度(选取最小的比例)，并居中显示。",
        "name": "IMAGE_DRAW_SCALE_AUTO"
      },
      {
        "desc": "如果图片比目标矩形大，自动缩小显示，否则居中显示。",
        "name": "IMAGE_DRAW_SCALE_DOWN"
      },
      {
        "desc": "宽度缩放显示。 将图片缩放至目标矩形的宽度，高度按此比例进行缩放，超出不部分不显示。",
        "name": "IMAGE_DRAW_SCALE_W"
      },
      {
        "desc": "高度缩放显示。将图片缩放至目标矩形的高度，宽度按此比例进行缩放，超出不部分不显示。",
        "name": "IMAGE_DRAW_SCALE_H"
      },
      {
        "desc": "平铺显示。",
        "name": "IMAGE_DRAW_REPEAT"
      },
      {
        "desc": "水平方向平铺显示，垂直方向缩放。",
        "name": "IMAGE_DRAW_REPEAT_X"
      },
      {
        "desc": "垂直方向平铺显示，水平方向缩放。",
        "name": "IMAGE_DRAW_REPEAT_Y"
      },
      {
        "desc": "垂直方向平铺显示，水平方向缩放(从底部到顶部)。",
        "name": "IMAGE_DRAW_REPEAT_Y_INVERSE"
      },
      {
        "desc": "9宫格显示。\n将图片分成等大小的9块，4个角按原大小显示在目标矩形的4个角，左右上下和中间5块分别缩放显示在对应的目标区域。",
        "name": "IMAGE_DRAW_PATCH9"
      },
      {
        "desc": "水平方向3宫格显示，垂直方向居中显示。\n将图片在水平方向上分成等大小的3块，左右两块按原大小显示在目标矩形的左右，中间一块缩放显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_PATCH3_X"
      },
      {
        "desc": "垂直方向3宫格显示，水平方向居中显示。\n将图片在垂直方向上分成等大小的3块，上下两块按原大小显示在目标矩形的上下，中间一块缩放显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_PATCH3_Y"
      },
      {
        "desc": "水平方向3宫格显示，垂直方向缩放显示。\n将图片在水平方向上分成等大小的3块，左右两块按原大小显示在目标矩形的左右，中间一块缩放显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_PATCH3_X_SCALE_Y"
      },
      {
        "desc": "垂直方向3宫格显示，水平方向缩放显示。\n将图片在垂直方向上分成等大小的3块，上下两块按原大小显示在目标矩形的上下，中间一块缩放显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_PATCH3_Y_SCALE_X"
      },
      {
        "desc": "平铺9宫格显示。\n将图片分成4个角和5块平铺块，4个角按原大小显示在目标矩形的4个角，其余5块会平铺对应的目标区域。\n切割方法为（如下图）：\n如果图片宽度为奇数，则中间一块为一列数据，如果图片宽度为偶数，则中间一块为二列数据，其他数据分为左右块\n如果图片高度为奇数，则中间一块为一行数据，如果图片高度为偶数，则中间一块为二行数据，其他数据分为上下块\n中间一块数据根据上面两条规则组成4中情况，分别是一列一行数据，一列两行数据，两列一行数据和两行两列数据",
        "name": "IMAGE_DRAW_REPEAT9"
      },
      {
        "desc": "水平方向3宫格显示，垂直方向居中显示。\n将图片在水平方向上分成左右相等两块和中间一块，如果图片宽度为奇数，则中间一块为一列数据，如果图片宽度为偶数，则中间一块为二列数据，其他数据分为左右块。\n左右两块按原大小显示在目标矩形的左右，中间一列像素点平铺显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_REPEAT3_X"
      },
      {
        "desc": "垂直方向3宫格显示，水平方向居中显示。\n将图片在垂直方向上分成上下相等两块和中间一块，如果图片高度为奇数，则中间一块为一行数据，如果图片高度为偶数，则中间一块为二行数据，其他数据分为上下块\n上下两块按原大小显示在目标矩形的上下，中间一块平铺显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_REPEAT3_Y"
      }
    ],
    "header": "base/bitmap.h",
    "name": "image_draw_type_t",
    "prefix": "IMAGE_DRAW_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "base/canvas_offline.h",
    "desc": "离线画布 canvas。",
    "name": "canvas_offline_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取画布的宽度。",
        "name": "canvas_get_width",
        "return": {
          "type": "wh_t",
          "desc": "返回画布的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取画布的高度。",
        "name": "canvas_get_height",
        "return": {
          "type": "wh_t",
          "desc": "返回画布的高度。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取裁剪区。",
        "name": "canvas_get_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置裁剪区。",
        "name": "canvas_set_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "rect对象。"
          },
          {
            "type": "bool_t",
            "name": "translate",
            "desc": "是否将裁剪区的位置加上canvas当前的偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置裁剪区。",
        "name": "canvas_set_clip_rect_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置填充颜色。\n\n> 供脚本语言使用。",
        "name": "canvas_set_fill_color_str",
        "alias": "canvas_set_fill_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置文本颜色。\n\n> 供脚本语言使用。",
        "name": "canvas_set_text_color_str",
        "alias": "canvas_set_text_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置线条颜色。\n\n> 供脚本语言使用。",
        "name": "canvas_set_stroke_color_str",
        "alias": "canvas_set_stroke_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "uint8_t",
            "name": "alpha",
            "desc": "alpha值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置全局alpha值。",
        "name": "canvas_set_global_alpha",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "dx",
            "desc": "x偏移。"
          },
          {
            "type": "xy_t",
            "name": "dy",
            "desc": "y偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "平移原点坐标。",
        "name": "canvas_translate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "dx",
            "desc": "x偏移。"
          },
          {
            "type": "xy_t",
            "name": "dy",
            "desc": "y偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "反向平移原点坐标。",
        "name": "canvas_untranslate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "画垂直线。",
        "name": "canvas_draw_vline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "画水平线。",
        "name": "canvas_draw_hline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制矩形。",
        "name": "canvas_fill_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "用填充颜色填充指定矩形。\n\n> 如果lcd的颜色格式带alpha通道，连同alpha的值一起修改。",
        "name": "canvas_clear_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制矩形。",
        "name": "canvas_stroke_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "字体名称。"
          },
          {
            "type": "font_size_t",
            "name": "size",
            "desc": "字体大小。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置字体。",
        "name": "canvas_set_font",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "计算文本所占的宽度。\n\n> 供脚本语言使用。",
        "name": "canvas_measure_utf8",
        "alias": "canvas_measure_text",
        "return": {
          "type": "float_t",
          "desc": "返回文本所占的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制文本。\n\n> 供脚本语言使用。",
        "name": "canvas_draw_utf8",
        "alias": "canvas_draw_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "矩形区域。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制文本。\n\n> 供脚本语言使用。",
        "name": "canvas_draw_utf8_in_rect",
        "alias": "canvas_draw_text_in_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "xy_t",
            "name": "cx",
            "desc": "中心点x坐标。"
          },
          {
            "type": "xy_t",
            "name": "cy",
            "desc": "中心点y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制图标。",
        "name": "canvas_draw_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "const rect_t*",
            "name": "src",
            "desc": "源区域。"
          },
          {
            "type": "const rect_t*",
            "name": "dst",
            "desc": "目的区域。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制图片。",
        "name": "canvas_draw_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "image_draw_type_t",
            "name": "draw_type",
            "desc": "绘制类型。"
          },
          {
            "type": "const rect_t*",
            "name": "dst",
            "desc": "目的区域。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制图片。",
        "name": "canvas_draw_image_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "image_draw_type_t",
            "name": "draw_type",
            "desc": "绘制类型。"
          },
          {
            "type": "const rect_t*",
            "name": "src",
            "desc": "源区域。"
          },
          {
            "type": "const rect_t*",
            "name": "dst",
            "desc": "目的区域。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制图片。",
        "name": "canvas_draw_image_ex2",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取vgcanvas对象。",
        "name": "canvas_get_vgcanvas",
        "return": {
          "type": "vgcanvas_t*",
          "desc": "返回vgcanvas对象。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为canvas对象(供脚本语言使用)。",
        "name": "canvas_cast",
        "return": {
          "type": "canvas_t*",
          "desc": "canvas对象。"
        }
      },
      {
        "params": [
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "释放相关资源。",
        "name": "canvas_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "ox",
        "desc": "x坐标偏移。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "oy",
        "desc": "y坐标偏移。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "font_name",
        "desc": "当前字体名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "font_size",
        "desc": "当前字体大小。",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "global_alpha",
        "desc": "当前全局alpha。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/canvas.h",
    "desc": "提供基本的绘图功能和状态管理。",
    "name": "canvas_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "剪切板数据类型定义。",
    "consts": [
      {
        "desc": "无数据。",
        "name": "CLIP_BOARD_DATA_TYPE_NONE"
      },
      {
        "desc": "UTF8文本。",
        "name": "CLIP_BOARD_DATA_TYPE_TEXT"
      }
    ],
    "header": "base/clip_board.h",
    "name": "clip_board_data_type_t",
    "prefix": "CLIP_BOARD_DATA_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置文本(UTF8)数据到剪切板。",
        "name": "clip_board_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "从剪切板中获取文本(UTF8)数据。",
        "name": "clip_board_get_text",
        "return": {
          "type": "const char*",
          "desc": "返回文本数据。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/clip_board.h",
    "desc": "剪切板接口。",
    "name": "clip_board_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "对话框退出码。\n\n> 一般用作dialog_quit函数的参数。",
    "consts": [
      {
        "desc": "对话框被强行关闭或不关心关闭原因。",
        "name": "DIALOG_QUIT_NONE"
      },
      {
        "desc": "点击“OK”按钮关闭。",
        "name": "DIALOG_QUIT_OK"
      },
      {
        "desc": "点击“YES”按钮关闭。",
        "name": "DIALOG_QUIT_YES"
      },
      {
        "desc": "点击“CANCEL”按钮关闭。",
        "name": "DIALOG_QUIT_CANCEL"
      },
      {
        "desc": "点击“NO”按钮关闭。",
        "name": "DIALOG_QUIT_NO"
      },
      {
        "desc": "点击其它按钮关闭。",
        "name": "DIALOG_QUIT_OTHER"
      }
    ],
    "header": "base/dialog.h",
    "name": "dialog_quit_code_t",
    "prefix": "DIALOG_QUIT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "类型常量定义。",
    "consts": [
      {
        "desc": "指针按下事件名(pointer_event_t)。",
        "name": "EVT_POINTER_DOWN"
      },
      {
        "desc": "指针按下事件名，在子控件处理之前触发(pointer_event_t)。",
        "name": "EVT_POINTER_DOWN_BEFORE_CHILDREN"
      },
      {
        "desc": "指针移动事件名(pointer_event_t)。",
        "name": "EVT_POINTER_MOVE"
      },
      {
        "desc": "指针移动事件名，在子控件处理之前触发(pointer_event_t)。",
        "name": "EVT_POINTER_MOVE_BEFORE_CHILDREN"
      },
      {
        "desc": "指针抬起事件名(pointer_event_t)。",
        "name": "EVT_POINTER_UP"
      },
      {
        "desc": "指针抬起事件名，在子控件处理之前触发(pointer_event_t)。",
        "name": "EVT_POINTER_UP_BEFORE_CHILDREN"
      },
      {
        "desc": "滚轮事件名(wheel_event_t)。",
        "name": "EVT_WHEEL"
      },
      {
        "desc": "鼠标滚轮事件名，在子控件处理之前触发(wheel_event_t)。",
        "name": "EVT_WHEEL_BEFORE_CHILDREN"
      },
      {
        "desc": "取消前一个指针按下事件名(pointer_event_t)。",
        "name": "EVT_POINTER_DOWN_ABORT"
      },
      {
        "desc": "右键/长按弹出上下文菜单的事件名(pointer_event_t)。",
        "name": "EVT_CONTEXT_MENU"
      },
      {
        "desc": "指针进入事件名(pointer_event_t)。",
        "name": "EVT_POINTER_ENTER"
      },
      {
        "desc": "指针离开事件名(pointer_event_t)。",
        "name": "EVT_POINTER_LEAVE"
      },
      {
        "desc": "长按事件名(pointer_event_t)。",
        "name": "EVT_LONG_PRESS"
      },
      {
        "desc": "点击事件名(pointer_event_t)。",
        "name": "EVT_CLICK"
      },
      {
        "desc": "得到焦点事件名(event_t)。",
        "name": "EVT_FOCUS"
      },
      {
        "desc": "失去焦点事件名(event_t)。",
        "name": "EVT_BLUR"
      },
      {
        "desc": "键按下事件名(key_event_t)。",
        "name": "EVT_KEY_DOWN"
      },
      {
        "desc": "键长按事件名(key_event_t)。",
        "name": "EVT_KEY_LONG_PRESS"
      },
      {
        "desc": "键按下事件名，在子控件处理之前触发(key_event_t)。",
        "name": "EVT_KEY_DOWN_BEFORE_CHILDREN"
      },
      {
        "desc": "按键repeat事件名(key_event_t)。",
        "name": "EVT_KEY_REPEAT"
      },
      {
        "desc": "键抬起事件名(key_event_t)。",
        "name": "EVT_KEY_UP"
      },
      {
        "desc": "键抬起事件名，在子控件处理之前触发(key_event_t)。",
        "name": "EVT_KEY_UP_BEFORE_CHILDREN"
      },
      {
        "desc": "即将移动Widget的事件名(event_t)。",
        "name": "EVT_WILL_MOVE"
      },
      {
        "desc": "移动Widget的事件名(event_t)。",
        "name": "EVT_MOVE"
      },
      {
        "desc": "即将调整Widget大小的事件名(event_t)。",
        "name": "EVT_WILL_RESIZE"
      },
      {
        "desc": "调整Widget大小的事件名(event_t)。",
        "name": "EVT_RESIZE"
      },
      {
        "desc": "即将调整Widget大小/位置的事件名(event_t)。",
        "name": "EVT_WILL_MOVE_RESIZE"
      },
      {
        "desc": "调整Widget大小/位置的事件名(event_t)。",
        "name": "EVT_MOVE_RESIZE"
      },
      {
        "desc": "控件的值即将改变的事件名(value_change_event_t)。",
        "name": "EVT_VALUE_WILL_CHANGE"
      },
      {
        "desc": "控件的值改变的事件名(value_change_event_t)。",
        "name": "EVT_VALUE_CHANGED"
      },
      {
        "desc": "控件的值持续改变(如编辑器正在编辑)的事件名(value_change_event_t)。",
        "name": "EVT_VALUE_CHANGING"
      },
      {
        "desc": "绘制的事件名(paint_event_t)。",
        "name": "EVT_PAINT"
      },
      {
        "desc": "即将绘制的事件名(paint_event_t)。",
        "name": "EVT_BEFORE_PAINT"
      },
      {
        "desc": "绘制完成的事件名(paint_event_t)。",
        "name": "EVT_AFTER_PAINT"
      },
      {
        "desc": "绘制完成(canvas状态已经恢复)的事件名(paint_event_t)。",
        "name": "EVT_PAINT_DONE"
      },
      {
        "desc": "locale改变的事件(event_t)。",
        "name": "EVT_LOCALE_CHANGED"
      },
      {
        "desc": "控件动画开始事件(event_t)。",
        "name": "EVT_ANIM_START"
      },
      {
        "desc": "控件动画被主动停止的事件(event_t)。",
        "name": "EVT_ANIM_STOP"
      },
      {
        "desc": "控件动画被暂停的事件(event_t)。",
        "name": "EVT_ANIM_PAUSE"
      },
      {
        "desc": "控件动画yoyo/repeat时，完成一次的事件(event_t)。",
        "name": "EVT_ANIM_ONCE"
      },
      {
        "desc": "控件动画完成事件(event_t)。",
        "name": "EVT_ANIM_END"
      },
      {
        "desc": "窗口加载完成事件(event_t)。",
        "name": "EVT_WINDOW_LOAD"
      },
      {
        "desc": "控件加载完成事件(event_t)。",
        "name": "EVT_WIDGET_LOAD"
      },
      {
        "desc": "窗口即将打开事件(event_t)。\n如果有窗口动画，在窗口动画开始前触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。",
        "name": "EVT_WINDOW_WILL_OPEN"
      },
      {
        "desc": "窗口打开事件(event_t)。\n如果有窗口动画，在窗口动画完成时触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。",
        "name": "EVT_WINDOW_OPEN"
      },
      {
        "desc": "窗口被切换到后台事件(event_t)。\n打开新窗口时，当前窗口被切换到后台时，对当前窗口触发本事件。",
        "name": "EVT_WINDOW_TO_BACKGROUND"
      },
      {
        "desc": "窗口被切换到前台事件(event_t)。\n关闭当前窗口时，前一个窗口被切换到前台时，对前一个窗口触发本事件。",
        "name": "EVT_WINDOW_TO_FOREGROUND"
      },
      {
        "desc": "窗口关闭事件。",
        "name": "EVT_WINDOW_CLOSE"
      },
      {
        "desc": "请求关闭窗口的事件(event_t)。",
        "name": "EVT_REQUEST_CLOSE_WINDOW"
      },
      {
        "desc": "顶层窗口改变的事件(window_event_t)。",
        "name": "EVT_TOP_WINDOW_CHANGED"
      },
      {
        "desc": "输入法启动(event_t)。",
        "name": "EVT_IM_START"
      },
      {
        "desc": "输入法停止(event_t)。",
        "name": "EVT_IM_STOP"
      },
      {
        "desc": "输入法提交输入的文本事件(im_commit_event_t)。",
        "name": "EVT_IM_COMMIT"
      },
      {
        "desc": "清除编辑器内容(event_t)。",
        "name": "EVT_IM_CLEAR"
      },
      {
        "desc": "取消编辑，恢复之前的内容(event_t)。",
        "name": "EVT_IM_CANCEL"
      },
      {
        "desc": "进入预编辑状态(event_t)。",
        "name": "EVT_IM_PREEDIT"
      },
      {
        "desc": "确认预编辑内容，退出预编辑状态(event_t)。",
        "name": "EVT_IM_PREEDIT_CONFIRM"
      },
      {
        "desc": "删除预编辑内容，退出预编辑状态event_t)。",
        "name": "EVT_IM_PREEDIT_ABORT"
      },
      {
        "desc": "输入法请求显示候选字事件(im_candidates_event_t)。",
        "name": "EVT_IM_SHOW_CANDIDATES"
      },
      {
        "desc": "输入法请求显示预候选字事件(im_candidates_event_t)。",
        "name": "EVT_IM_SHOW_PRE_CANDIDATES"
      },
      {
        "desc": "输入法语言改变事件(event_t)。",
        "name": "EVT_IM_LANG_CHANGED"
      },
      {
        "desc": "软键盘Action点击事件(event_t)。",
        "name": "EVT_IM_ACTION"
      },
      {
        "desc": "请求更新软键盘上的Action按钮的信息(im_action_button_info_event_t)。",
        "name": "EVT_IM_ACTION_INFO"
      },
      {
        "desc": "开始拖动(event_t)。",
        "name": "EVT_DRAG_START"
      },
      {
        "desc": "拖动(event_t)。",
        "name": "EVT_DRAG"
      },
      {
        "desc": "结束拖动(event_t)。",
        "name": "EVT_DRAG_END"
      },
      {
        "desc": "Reset(event_t)。",
        "name": "EVT_RESET"
      },
      {
        "desc": "在指定的时间内(WITH_SCREEN_SAVER_TIME)，没有用户输入事件，由窗口管理器触发。",
        "name": "EVT_SCREEN_SAVER"
      },
      {
        "desc": "内存不足(event_t)。",
        "name": "EVT_LOW_MEMORY"
      },
      {
        "desc": "内存耗尽(event_t)。",
        "name": "EVT_OUT_OF_MEMORY"
      },
      {
        "desc": "屏幕即将旋转(event_t)。",
        "name": "EVT_ORIENTATION_WILL_CHANGED"
      },
      {
        "desc": "屏幕旋转(event_t)。",
        "name": "EVT_ORIENTATION_CHANGED"
      },
      {
        "desc": "控件创建事件(event_t)。",
        "name": "EVT_WIDGET_CREATED"
      },
      {
        "desc": "请求退出应用程序事件。\n点击原生窗口关闭按钮时，通过窗口管理器触发，注册该事件并返回RET_STOP，可以阻止窗口关闭。",
        "name": "EVT_REQUEST_QUIT_APP"
      },
      {
        "desc": "主题变化(event_t)。",
        "name": "EVT_THEME_CHANGED"
      },
      {
        "desc": "控件加载新的子控件(event_t)。",
        "name": "EVT_WIDGET_ADD_CHILD"
      },
      {
        "desc": "控件移除子控件(event_t)。",
        "name": "EVT_WIDGET_REMOVE_CHILD"
      },
      {
        "desc": "scroll view开始滚动(event_t)。",
        "name": "EVT_SCROLL_START"
      },
      {
        "desc": "scroll view滚动(event_t)。",
        "name": "EVT_SCROLL"
      },
      {
        "desc": "scroll view结束滚动(event_t)。",
        "name": "EVT_SCROLL_END"
      },
      {
        "desc": "多点触摸手势(multi_gesture_event_t)。",
        "name": "EVT_MULTI_GESTURE"
      },
      {
        "desc": "页面改变了(event_t)。",
        "name": "EVT_PAGE_CHANGED"
      },
      {
        "desc": "资源管理加载某个资源(assets_event_t)。",
        "name": "EVT_ASSET_MANAGER_LOAD_ASSET"
      },
      {
        "desc": "资源管理卸载某个资源(assets_event_t)。",
        "name": "EVT_ASSET_MANAGER_UNLOAD_ASSET"
      },
      {
        "desc": "资源管理移除同种资源缓存(assets_event_t)。",
        "name": "EVT_ASSET_MANAGER_CLEAR_CACHE"
      },
      {
        "desc": "定时器(event_t)。",
        "name": "EVT_TIMER"
      },
      {
        "desc": "event queue其它请求编号起始值。",
        "name": "EVT_REQ_START"
      },
      {
        "desc": "用户定义事件起始值。",
        "name": "EVT_USER_START"
      },
      {
        "desc": "无效事件名称。",
        "name": "EVT_NONE"
      },
      {
        "desc": "对象的属性即将改变的事件名(prop_change_event_t)。",
        "name": "EVT_PROP_WILL_CHANGE"
      },
      {
        "desc": "对象的属性改变的事件名(prop_change_event_t)。",
        "name": "EVT_PROP_CHANGED"
      },
      {
        "desc": "对象即将执行命令(cmd_exec_event_t)。",
        "name": "EVT_CMD_WILL_EXEC"
      },
      {
        "desc": "对象完成执行命令(cmd_exec_event_t)。",
        "name": "EVT_CMD_EXECED"
      },
      {
        "desc": "对象命令是否能执行指定的命令(cmd_exec_event_t)。",
        "name": "EVT_CMD_CAN_EXEC"
      },
      {
        "desc": "即将增加和删除集合中的项目(event_t)。",
        "name": "EVT_ITEMS_WILL_CHANGE"
      },
      {
        "desc": "完成增加和删除集合中的项目(event_t)。",
        "name": "EVT_ITEMS_CHANGED"
      },
      {
        "desc": "对象的属性改变的事件名(props_event_t)。",
        "name": "EVT_PROPS_CHANGED"
      },
      {
        "desc": "进度状态(progress_event_t)。",
        "name": "EVT_PROGRESS"
      },
      {
        "desc": "完成(done_event_t)。",
        "name": "EVT_DONE"
      },
      {
        "desc": "错误(error_event_t)。",
        "name": "EVT_ERROR"
      },
      {
        "desc": "对象销毁事件名(event_t)。",
        "name": "EVT_DESTROY"
      }
    ],
    "header": "base/events.h",
    "name": "event_type_t",
    "prefix": "EVT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "事件名。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "将事件名转换成事件的值。",
        "name": "event_from_name",
        "return": {
          "type": "int32_t",
          "desc": "返回事件的值。"
        }
      },
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为event对象。\n\n> 供脚本语言使用",
        "name": "event_cast",
        "return": {
          "type": "event_t*",
          "desc": "event对象。"
        }
      },
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取event类型。",
        "name": "event_get_type",
        "return": {
          "type": "uint32_t",
          "desc": "返回event类型。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建event对象。\n\n主要给脚本语言使用。",
        "name": "event_create",
        "return": {
          "type": "event_t*",
          "desc": "返回事件对象。"
        }
      },
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁事件对象。\n\n主要给脚本语言使用。",
        "name": "event_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "type",
        "desc": "类型。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "size",
        "desc": "结构体的大小。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "time",
        "desc": "事件发生的时间。",
        "type": "uint64_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "target",
        "desc": "事件发生的目标对象。",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "事件基类。",
    "name": "event_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "字体名，为NULL时使用缺省字体。"
          },
          {
            "type": "font_size_t",
            "name": "size",
            "desc": "字体的大小(矢量字体指定为0即可)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "卸载指定的字体。",
        "name": "font_manager_unload_font",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          },
          {
            "type": "uint32_t",
            "name": "cache_size",
            "desc": "每种字体保留缓存字模的个数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "清除最久没有被使用的缓冲字模。",
        "name": "font_manager_shrink_cache",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "卸载全部字体。",
        "name": "font_manager_unload_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/font_manager.h",
    "desc": "字体管理器，负责字体的加载和缓存管理。\n(如果使用nanovg，字体由nanovg内部管理)",
    "name": "font_manager_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "字模格式常量定义。",
    "consts": [
      {
        "desc": "每个像素占用1个字节(缺省)。",
        "name": "GLYPH_FMT_ALPHA"
      },
      {
        "desc": "每个像素占用1个比特。",
        "name": "GLYPH_FMT_MONO"
      },
      {
        "desc": "每个像素占用4个字节。",
        "name": "GLYPH_FMT_RGBA"
      }
    ],
    "header": "base/font.h",
    "name": "glyph_format_t",
    "prefix": "GLYPH_FMT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "idle_func_t",
            "name": "on_idle",
            "desc": "idle回调函数，回调函数返回RET_REPEAT，则下次继续执行，否则自动移出。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "idle回调函数的上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom",
          "static": true
        },
        "desc": "增加一个idle。",
        "name": "idle_add",
        "return": {
          "type": "uint32_t",
          "desc": "返回idle的ID，0表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "idle_id",
            "desc": "idleID。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "删除指定的idle。",
        "name": "idle_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "ctx",
            "desc": "idle回调函数的上下文"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "根据上下文删除所有对应的idle。",
        "name": "idle_remove_all_by_ctx",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/idle.h",
    "desc": "idle可以看作是duration为0的定时器。\n\n> idle可以用来实现一些异步处理。\n\n示例：\n\n```c\nstatic ret_t something_on_idle(const idle_info_t* info) {\nwidget_t* widget = WIDGET(info->ctx);\nedit_t* edit = EDIT(widget);\n...\nreturn RET_REMOVE;\n}\n\n...\n\nidle_add(something_on_idle, edit);\n\n```\n\n> 在非GUI线程请用idle\\_queue。",
    "name": "idle_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "获取缺省的图片管理器。",
        "name": "image_manager",
        "alias": "image_manager_instance",
        "return": {
          "type": "image_manager_t*",
          "desc": "返回图片管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称。"
          },
          {
            "type": "bitmap_t*",
            "name": "image",
            "desc": "用于返回图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定的图片。\n先从缓存查找，如果没找到，再加载并缓存。",
        "name": "image_manager_get_bitmap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "预加载指定的图片。",
        "name": "image_manager_preload",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/image_manager.h",
    "desc": "图片管理器。负责加载，解码和缓存图片。",
    "name": "image_manager_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "输入类型常量定义。",
    "consts": [
      {
        "desc": "文本。字符串属性值：text",
        "name": "INPUT_TEXT"
      },
      {
        "desc": "整数。字符串属性值：int",
        "name": "INPUT_INT"
      },
      {
        "desc": "非负整数。字符串属性值：uint",
        "name": "INPUT_UINT"
      },
      {
        "desc": "16进制整数。字符串属性值：hex",
        "name": "INPUT_HEX"
      },
      {
        "desc": "浮点数。字符串属性值：float",
        "name": "INPUT_FLOAT"
      },
      {
        "desc": "非负浮点数。字符串属性值：ufloat",
        "name": "INPUT_UFLOAT"
      },
      {
        "desc": "邮件地址。字符串属性值：email",
        "name": "INPUT_EMAIL"
      },
      {
        "desc": "密码。字符串属性值：password",
        "name": "INPUT_PASSWORD"
      },
      {
        "desc": "电话号码。字符串属性值：phone",
        "name": "INPUT_PHONE"
      },
      {
        "desc": "IP Addr V4(如：192.168.1.1)。字符串属性值：ipv4",
        "name": "INPUT_IPV4"
      },
      {
        "desc": "日期(如：2020/02/20)。字符串属性值：date",
        "name": "INPUT_DATE"
      },
      {
        "desc": "时间(时分，如：12:00)。字符串属性值：time",
        "name": "INPUT_TIME"
      },
      {
        "desc": "时间(时分秒，如：12:00:00)。字符串属性值：time_full",
        "name": "INPUT_TIME_FULL"
      },
      {
        "desc": "使用自定义的软键盘(如计算器等应用不希望弹出系统软键盘)。字符串属性值：custom",
        "name": "INPUT_CUSTOM"
      },
      {
        "desc": "使用自定义的密码软键盘。字符串属性值：custom_password",
        "name": "INPUT_CUSTOM_PASSWORD"
      },
      {
        "desc": "纯英文文本。字符串属性值：ascii",
        "name": "INPUT_ASCII"
      }
    ],
    "header": "base/input_method.h",
    "name": "input_type_t",
    "prefix": "INPUT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "提交输入文本。",
        "name": "input_method_commit_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "const char*",
            "name": "lang",
            "desc": "语言。格式为语言+国家/地区码。如：zh_cn和en_us等。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置语言。\n\n> 有时在同一种语言环境下，也需要输入多种文字，典型的情况是同时输入中文和英文。\n> 比如T9输入法，可以同时支持中文和英文输入，配合软键盘随时切换输入的语言。\n> 数字、小写字母、大写字母和符合也可以视为输入的语言。\n> 主要用于提示输入法引擎选择适当的输入方法。",
        "name": "input_method_set_lang",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取语言。",
        "name": "input_method_get_lang",
        "return": {
          "type": "const char*",
          "desc": "返回语言。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "uint32_t",
            "name": "key",
            "desc": "键值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "提交按键。",
        "name": "input_method_dispatch_key",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "提交按键。",
        "name": "input_method_dispatch_keys",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "分发进入预编辑状态的事件。",
        "name": "input_method_dispatch_preedit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "分发确认预编辑状态的事件(提交预编辑内容，退出预编辑状态)。",
        "name": "input_method_dispatch_preedit_confirm",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "分发取消预编辑状态的事件(提交预编辑内容，退出预编辑状态)。",
        "name": "input_method_dispatch_preedit_abort",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "获取全局输入法对象。",
        "name": "input_method",
        "alias": "input_method_instance",
        "return": {
          "type": "input_method_t*",
          "desc": "成功返回输入法对象，失败返回NULL。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/input_method.h",
    "desc": "输入法接口。\n\n常见的实现方式有以下几种：\n\n* 空实现。用于不需要输入法的嵌入式平台。\n\n* 缺省实现。用于需要输入法的嵌入式平台。\n\n* 基于SDL实现的平台原生输入法。用于桌面系统和手机系统。\n\n```graphviz\n[default_style]\n\ninput_method_default_t -> input_method_t [arrowhead=empty style=dashed]\ninput_method_sdl_t -> input_method_t [arrowhead=empty style=dashed]\ninput_method_null_t -> input_method_t [arrowhead=empty style=dashed]\n\n```\n\n> 输入类型请参考：[input\\_type](input_type_t.md)",
    "name": "input_method_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "key code。",
    "consts": [
      {
        "desc": "TK_KEY_RETURN",
        "name": "TK_KEY_RETURN"
      },
      {
        "desc": "TK_KEY_ESCAPE",
        "name": "TK_KEY_ESCAPE"
      },
      {
        "desc": "TK_KEY_BACKSPACE",
        "name": "TK_KEY_BACKSPACE"
      },
      {
        "desc": "TK_KEY_TAB",
        "name": "TK_KEY_TAB"
      },
      {
        "desc": "TK_KEY_SPACE",
        "name": "TK_KEY_SPACE"
      },
      {
        "desc": "TK_KEY_EXCLAIM",
        "name": "TK_KEY_EXCLAIM"
      },
      {
        "desc": "TK_KEY_QUOTEDBL",
        "name": "TK_KEY_QUOTEDBL"
      },
      {
        "desc": "TK_KEY_HASH",
        "name": "TK_KEY_HASH"
      },
      {
        "desc": "TK_KEY_PERCENT",
        "name": "TK_KEY_PERCENT"
      },
      {
        "desc": "TK_KEY_DOLLAR",
        "name": "TK_KEY_DOLLAR"
      },
      {
        "desc": "TK_KEY_AMPERSAND",
        "name": "TK_KEY_AMPERSAND"
      },
      {
        "desc": "TK_KEY_QUOTE",
        "name": "TK_KEY_QUOTE"
      },
      {
        "desc": "TK_KEY_LEFTPAREN",
        "name": "TK_KEY_LEFTPAREN"
      },
      {
        "desc": "TK_KEY_RIGHTPAREN",
        "name": "TK_KEY_RIGHTPAREN"
      },
      {
        "desc": "TK_KEY_ASTERISK",
        "name": "TK_KEY_ASTERISK"
      },
      {
        "desc": "TK_KEY_PLUS",
        "name": "TK_KEY_PLUS"
      },
      {
        "desc": "TK_KEY_COMMA",
        "name": "TK_KEY_COMMA"
      },
      {
        "desc": "TK_KEY_MINUS",
        "name": "TK_KEY_MINUS"
      },
      {
        "desc": "TK_KEY_PERIOD",
        "name": "TK_KEY_PERIOD"
      },
      {
        "desc": "TK_KEY_SLASH",
        "name": "TK_KEY_SLASH"
      },
      {
        "desc": "TK_KEY_0",
        "name": "TK_KEY_0"
      },
      {
        "desc": "TK_KEY_1",
        "name": "TK_KEY_1"
      },
      {
        "desc": "TK_KEY_2",
        "name": "TK_KEY_2"
      },
      {
        "desc": "TK_KEY_3",
        "name": "TK_KEY_3"
      },
      {
        "desc": "TK_KEY_4",
        "name": "TK_KEY_4"
      },
      {
        "desc": "TK_KEY_5",
        "name": "TK_KEY_5"
      },
      {
        "desc": "TK_KEY_6",
        "name": "TK_KEY_6"
      },
      {
        "desc": "TK_KEY_7",
        "name": "TK_KEY_7"
      },
      {
        "desc": "TK_KEY_8",
        "name": "TK_KEY_8"
      },
      {
        "desc": "TK_KEY_9",
        "name": "TK_KEY_9"
      },
      {
        "desc": "TK_KEY_COLON",
        "name": "TK_KEY_COLON"
      },
      {
        "desc": "TK_KEY_SEMICOLON",
        "name": "TK_KEY_SEMICOLON"
      },
      {
        "desc": "TK_KEY_LESS",
        "name": "TK_KEY_LESS"
      },
      {
        "desc": "TK_KEY_EQUAL",
        "name": "TK_KEY_EQUAL"
      },
      {
        "desc": "TK_KEY_GREATER",
        "name": "TK_KEY_GREATER"
      },
      {
        "desc": "TK_KEY_QUESTION",
        "name": "TK_KEY_QUESTION"
      },
      {
        "desc": "TK_KEY_AT",
        "name": "TK_KEY_AT"
      },
      {
        "desc": "TK_KEY_LEFTBRACKET",
        "name": "TK_KEY_LEFTBRACKET"
      },
      {
        "desc": "TK_KEY_BACKSLASH",
        "name": "TK_KEY_BACKSLASH"
      },
      {
        "desc": "TK_KEY_RIGHTBRACKET",
        "name": "TK_KEY_RIGHTBRACKET"
      },
      {
        "desc": "TK_KEY_CARET",
        "name": "TK_KEY_CARET"
      },
      {
        "desc": "TK_KEY_UNDERSCORE",
        "name": "TK_KEY_UNDERSCORE"
      },
      {
        "desc": "TK_KEY_BACKQUOTE",
        "name": "TK_KEY_BACKQUOTE"
      },
      {
        "desc": "TK_KEY_a",
        "name": "TK_KEY_a"
      },
      {
        "desc": "TK_KEY_b",
        "name": "TK_KEY_b"
      },
      {
        "desc": "TK_KEY_c",
        "name": "TK_KEY_c"
      },
      {
        "desc": "TK_KEY_d",
        "name": "TK_KEY_d"
      },
      {
        "desc": "TK_KEY_e",
        "name": "TK_KEY_e"
      },
      {
        "desc": "TK_KEY_f",
        "name": "TK_KEY_f"
      },
      {
        "desc": "TK_KEY_g",
        "name": "TK_KEY_g"
      },
      {
        "desc": "TK_KEY_h",
        "name": "TK_KEY_h"
      },
      {
        "desc": "TK_KEY_i",
        "name": "TK_KEY_i"
      },
      {
        "desc": "TK_KEY_j",
        "name": "TK_KEY_j"
      },
      {
        "desc": "TK_KEY_k",
        "name": "TK_KEY_k"
      },
      {
        "desc": "TK_KEY_l",
        "name": "TK_KEY_l"
      },
      {
        "desc": "TK_KEY_m",
        "name": "TK_KEY_m"
      },
      {
        "desc": "TK_KEY_n",
        "name": "TK_KEY_n"
      },
      {
        "desc": "TK_KEY_o",
        "name": "TK_KEY_o"
      },
      {
        "desc": "TK_KEY_p",
        "name": "TK_KEY_p"
      },
      {
        "desc": "TK_KEY_q",
        "name": "TK_KEY_q"
      },
      {
        "desc": "TK_KEY_r",
        "name": "TK_KEY_r"
      },
      {
        "desc": "TK_KEY_s",
        "name": "TK_KEY_s"
      },
      {
        "desc": "TK_KEY_t",
        "name": "TK_KEY_t"
      },
      {
        "desc": "TK_KEY_u",
        "name": "TK_KEY_u"
      },
      {
        "desc": "TK_KEY_v",
        "name": "TK_KEY_v"
      },
      {
        "desc": "TK_KEY_w",
        "name": "TK_KEY_w"
      },
      {
        "desc": "TK_KEY_x",
        "name": "TK_KEY_x"
      },
      {
        "desc": "TK_KEY_y",
        "name": "TK_KEY_y"
      },
      {
        "desc": "TK_KEY_z",
        "name": "TK_KEY_z"
      },
      {
        "desc": "TK_KEY_A",
        "name": "TK_KEY_A"
      },
      {
        "desc": "TK_KEY_B",
        "name": "TK_KEY_B"
      },
      {
        "desc": "TK_KEY_C",
        "name": "TK_KEY_C"
      },
      {
        "desc": "TK_KEY_D",
        "name": "TK_KEY_D"
      },
      {
        "desc": "TK_KEY_E",
        "name": "TK_KEY_E"
      },
      {
        "desc": "TK_KEY_F",
        "name": "TK_KEY_F"
      },
      {
        "desc": "TK_KEY_G",
        "name": "TK_KEY_G"
      },
      {
        "desc": "TK_KEY_H",
        "name": "TK_KEY_H"
      },
      {
        "desc": "TK_KEY_I",
        "name": "TK_KEY_I"
      },
      {
        "desc": "TK_KEY_J",
        "name": "TK_KEY_J"
      },
      {
        "desc": "TK_KEY_K",
        "name": "TK_KEY_K"
      },
      {
        "desc": "TK_KEY_L",
        "name": "TK_KEY_L"
      },
      {
        "desc": "TK_KEY_M",
        "name": "TK_KEY_M"
      },
      {
        "desc": "TK_KEY_N",
        "name": "TK_KEY_N"
      },
      {
        "desc": "TK_KEY_O",
        "name": "TK_KEY_O"
      },
      {
        "desc": "TK_KEY_P",
        "name": "TK_KEY_P"
      },
      {
        "desc": "TK_KEY_Q",
        "name": "TK_KEY_Q"
      },
      {
        "desc": "TK_KEY_R",
        "name": "TK_KEY_R"
      },
      {
        "desc": "TK_KEY_S",
        "name": "TK_KEY_S"
      },
      {
        "desc": "TK_KEY_T",
        "name": "TK_KEY_T"
      },
      {
        "desc": "TK_KEY_U",
        "name": "TK_KEY_U"
      },
      {
        "desc": "TK_KEY_V",
        "name": "TK_KEY_V"
      },
      {
        "desc": "TK_KEY_W",
        "name": "TK_KEY_W"
      },
      {
        "desc": "TK_KEY_X",
        "name": "TK_KEY_X"
      },
      {
        "desc": "TK_KEY_Y",
        "name": "TK_KEY_Y"
      },
      {
        "desc": "TK_KEY_Z",
        "name": "TK_KEY_Z"
      },
      {
        "desc": "TK_KEY_DOT",
        "name": "TK_KEY_DOT"
      },
      {
        "desc": "TK_KEY_DELETE",
        "name": "TK_KEY_DELETE"
      },
      {
        "desc": "TK_KEY_LEFTBRACE",
        "name": "TK_KEY_LEFTBRACE"
      },
      {
        "desc": "TK_KEY_RIGHTBRACE",
        "name": "TK_KEY_RIGHTBRACE"
      },
      {
        "desc": "TK_KEY_LSHIFT",
        "name": "TK_KEY_LSHIFT"
      },
      {
        "desc": "TK_KEY_RSHIFT",
        "name": "TK_KEY_RSHIFT"
      },
      {
        "desc": "TK_KEY_LCTRL",
        "name": "TK_KEY_LCTRL"
      },
      {
        "desc": "TK_KEY_RCTRL",
        "name": "TK_KEY_RCTRL"
      },
      {
        "desc": "TK_KEY_LALT",
        "name": "TK_KEY_LALT"
      },
      {
        "desc": "TK_KEY_RALT",
        "name": "TK_KEY_RALT"
      },
      {
        "desc": "TK_KEY_CAPSLOCK",
        "name": "TK_KEY_CAPSLOCK"
      },
      {
        "desc": "TK_KEY_HOME",
        "name": "TK_KEY_HOME"
      },
      {
        "desc": "TK_KEY_END",
        "name": "TK_KEY_END"
      },
      {
        "desc": "TK_KEY_INSERT",
        "name": "TK_KEY_INSERT"
      },
      {
        "desc": "TK_KEY_UP",
        "name": "TK_KEY_UP"
      },
      {
        "desc": "TK_KEY_DOWN",
        "name": "TK_KEY_DOWN"
      },
      {
        "desc": "TK_KEY_LEFT",
        "name": "TK_KEY_LEFT"
      },
      {
        "desc": "TK_KEY_RIGHT",
        "name": "TK_KEY_RIGHT"
      },
      {
        "desc": "TK_KEY_PAGEUP",
        "name": "TK_KEY_PAGEUP"
      },
      {
        "desc": "TK_KEY_PAGEDOWN",
        "name": "TK_KEY_PAGEDOWN"
      },
      {
        "desc": "TK_KEY_F1",
        "name": "TK_KEY_F1"
      },
      {
        "desc": "TK_KEY_F2",
        "name": "TK_KEY_F2"
      },
      {
        "desc": "TK_KEY_F3",
        "name": "TK_KEY_F3"
      },
      {
        "desc": "TK_KEY_F4",
        "name": "TK_KEY_F4"
      },
      {
        "desc": "TK_KEY_F5",
        "name": "TK_KEY_F5"
      },
      {
        "desc": "TK_KEY_F6",
        "name": "TK_KEY_F6"
      },
      {
        "desc": "TK_KEY_F7",
        "name": "TK_KEY_F7"
      },
      {
        "desc": "TK_KEY_F8",
        "name": "TK_KEY_F8"
      },
      {
        "desc": "TK_KEY_F9",
        "name": "TK_KEY_F9"
      },
      {
        "desc": "TK_KEY_F10",
        "name": "TK_KEY_F10"
      },
      {
        "desc": "TK_KEY_F11",
        "name": "TK_KEY_F11"
      },
      {
        "desc": "TK_KEY_F12",
        "name": "TK_KEY_F12"
      },
      {
        "desc": "TK_KEY_MENU",
        "name": "TK_KEY_MENU"
      },
      {
        "desc": "TK_KEY_COMMAND",
        "name": "TK_KEY_COMMAND"
      },
      {
        "desc": "TK_KEY_BACK",
        "name": "TK_KEY_BACK"
      },
      {
        "desc": "TK_KEY_CANCEL",
        "name": "TK_KEY_CANCEL"
      },
      {
        "desc": "TK_KEY_WHEEL",
        "name": "TK_KEY_WHEEL"
      }
    ],
    "header": "base/keys.h",
    "name": "key_code_t",
    "prefix": "TK_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "获取缺省locale_info。",
        "name": "locale_info",
        "alias": "locale_info_instance",
        "return": {
          "type": "locale_info_t*",
          "desc": "返回locale_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "待翻译的文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "翻译字符串。",
        "name": "locale_info_tr",
        "return": {
          "type": "const char*",
          "desc": "返回翻译之后的字符串。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          },
          {
            "type": "char*",
            "name": "language",
            "desc": "语言。"
          },
          {
            "type": "char*",
            "name": "country",
            "desc": "国家或地区。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前的国家和语言。",
        "name": "locale_info_change",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "locale_info_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "注销指定事件的处理函数。",
        "name": "locale_info_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/locale_info.h",
    "desc": "本地化信息。提供字符串翻译数据管理，当前语言改变的事件通知等等。",
    "name": "locale_info_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "style常量定义。",
    "consts": [
      {
        "desc": "背景颜色。",
        "name": "STYLE_ID_BG_COLOR"
      },
      {
        "desc": "前景颜色。",
        "name": "STYLE_ID_FG_COLOR"
      },
      {
        "desc": "蒙版颜色。",
        "name": "STYLE_ID_MASK_COLOR"
      },
      {
        "desc": "字体名称。",
        "name": "STYLE_ID_FONT_NAME"
      },
      {
        "desc": "字体大小。",
        "name": "STYLE_ID_FONT_SIZE"
      },
      {
        "desc": "字体风格(粗体、斜体等)。",
        "name": "STYLE_ID_FONT_STYLE"
      },
      {
        "desc": "文本颜色。",
        "name": "STYLE_ID_TEXT_COLOR"
      },
      {
        "desc": "高亮文本的字体名称。",
        "name": "STYLE_ID_HIGHLIGHT_FONT_NAME"
      },
      {
        "desc": "高亮文本的字体大小。",
        "name": "STYLE_ID_HIGHLIGHT_FONT_SIZE"
      },
      {
        "desc": "高亮文本的文本颜色。",
        "name": "STYLE_ID_HIGHLIGHT_TEXT_COLOR"
      },
      {
        "desc": "提示文本颜色。",
        "name": "STYLE_ID_TIPS_TEXT_COLOR"
      },
      {
        "desc": "文本水平对齐的方式。",
        "name": "STYLE_ID_TEXT_ALIGN_H"
      },
      {
        "desc": "文本垂直对齐的方式。",
        "name": "STYLE_ID_TEXT_ALIGN_V"
      },
      {
        "desc": "边框颜色。",
        "name": "STYLE_ID_BORDER_COLOR"
      },
      {
        "desc": "边框线宽。",
        "name": "STYLE_ID_BORDER_WIDTH"
      },
      {
        "desc": "边框类型。",
        "name": "STYLE_ID_BORDER"
      },
      {
        "desc": "图片的名称。",
        "name": "STYLE_ID_BG_IMAGE"
      },
      {
        "desc": "图片的显示方式。",
        "name": "STYLE_ID_BG_IMAGE_DRAW_TYPE"
      },
      {
        "desc": "图标的名称。",
        "name": "STYLE_ID_ICON"
      },
      {
        "desc": "图片的名称。",
        "name": "STYLE_ID_FG_IMAGE"
      },
      {
        "desc": "图片的显示方式。",
        "name": "STYLE_ID_FG_IMAGE_DRAW_TYPE"
      },
      {
        "desc": "间距。",
        "name": "STYLE_ID_SPACER"
      },
      {
        "desc": "边距。",
        "name": "STYLE_ID_MARGIN"
      },
      {
        "desc": "左边距。",
        "name": "STYLE_ID_MARGIN_LEFT"
      },
      {
        "desc": "右边距。",
        "name": "STYLE_ID_MARGIN_RIGHT"
      },
      {
        "desc": "顶边距。",
        "name": "STYLE_ID_MARGIN_TOP"
      },
      {
        "desc": "底边距。",
        "name": "STYLE_ID_MARGIN_BOTTOM"
      },
      {
        "desc": "图标的位置。",
        "name": "STYLE_ID_ICON_AT"
      },
      {
        "desc": "Active图标的名称。",
        "name": "STYLE_ID_ACTIVE_ICON"
      },
      {
        "desc": "X方向的偏移，方便实现按下的效果。",
        "name": "STYLE_ID_X_OFFSET"
      },
      {
        "desc": "Y方向的偏移，方便实现按下的效果。",
        "name": "STYLE_ID_Y_OFFSET"
      },
      {
        "desc": "编辑器中选中区域的背景颜色。",
        "name": "STYLE_ID_SELECTED_BG_COLOR"
      },
      {
        "desc": "编辑器中选中区域的前景颜色。",
        "name": "STYLE_ID_SELECTED_FG_COLOR"
      },
      {
        "desc": "编辑器中选中区域的文本颜色。",
        "name": "STYLE_ID_SELECTED_TEXT_COLOR"
      },
      {
        "desc": "圆角半径(仅在WITH_VGCANVAS定义时生效)。",
        "name": "STYLE_ID_ROUND_RADIUS"
      },
      {
        "desc": "左上角圆角半径(仅在WITH_VGCANVAS定义时生效)。",
        "name": "STYLE_ID_ROUND_RADIUS_TOP_LETF"
      },
      {
        "desc": "右上角圆角半径(仅在WITH_VGCANVAS定义时生效)。",
        "name": "STYLE_ID_ROUND_RADIUS_TOP_RIGHT"
      },
      {
        "desc": "左下角圆角半径(仅在WITH_VGCANVAS定义时生效)。",
        "name": "STYLE_ID_ROUND_RADIUS_BOTTOM_LETF"
      },
      {
        "desc": "右下角圆角半径(仅在WITH_VGCANVAS定义时生效)。",
        "name": "STYLE_ID_ROUND_RADIUS_BOTTOM_RIGHT"
      },
      {
        "desc": "子控件布局参数。",
        "name": "STYLE_ID_CHILDREN_LAYOUT"
      },
      {
        "desc": "控件布局参数。",
        "name": "STYLE_ID_SELF_LAYOUT"
      },
      {
        "desc": "是否支持焦点停留。",
        "name": "STYLE_ID_FOCUSABLE"
      },
      {
        "desc": "是否启用按键音、触屏音和震动等反馈。",
        "name": "STYLE_ID_FEEDBACK"
      }
    ],
    "header": "base/style.h",
    "name": "style_id_t",
    "prefix": "STYLE_ID_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "widget状态改变时，通知style更新数据。",
        "name": "style_notify_widget_state_changed",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查style对象是否有效",
        "name": "style_is_valid",
        "return": {
          "type": "bool_t",
          "desc": "返回是否有效。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定name的整数格式的值。",
        "name": "style_get_int",
        "return": {
          "type": "int32_t",
          "desc": "返回整数格式的值。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "uint32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定name的无符号整数格式的值。",
        "name": "style_get_uint",
        "return": {
          "type": "uint32_t",
          "desc": "返回无符号整数格式的值。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "const char*",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定name的字符串格式的值。",
        "name": "style_get_str",
        "return": {
          "type": "const char*",
          "desc": "返回字符串格式的值。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "state",
            "desc": "状态。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "const value_t*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定状态的指定属性的值(仅仅对mutable的style有效)。",
        "name": "style_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "theme_t*",
            "name": "theme",
            "desc": "theme对象。"
          },
          {
            "type": "const char*",
            "name": "widget_type",
            "desc": "控件的类型名。"
          },
          {
            "type": "const char*",
            "name": "style_name",
            "desc": "style的名称。"
          },
          {
            "type": "const char*",
            "name": "widget_state",
            "desc": "控件的状态。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "更新风格对象的状态以及对应的数据\n备注：根据 widget_type 和 style_name 以及 widget_state 在 theme 对象中查找对应的数据并且更新到 style 对象中",
        "name": "style_update_state",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取风格对象的风格状态",
        "name": "style_get_style_state",
        "return": {
          "type": "const char*",
          "desc": "返回风格状态。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查style是否是mutable的。",
        "name": "style_is_mutable",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是，否则表示不是。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取 style 的风格类型。",
        "name": "style_get_style_type",
        "return": {
          "type": "const char*",
          "desc": "返回风格类型。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/style.h",
    "desc": "控件风格。\n\nwidget从style对象中，获取诸如字体、颜色和图片相关的参数，根据这些参数来绘制界面。\n\n```c\nstyle_t* style = widget->astyle;\nint32_t margin = style_get_int(style, STYLE_ID_MARGIN, 2);\nint32_t icon_at = style_get_int(style, STYLE_ID_ICON_AT, ICON_AT_AUTO);\nuint16_t font_size = style_get_int(style, STYLE_ID_FONT_SIZE, TK_DEFAULT_FONT_SIZE);\n```\n\n属性名称的请参考[style\\_id](style_id_t.md)",
    "name": "style_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "获取缺省的窗体样式对象。",
        "name": "theme",
        "alias": "theme_instance",
        "return": {
          "type": "theme_t*",
          "desc": "返回窗体样式对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/theme.h",
    "desc": "窗体样式。\n\n负责管理缺省的窗体样式数据，方便实现style\\_const。",
    "name": "theme_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "timer_func_t",
            "name": "on_timer",
            "desc": "timer回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "timer回调函数的上下文。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": "custom",
          "static": true
        },
        "desc": "增加一个timer。",
        "name": "timer_add",
        "return": {
          "type": "uint32_t",
          "desc": "返回timer的ID，TK_INVALID_ID表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timerID。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "删除指定的timer。",
        "name": "timer_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "ctx",
            "desc": "timer回调函数的上下文。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "根据上下文删除所有对应的timer。",
        "name": "timer_remove_all_by_ctx",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timerID。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "重置指定的timer，重置之后定时器重新开始计时。",
        "name": "timer_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timerID。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "挂起指定的timer，一般用于不断循环触发的计时器。",
        "name": "timer_suspend",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timerID。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "唤醒挂起指定的timer，并且重置定时器重新开始计时",
        "name": "timer_resume",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timerID。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "新的时间。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "修改指定的timer的duration，修改之后定时器重新开始计时。",
        "name": "timer_modify",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/timer.h",
    "desc": "定时器系统。\n\n> 本定时器精度较低，最高精度为1000/FPS，如果需要高精度的定时器，请用OS提供的定时器。\n\n示例：\n\n```c\nstatic ret_t my_on_timer(const timer_info_t* info) {\nwidget_t* widget = WIDGET(info->ctx);\n...\nreturn RET_REPEAT;\n}\n\n...\n\ntimer_add(my_on_timer, widget, 1000);\n```\n> 在非GUI线程请用timer\\_queue。",
    "name": "timer_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "垂直对齐的常量定义。",
    "consts": [
      {
        "desc": "无效对齐方式。",
        "name": "ALIGN_V_NONE"
      },
      {
        "desc": "居中对齐。",
        "name": "ALIGN_V_MIDDLE"
      },
      {
        "desc": "顶部对齐。",
        "name": "ALIGN_V_TOP"
      },
      {
        "desc": "底部对齐。",
        "name": "ALIGN_V_BOTTOM"
      }
    ],
    "header": "base/types_def.h",
    "name": "align_v_t",
    "prefix": "ALIGN_V_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "水平对齐的常量定义。",
    "consts": [
      {
        "desc": "无效对齐方式。",
        "name": "ALIGN_H_NONE"
      },
      {
        "desc": "居中对齐。",
        "name": "ALIGN_H_CENTER"
      },
      {
        "desc": "左边对齐。",
        "name": "ALIGN_H_LEFT"
      },
      {
        "desc": "右边对齐。",
        "name": "ALIGN_H_RIGHT"
      }
    ],
    "header": "base/types_def.h",
    "name": "align_h_t",
    "prefix": "ALIGN_H_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "应用程序类型。",
    "consts": [
      {
        "desc": "嵌入式或移动APP",
        "name": "APP_MOBILE"
      },
      {
        "desc": "模拟器。",
        "name": "APP_SIMULATOR"
      },
      {
        "desc": "桌面应用程序。",
        "name": "APP_DESKTOP"
      }
    ],
    "header": "base/types_def.h",
    "name": "app_type_t",
    "prefix": "APP_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "位图格式常量定义。",
    "consts": [
      {
        "desc": "无效格式。",
        "name": "BITMAP_FMT_NONE"
      },
      {
        "desc": "一个像素占用4个字节，RGBA占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_RGBA8888"
      },
      {
        "desc": "一个像素占用4个字节，ABGR占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_ABGR8888"
      },
      {
        "desc": "一个像素占用4个字节，BGRA占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_BGRA8888"
      },
      {
        "desc": "一个像素占用4个字节，ARGB占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_ARGB8888"
      },
      {
        "desc": "一个像素占用2个字节，RGB分别占用5,6,5位, 按内存地址递增。",
        "name": "BITMAP_FMT_RGB565"
      },
      {
        "desc": "一个像素占用2个字节，BGR分别占用5,6,5位, 按内存地址递增。",
        "name": "BITMAP_FMT_BGR565"
      },
      {
        "desc": "一个像素占用3个字节，RGB占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_RGB888"
      },
      {
        "desc": "一个像素占用3个字节，RGB占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_BGR888"
      },
      {
        "desc": "一个像素占用1个字节。",
        "name": "BITMAP_FMT_GRAY"
      },
      {
        "desc": "一个像素占用1比特。",
        "name": "BITMAP_FMT_MONO"
      }
    ],
    "header": "base/types_def.h",
    "name": "bitmap_format_t",
    "prefix": "BITMAP_FMT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "位图标志常量定义。",
    "consts": [
      {
        "desc": "无特殊标志。",
        "name": "BITMAP_FLAG_NONE"
      },
      {
        "desc": "不透明图片。",
        "name": "BITMAP_FLAG_OPAQUE"
      },
      {
        "desc": "图片内容不会变化。",
        "name": "BITMAP_FLAG_IMMUTABLE"
      },
      {
        "desc": "OpenGL Texture, bitmap的id是有效的texture id。",
        "name": "BITMAP_FLAG_TEXTURE"
      },
      {
        "desc": "如果是MUTABLE的图片，更新时需要设置此标志，底层可能会做特殊处理，比如更新图片到GPU。",
        "name": "BITMAP_FLAG_CHANGED"
      },
      {
        "desc": "预乘alpha。",
        "name": "BITMAP_FLAG_PREMULTI_ALPHA"
      }
    ],
    "header": "base/types_def.h",
    "name": "bitmap_flag_t",
    "prefix": "BITMAP_FLAG_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为vgcanvas对象(供脚本语言使用)。",
        "name": "vgcanvas_cast",
        "return": {
          "type": "vgcanvas_t*",
          "desc": "vgcanvas对象。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "flush",
        "name": "vgcanvas_flush",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "清除之前的路径，并重新开始一条路径。",
        "name": "vgcanvas_begin_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "移动当前点到指定点。",
        "name": "vgcanvas_move_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "生成一条线段(从当前点到目标点)。",
        "name": "vgcanvas_line_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "cpx",
            "desc": "控制点x坐标。"
          },
          {
            "type": "float_t",
            "name": "cpy",
            "desc": "控制点y坐标。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "生成一条二次贝塞尔曲线。",
        "name": "vgcanvas_quad_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "cp1x",
            "desc": "控制点1x坐标。"
          },
          {
            "type": "float_t",
            "name": "cp1y",
            "desc": "控制点1y坐标。"
          },
          {
            "type": "float_t",
            "name": "cp2x",
            "desc": "控制点2x坐标。"
          },
          {
            "type": "float_t",
            "name": "cp2y",
            "desc": "控制点3y坐标。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "生成一条三次贝塞尔曲线。",
        "name": "vgcanvas_bezier_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x1",
            "desc": "起始点x坐标。"
          },
          {
            "type": "float_t",
            "name": "y1",
            "desc": "起始点y坐标。"
          },
          {
            "type": "float_t",
            "name": "x2",
            "desc": "结束点x坐标。"
          },
          {
            "type": "float_t",
            "name": "y2",
            "desc": "结束点y坐标。"
          },
          {
            "type": "float_t",
            "name": "r",
            "desc": "半径。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "生成一条圆弧路径到指定点。",
        "name": "vgcanvas_arc_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "原点x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "原点y坐标。"
          },
          {
            "type": "float_t",
            "name": "r",
            "desc": "半径。"
          },
          {
            "type": "float_t",
            "name": "start_angle",
            "desc": "起始角度。"
          },
          {
            "type": "float_t",
            "name": "end_angle",
            "desc": "结束角度。"
          },
          {
            "type": "bool_t",
            "name": "ccw",
            "desc": "是否逆时针。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "生成一条圆弧。",
        "name": "vgcanvas_arc",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查点是否在当前路径中。",
        "name": "vgcanvas_is_point_in_path",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示在，否则表示不在。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "生成一个矩形路径。",
        "name": "vgcanvas_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "float_t",
            "name": "r",
            "desc": "圆角半径。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "生成一个圆角矩形路径。",
        "name": "vgcanvas_rounded_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "rx",
            "desc": "圆角半径。"
          },
          {
            "type": "float_t",
            "name": "ry",
            "desc": "圆角半径。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "生成一个椭圆路径。",
        "name": "vgcanvas_ellipse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "闭合路径。\n\n>闭合路径是指把起点和终点连接起来，形成一个封闭的多边形。",
        "name": "vgcanvas_close_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bool_t",
            "name": "dir",
            "desc": "填充方法。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置路径填充实心与否。\n\n>CCW(1)为实心，CW(2)为镂空，设置其他则默认根据非零环绕规则判断(nonzero)。",
        "name": "vgcanvas_path_winding",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "rad",
            "desc": "角度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "旋转。",
        "name": "vgcanvas_rotate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x方向缩放比例。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y方向缩放比例。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "缩放。",
        "name": "vgcanvas_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x方向偏移。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y方向偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "平移。",
        "name": "vgcanvas_translate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "a",
            "desc": "a"
          },
          {
            "type": "float_t",
            "name": "b",
            "desc": "b"
          },
          {
            "type": "float_t",
            "name": "c",
            "desc": "c"
          },
          {
            "type": "float_t",
            "name": "d",
            "desc": "d"
          },
          {
            "type": "float_t",
            "name": "e",
            "desc": "e"
          },
          {
            "type": "float_t",
            "name": "f",
            "desc": "f"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "变换矩阵。",
        "name": "vgcanvas_transform",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "a",
            "desc": "a"
          },
          {
            "type": "float_t",
            "name": "b",
            "desc": "b"
          },
          {
            "type": "float_t",
            "name": "c",
            "desc": "c"
          },
          {
            "type": "float_t",
            "name": "d",
            "desc": "d"
          },
          {
            "type": "float_t",
            "name": "e",
            "desc": "e"
          },
          {
            "type": "float_t",
            "name": "f",
            "desc": "f"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置变换矩阵。",
        "name": "vgcanvas_set_transform",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "使用当前的path裁剪。\n>目前只有部分backend支持(如cairo)。",
        "name": "vgcanvas_clip_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "矩形裁剪。",
        "name": "vgcanvas_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置一个与前一个裁剪区做交集的矩形裁剪区。\n如果下面这种情况，则不能直接调用 rect_intersect 函数来做矩形交集和 vgcanvas_clip_rect 函数设置裁剪区，而采用本函数做交集。\n由于缩放和旋转以及平移会导致 vg 的坐标系和上一个裁剪区的坐标系不同，\n导致直接使用做交集的话，裁剪区会出错。\n\n```\nvgcanvas_clip_rect(vg, old_r.x, old_r.y, old_r.w, old_r.h);\nvgcanvas_save(vg);\nvgcanvas_scale(vg, scale_x, scale_y);\nvgcanvas_rotate(vg, TK_D2R(15));\nvgcanvas_intersect_clip_rect(vg, r.x, r.y, r.w, r.h);\n..................\nvgcanvas_restore(vg);\n```",
        "name": "vgcanvas_intersect_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "填充多边形。",
        "name": "vgcanvas_fill",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "画线。",
        "name": "vgcanvas_stroke",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bool_t",
            "name": "stroke",
            "desc": "TRUE表示画线FALSE表示填充。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "用图片填充/画多边形(可能存在可移植性问题，除非必要请勿使用)。\n多边形的顶点必须在图片范围内，可以通过矩阵变化画到不同的位置。",
        "name": "vgcanvas_paint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "font",
            "desc": "字体名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置字体的名称。",
        "name": "vgcanvas_set_font",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "font",
            "desc": "字体大小。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置字体的大小。",
        "name": "vgcanvas_set_font_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：left|center|right，必须为常量字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置文本水平对齐的方式。",
        "name": "vgcanvas_set_text_align",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：top|middle|bottom，必须为常量字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置文本垂直对齐的方式。",
        "name": "vgcanvas_set_text_baseline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "text"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "max_width",
            "desc": "最大宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制文本。",
        "name": "vgcanvas_fill_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "text"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "测量文本的宽度。",
        "name": "vgcanvas_measure_text",
        "return": {
          "type": "float_t",
          "desc": "返回text的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          },
          {
            "type": "float_t",
            "name": "sx",
            "desc": "sx"
          },
          {
            "type": "float_t",
            "name": "sy",
            "desc": "sy"
          },
          {
            "type": "float_t",
            "name": "sw",
            "desc": "sw"
          },
          {
            "type": "float_t",
            "name": "sh",
            "desc": "sh"
          },
          {
            "type": "float_t",
            "name": "dx",
            "desc": "dx"
          },
          {
            "type": "float_t",
            "name": "dy",
            "desc": "dy"
          },
          {
            "type": "float_t",
            "name": "dw",
            "desc": "dw"
          },
          {
            "type": "float_t",
            "name": "dh",
            "desc": "dh"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制图片。",
        "name": "vgcanvas_draw_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          },
          {
            "type": "float_t",
            "name": "sx",
            "desc": "sx"
          },
          {
            "type": "float_t",
            "name": "sy",
            "desc": "sy"
          },
          {
            "type": "float_t",
            "name": "sw",
            "desc": "sw"
          },
          {
            "type": "float_t",
            "name": "sh",
            "desc": "sh"
          },
          {
            "type": "float_t",
            "name": "dx",
            "desc": "dx"
          },
          {
            "type": "float_t",
            "name": "dy",
            "desc": "dy"
          },
          {
            "type": "float_t",
            "name": "dw",
            "desc": "dw"
          },
          {
            "type": "float_t",
            "name": "dh",
            "desc": "dh"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "绘制图标。\n\n绘制图标时会根据屏幕密度进行自动缩放，而绘制普通图片时不会。",
        "name": "vgcanvas_draw_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "是否启用反走样。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否启用反走样。",
        "name": "vgcanvas_set_antialias",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "alpha",
            "desc": "global alpha。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置全局透明度。",
        "name": "vgcanvas_set_global_alpha",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "线宽。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置线条的宽度。",
        "name": "vgcanvas_set_line_width",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置填充颜色。",
        "name": "vgcanvas_set_fill_color_str",
        "alias": "vgcanvas_set_fill_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置线条颜色。",
        "name": "vgcanvas_set_stroke_color_str",
        "alias": "vgcanvas_set_stroke_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：butt|round|square，必须为常量字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置line cap。",
        "name": "vgcanvas_set_line_cap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：bevel|round|miter，必须为常量字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置line join。",
        "name": "vgcanvas_set_line_join",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "miter limit"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置miter limit。",
        "name": "vgcanvas_set_miter_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "保存当前的状态。如颜色和矩阵等信息。\n\n> save/restore必须配套使用，否则可能导致状态混乱。",
        "name": "vgcanvas_save",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "恢复上次save的状态。\n\n> save/restore必须配套使用，否则可能导致状态混乱。",
        "name": "vgcanvas_restore",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "w",
        "desc": "canvas的宽度",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": "canvas的高度",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "stride",
        "desc": "一行占的字节",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ratio",
        "desc": "显示比例。",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "anti_alias",
        "desc": "是否启用反走样功能。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "line_width",
        "desc": "线宽。",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "global_alpha",
        "desc": "全局alpha。",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "miter_limit",
        "desc": "miter\\_limit。\n@see http://www.w3school.com.cn/tags/canvas_miterlimit.asp",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "line_cap",
        "desc": "line\\_cap。\n@see http://www.w3school.com.cn/tags/canvas_linecap.asp",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "line_join",
        "desc": "line\\_join。\n@see http://www.w3school.com.cn/tags/canvas_linejoin.asp",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "font",
        "desc": "字体。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "font_size",
        "desc": "字体大小。",
        "type": "float_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "text_align",
        "desc": "文本对齐方式。\n\n@see http://www.w3school.com.cn/tags/canvas_textalign.asp",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "text_baseline",
        "desc": "文本基线。\n\n@see http://www.w3school.com.cn/tags/canvas_textbaseline.asp",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/vgcanvas.h",
    "desc": "矢量图画布抽象基类。\n\n具体实现时可以使用agg，nanovg, cairo和skia等方式。\n\ncairo和skia体积太大，不适合嵌入式平台，但在PC平台也是一种选择。\n\n目前我们只提供了基于nanovg的实现，支持软件渲染和硬件渲染。\n\n我们对nanovg进行了一些改进:\n\n* 可以用agg/agge实现软件渲染(暂时不支持文本绘制)。\n\n* 可以用bgfx使用DirectX(Windows平台)和Metal(iOS)平台硬件加速。\n\n```graphviz\n[default_style]\n\nvgcanvas_cairo_t -> vgcanvas_t[arrowhead = \"empty\"]\nvgcanvas_nanovg_t -> vgcanvas_t[arrowhead = \"empty\"]\nopengl -> vgcanvas_nanovg_t[arrowhead = \"none\"]\nbgfx -> vgcanvas_nanovg_t[arrowhead = \"none\"]\nagg -> vgcanvas_nanovg_t[arrowhead = \"none\"]\nagge -> vgcanvas_nanovg_t[arrowhead = \"none\"]\nvgcanvas_skia_t -> vgcanvas_t[arrowhead = \"empty\"]\nvgcanvas_agge_t -> vgcanvas_t[arrowhead = \"empty\"]\n```\n\n示例：\n\n```c\nvgcanvas_t* vg = canvas_get_vgcanvas(c);\nvgcanvas_save(vg);\nvgcanvas_translate(vg, 0, 100);\n\nvgcanvas_set_line_width(vg, 1);\nvgcanvas_set_fill_color(vg, color_init(0xff, 0, 0, 0xff));\nvgcanvas_rect(vg, 5, 5, 100, 100);\nvgcanvas_fill(vg);\nvgcanvas_restore(vg);\n```\n\n>请参考：https://www.w3schools.com/tags/ref_canvas.asp",
    "name": "vgcanvas_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "线帽类型。",
    "consts": [
      {
        "desc": "圆头。",
        "name": "VGCANVAS_LINE_CAP_ROUND"
      },
      {
        "desc": "方头。",
        "name": "VGCANVAS_LINE_CAP_SQUARE"
      },
      {
        "desc": "平头。",
        "name": "VGCANVAS_LINE_CAP_BUTT"
      }
    ],
    "header": "base/vgcanvas.h",
    "name": "vgcanvas_line_cap_t",
    "prefix": "VGCANVAS_LINE_CAP_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "线条连接类型。",
    "consts": [
      {
        "desc": "round。",
        "name": "VGCANVAS_LINE_JOIN_ROUND"
      },
      {
        "desc": "bevel。",
        "name": "VGCANVAS_LINE_JOIN_BEVEL"
      },
      {
        "desc": "mitter。",
        "name": "VGCANVAS_LINE_JOIN_MITTER"
      }
    ],
    "header": "base/vgcanvas.h",
    "name": "vgcanvas_line_join_t",
    "prefix": "VGCANVAS_LINE_JOIN_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "控件的属性。",
    "consts": [
      {
        "desc": "用于执行某些特殊的命令（比如控制动画的启停），主要是方便MVVM通过属性来控制动画。",
        "name": "WIDGET_PROP_EXEC"
      },
      {
        "desc": "X坐标。",
        "name": "WIDGET_PROP_X"
      },
      {
        "desc": "Y坐标。",
        "name": "WIDGET_PROP_Y"
      },
      {
        "desc": "宽度。",
        "name": "WIDGET_PROP_W"
      },
      {
        "desc": "高度。",
        "name": "WIDGET_PROP_H"
      },
      {
        "desc": "最大高度。",
        "name": "WIDGET_PROP_MAX_H"
      },
      {
        "desc": "窗口设计时宽度。",
        "name": "WIDGET_PROP_DESIGN_W"
      },
      {
        "desc": "窗口设计时宽度。",
        "name": "WIDGET_PROP_DESIGN_H"
      },
      {
        "desc": "窗口大小与设计时大小不同时，是否自动调整子控件的x坐标。",
        "name": "WIDGET_PROP_AUTO_SCALE_CHILDREN_X"
      },
      {
        "desc": "窗口大小与设计时大小不同时，是否自动调整子控件的y坐标。",
        "name": "WIDGET_PROP_AUTO_SCALE_CHILDREN_Y"
      },
      {
        "desc": "窗口大小与设计时大小不同时，是否自动调整子控件的宽度。",
        "name": "WIDGET_PROP_AUTO_SCALE_CHILDREN_W"
      },
      {
        "desc": "窗口大小与设计时大小不同时，是否自动调整子控件的高度。",
        "name": "WIDGET_PROP_AUTO_SCALE_CHILDREN_H"
      },
      {
        "desc": "inputing。",
        "name": "WIDGET_PROP_INPUTING"
      },
      {
        "desc": "always on top。",
        "name": "WIDGET_PROP_ALWAYS_ON_TOP"
      },
      {
        "desc": "caret x。",
        "name": "WIDGET_PROP_CARET_X"
      },
      {
        "desc": "caret y。",
        "name": "WIDGET_PROP_CARET_Y"
      },
      {
        "desc": "脏矩形超出控件本身大小的最大范围。",
        "name": "WIDGET_PROP_DIRTY_RECT_TOLERANCE"
      },
      {
        "desc": "bidi type(rtl,ltr,auto,wrtl,wltr,lro,rlo)。",
        "name": "WIDGET_PROP_BIDI"
      },
      {
        "desc": "Canvas。",
        "name": "WIDGET_PROP_CANVAS"
      },
      {
        "desc": "Canvas。",
        "name": "WIDGET_PROP_LOCALIZE_OPTIONS"
      },
      {
        "desc": "Native Window。",
        "name": "WIDGET_PROP_NATIVE_WINDOW"
      },
      {
        "desc": "dialog highlight。",
        "name": "WIDGET_PROP_HIGHLIGHT"
      },
      {
        "desc": "slider中的bar的的宽度或高度。",
        "name": "WIDGET_PROP_BAR_SIZE"
      },
      {
        "desc": "不透明度。",
        "name": "WIDGET_PROP_OPACITY"
      },
      {
        "desc": "最小宽度。",
        "name": "WIDGET_PROP_MIN_W"
      },
      {
        "desc": "最大宽度。",
        "name": "WIDGET_PROP_MAX_W"
      },
      {
        "desc": "根据子控件和文本自动调整大小。",
        "name": "WIDGET_PROP_AUTO_ADJUST_SIZE"
      },
      {
        "desc": "窗口是否保持单例。",
        "name": "WIDGET_PROP_SINGLE_INSTANCE"
      },
      {
        "desc": "点击非focusable控件时，是否让当前焦点控件失去焦点。比如点击窗口空白区域，是否让编辑器失去焦点。",
        "name": "WIDGET_PROP_STRONGLY_FOCUS"
      },
      {
        "desc": "子控件布局参数。",
        "name": "WIDGET_PROP_CHILDREN_LAYOUT"
      },
      {
        "desc": "子控件布局参数(过时)。",
        "name": "WIDGET_PROP_LAYOUT"
      },
      {
        "desc": "控件布局参数。",
        "name": "WIDGET_PROP_SELF_LAYOUT"
      },
      {
        "desc": "layout宽度。",
        "name": "WIDGET_PROP_LAYOUT_W"
      },
      {
        "desc": "layout高度。",
        "name": "WIDGET_PROP_LAYOUT_H"
      },
      {
        "desc": "虚拟宽度。",
        "name": "WIDGET_PROP_VIRTUAL_W"
      },
      {
        "desc": "虚拟高度。",
        "name": "WIDGET_PROP_VIRTUAL_H"
      },
      {
        "desc": "名称。",
        "name": "WIDGET_PROP_NAME"
      },
      {
        "desc": "类型。",
        "name": "WIDGET_PROP_TYPE"
      },
      {
        "desc": "是否可以关闭。",
        "name": "WIDGET_PROP_CLOSABLE"
      },
      {
        "desc": "鼠标指针。",
        "name": "WIDGET_PROP_POINTER_CURSOR"
      },
      {
        "desc": "值。",
        "name": "WIDGET_PROP_VALUE"
      },
      {
        "desc": "CheckButton是否单选。",
        "name": "WIDGET_PROP_RADIO"
      },
      {
        "desc": "进度条反向显示。",
        "name": "WIDGET_PROP_REVERSE"
      },
      {
        "desc": "长度。",
        "name": "WIDGET_PROP_LENGTH"
      },
      {
        "desc": "自动换行。",
        "name": "WIDGET_PROP_LINE_WRAP"
      },
      {
        "desc": "是否允许单词中换行。",
        "name": "WIDGET_PROP_WORD_WRAP"
      },
      {
        "desc": "文本。",
        "name": "WIDGET_PROP_TEXT"
      },
      {
        "desc": "待翻译文本。",
        "name": "WIDGET_PROP_TR_TEXT"
      },
      {
        "desc": "style。",
        "name": "WIDGET_PROP_STYLE"
      },
      {
        "desc": "是否启用。",
        "name": "WIDGET_PROP_ENABLE"
      },
      {
        "desc": "是否启用按键音等反馈。",
        "name": "WIDGET_PROP_FEEDBACK"
      },
      {
        "desc": "是否启用floating布局。",
        "name": "WIDGET_PROP_FLOATING"
      },
      {
        "desc": "边距。",
        "name": "WIDGET_PROP_MARGIN"
      },
      {
        "desc": "间距。",
        "name": "WIDGET_PROP_SPACING"
      },
      {
        "desc": "左边距。",
        "name": "WIDGET_PROP_LEFT_MARGIN"
      },
      {
        "desc": "右边距。",
        "name": "WIDGET_PROP_RIGHT_MARGIN"
      },
      {
        "desc": "顶边距。",
        "name": "WIDGET_PROP_TOP_MARGIN"
      },
      {
        "desc": "底边距。",
        "name": "WIDGET_PROP_BOTTOM_MARGIN"
      },
      {
        "desc": "步长。",
        "name": "WIDGET_PROP_STEP"
      },
      {
        "desc": "是否可见。",
        "name": "WIDGET_PROP_VISIBLE"
      },
      {
        "desc": "是否接受用户事件。",
        "name": "WIDGET_PROP_SENSITIVE"
      },
      {
        "desc": "控件动画。",
        "name": "WIDGET_PROP_ANIMATION"
      },
      {
        "desc": "窗口动画。",
        "name": "WIDGET_PROP_ANIM_HINT"
      },
      {
        "desc": "窗口设置为全部大小。",
        "name": "WIDGET_PROP_FULLSCREEN"
      },
      {
        "desc": "禁用窗口动画。",
        "name": "WIDGET_PROP_DISABLE_ANIM"
      },
      {
        "desc": "打开窗口时的动画。",
        "name": "WIDGET_PROP_OPEN_ANIM_HINT"
      },
      {
        "desc": "关闭窗口时的动画。",
        "name": "WIDGET_PROP_CLOSE_ANIM_HINT"
      },
      {
        "desc": "最小值。",
        "name": "WIDGET_PROP_MIN"
      },
      {
        "desc": "软键盘上action按钮的文本。",
        "name": "WIDGET_PROP_ACTION_TEXT"
      },
      {
        "desc": "提示信息。",
        "name": "WIDGET_PROP_TIPS"
      },
      {
        "desc": "需要翻译的提示信息。",
        "name": "WIDGET_PROP_TR_TIPS"
      },
      {
        "desc": "输入类型。",
        "name": "WIDGET_PROP_INPUT_TYPE"
      },
      {
        "desc": "自定义软键盘资源名称。",
        "name": "WIDGET_PROP_KEYBOARD"
      },
      {
        "desc": "缺省获得焦点的子控件(可用控件名或类型)。",
        "name": "WIDGET_PROP_DEFAULT_FOCUSED_CHILD"
      },
      {
        "desc": "只读模式。",
        "name": "WIDGET_PROP_READONLY"
      },
      {
        "desc": "是否可取消。",
        "name": "WIDGET_PROP_CANCELABLE"
      },
      {
        "desc": "密码是否可见。",
        "name": "WIDGET_PROP_PASSWORD_VISIBLE"
      },
      {
        "desc": "是否处于active状态。",
        "name": "WIDGET_PROP_ACTIVE"
      },
      {
        "desc": "当前页。",
        "name": "WIDGET_PROP_CURR_PAGE"
      },
      {
        "desc": "页面最大个数。",
        "name": "WIDGET_PROP_PAGE_MAX_NUMBER"
      },
      {
        "desc": "是否为垂直模式。",
        "name": "WIDGET_PROP_VERTICAL"
      },
      {
        "desc": "是否显示文本。",
        "name": "WIDGET_PROP_SHOW_TEXT"
      },
      {
        "desc": "X方向的偏移。",
        "name": "WIDGET_PROP_XOFFSET"
      },
      {
        "desc": "Y方向的偏移。",
        "name": "WIDGET_PROP_YOFFSET"
      },
      {
        "desc": "垂直对齐模式。",
        "name": "WIDGET_PROP_ALIGN_V"
      },
      {
        "desc": "水平对齐模式。",
        "name": "WIDGET_PROP_ALIGN_H"
      },
      {
        "desc": "是否自动播放或指定播放的时间。",
        "name": "WIDGET_PROP_AUTO_PLAY"
      },
      {
        "desc": "是否循环播放或循环播放的次数。",
        "name": "WIDGET_PROP_LOOP"
      },
      {
        "desc": "是否启用自动更正功能。",
        "name": "WIDGET_PROP_AUTO_FIX"
      },
      {
        "desc": "编辑器在获得焦点时是否不选中文本。",
        "name": "WIDGET_PROP_SELECT_NONE_WHEN_FOCUSED"
      },
      {
        "desc": "编辑器在获得焦点时是否打开输入法。",
        "name": "WIDGET_PROP_OPEN_IM_WHEN_FOCUSED"
      },
      {
        "desc": "编辑器在失去焦点时是否关闭输入法。",
        "name": "WIDGET_PROP_CLOSE_IM_WHEN_BLURED"
      },
      {
        "desc": "X最小值。",
        "name": "WIDGET_PROP_X_MIN"
      },
      {
        "desc": "X最大值。",
        "name": "WIDGET_PROP_X_MAX"
      },
      {
        "desc": "Y最小值。",
        "name": "WIDGET_PROP_Y_MIN"
      },
      {
        "desc": "Y最大值。",
        "name": "WIDGET_PROP_Y_MAX"
      },
      {
        "desc": "最大值。",
        "name": "WIDGET_PROP_MAX"
      },
      {
        "desc": "让窗口管理器直接把按键发给自己。",
        "name": "WIDGET_PROP_GRAB_KEYS"
      },
      {
        "desc": "行数或每行的高度。",
        "name": "WIDGET_PROP_ROW"
      },
      {
        "desc": "控件状态。",
        "name": "WIDGET_PROP_STATE_FOR_STYLE"
      },
      {
        "desc": "窗体样式名称。",
        "name": "WIDGET_PROP_THEME"
      },
      {
        "desc": "window stage",
        "name": "WIDGET_PROP_STAGE"
      },
      {
        "desc": "图片管理器。",
        "name": "WIDGET_PROP_IMAGE_MANAGER"
      },
      {
        "desc": "资源管理器。",
        "name": "WIDGET_PROP_ASSETS_MANAGER"
      },
      {
        "desc": "locale_info。",
        "name": "WIDGET_PROP_LOCALE_INFO"
      },
      {
        "desc": "字体管理器。",
        "name": "WIDGET_PROP_FONT_MANAGER"
      },
      {
        "desc": "窗口的窗体样式对象。",
        "name": "WIDGET_PROP_THEME_OBJ"
      },
      {
        "desc": "缺省的窗体样式对象。",
        "name": "WIDGET_PROP_DEFAULT_THEME_OBJ"
      },
      {
        "desc": "项的宽度。",
        "name": "WIDGET_PROP_ITEM_WIDTH"
      },
      {
        "desc": "项的高度。",
        "name": "WIDGET_PROP_ITEM_HEIGHT"
      },
      {
        "desc": "项的缺省高度。",
        "name": "WIDGET_PROP_DEFAULT_ITEM_HEIGHT"
      },
      {
        "desc": "X方向是否可拖动。",
        "name": "WIDGET_PROP_XSLIDABLE"
      },
      {
        "desc": "Y方向是否可拖动。",
        "name": "WIDGET_PROP_YSLIDABLE"
      },
      {
        "desc": "重复次数。",
        "name": "WIDGET_PROP_REPEAT"
      },
      {
        "desc": "触发长按事件的时间(ms)。",
        "name": "WIDGET_PROP_LONG_PRESS_TIME"
      },
      {
        "desc": "是否启用长按。",
        "name": "WIDGET_PROP_ENABLE_LONG_PRESS"
      },
      {
        "desc": "是否启用点击穿透。",
        "name": "WIDGET_PROP_CLICK_THROUGH"
      },
      {
        "desc": "是否启用动画。",
        "name": "WIDGET_PROP_ANIMATABLE"
      },
      {
        "desc": "是否自动隐藏。",
        "name": "WIDGET_PROP_AUTO_HIDE"
      },
      {
        "desc": "是否自动隐藏滚动条。",
        "name": "WIDGET_PROP_AUTO_HIDE_SCROLL_BAR"
      },
      {
        "desc": "图片名称。",
        "name": "WIDGET_PROP_IMAGE"
      },
      {
        "desc": "显示格式。",
        "name": "WIDGET_PROP_FORMAT"
      },
      {
        "desc": "图片绘制类型。",
        "name": "WIDGET_PROP_DRAW_TYPE"
      },
      {
        "desc": "是否可选择。",
        "name": "WIDGET_PROP_SELECTABLE"
      },
      {
        "desc": "是否可点击。",
        "name": "WIDGET_PROP_CLICKABLE"
      },
      {
        "desc": "X方向缩放比例。",
        "name": "WIDGET_PROP_SCALE_X"
      },
      {
        "desc": "Y方向缩放比例。",
        "name": "WIDGET_PROP_SCALE_Y"
      },
      {
        "desc": "x锚点。",
        "name": "WIDGET_PROP_ANCHOR_X"
      },
      {
        "desc": "y锚点。",
        "name": "WIDGET_PROP_ANCHOR_Y"
      },
      {
        "desc": "选中角度(幅度)",
        "name": "WIDGET_PROP_ROTATION"
      },
      {
        "desc": "紧凑模式。",
        "name": "WIDGET_PROP_COMPACT"
      },
      {
        "desc": "是否支持滚动。",
        "name": "WIDGET_PROP_SCROLLABLE"
      },
      {
        "desc": "图标名称。",
        "name": "WIDGET_PROP_ICON"
      },
      {
        "desc": "选项集合。",
        "name": "WIDGET_PROP_OPTIONS"
      },
      {
        "desc": "是否被选中。",
        "name": "WIDGET_PROP_SELECTED"
      },
      {
        "desc": "是否被勾选。",
        "name": "WIDGET_PROP_CHECKED"
      },
      {
        "desc": "active状态下的图标。",
        "name": "WIDGET_PROP_ACTIVE_ICON"
      },
      {
        "desc": "动态加载UI名字。",
        "name": "WIDGET_PROP_LOAD_UI"
      },
      {
        "desc": "要打开窗口的名称。",
        "name": "WIDGET_PROP_OPEN_WINDOW"
      },
      {
        "desc": "被选中项的索引。",
        "name": "WIDGET_PROP_SELECTED_INDEX"
      },
      {
        "desc": "点击窗口时关闭窗口。",
        "name": "WIDGET_PROP_CLOSE_WHEN_CLICK"
      },
      {
        "desc": "点击窗口外部时关闭窗口。",
        "name": "WIDGET_PROP_CLOSE_WHEN_CLICK_OUTSIDE"
      },
      {
        "desc": "超时后关闭窗口。",
        "name": "WIDGET_PROP_CLOSE_WHEN_TIMEOUT"
      },
      {
        "desc": "行间距。",
        "name": "WIDGET_PROP_LINE_GAP"
      },
      {
        "desc": "背景颜色(仅仅使用于color tile)。",
        "name": "WIDGET_PROP_BG_COLOR"
      },
      {
        "desc": "边框颜色(仅仅使用于color tile)。",
        "name": "WIDGET_PROP_BORDER_COLOR"
      },
      {
        "desc": "延迟时间(毫秒)",
        "name": "WIDGET_PROP_DELAY"
      },
      {
        "desc": "是否为键盘。",
        "name": "WIDGET_PROP_IS_KEYBOARD"
      },
      {
        "desc": "是否为焦点控件。",
        "name": "WIDGET_PROP_FOCUSED"
      },
      {
        "desc": "(过时请用focused)。",
        "name": "WIDGET_PROP_FOCUS"
      },
      {
        "desc": "是否支持焦点停留。",
        "name": "WIDGET_PROP_FOCUSABLE"
      },
      {
        "desc": "是否支持焦点状态(如果希望style支持焦点状态，但又不希望焦点停留，可用本属性)。",
        "name": "WIDGET_PROP_WITH_FOCUS_STATE"
      },
      {
        "desc": "将焦点移到前一个的键值。",
        "name": "WIDGET_PROP_MOVE_FOCUS_PREV_KEY"
      },
      {
        "desc": "将焦点移到后一个的键值。",
        "name": "WIDGET_PROP_MOVE_FOCUS_NEXT_KEY"
      },
      {
        "desc": "将焦点向上移动的键值。",
        "name": "WIDGET_PROP_MOVE_FOCUS_UP_KEY"
      },
      {
        "desc": "将焦点向下移动的键值。",
        "name": "WIDGET_PROP_MOVE_FOCUS_DOWN_KEY"
      },
      {
        "desc": "将焦点向左移动的键值。",
        "name": "WIDGET_PROP_MOVE_FOCUS_LEFT_KEY"
      },
      {
        "desc": "将焦点向右移动的键值。",
        "name": "WIDGET_PROP_MOVE_FOCUS_RIGHT_KEY"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_prop_t",
    "prefix": "WIDGET_PROP_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "控件的类型。",
    "consts": [
      {
        "desc": "无特殊类型。",
        "name": "WIDGET_TYPE_NONE"
      },
      {
        "desc": "窗口管理器。",
        "name": "WIDGET_TYPE_WINDOW_MANAGER"
      },
      {
        "desc": "普通窗口。",
        "name": "WIDGET_TYPE_NORMAL_WINDOW"
      },
      {
        "desc": "overlay窗口。",
        "name": "WIDGET_TYPE_OVERLAY"
      },
      {
        "desc": "工具条。",
        "name": "WIDGET_TYPE_TOOL_BAR"
      },
      {
        "desc": "对话框。",
        "name": "WIDGET_TYPE_DIALOG"
      },
      {
        "desc": "弹出窗口。",
        "name": "WIDGET_TYPE_POPUP"
      },
      {
        "desc": "system bar window",
        "name": "WIDGET_TYPE_SYSTEM_BAR"
      },
      {
        "desc": "system bar window ato bottom",
        "name": "WIDGET_TYPE_SYSTEM_BAR_BOTTOM"
      },
      {
        "desc": "精灵窗口。",
        "name": "WIDGET_TYPE_SPRITE"
      },
      {
        "desc": "键盘窗口。",
        "name": "WIDGET_TYPE_KEYBOARD"
      },
      {
        "desc": "拖放状态窗口。",
        "name": "WIDGET_TYPE_DND"
      },
      {
        "desc": "文本控件。",
        "name": "WIDGET_TYPE_LABEL"
      },
      {
        "desc": "按钮控件。",
        "name": "WIDGET_TYPE_BUTTON"
      },
      {
        "desc": "图片控件。",
        "name": "WIDGET_TYPE_IMAGE"
      },
      {
        "desc": "文本编辑控件。",
        "name": "WIDGET_TYPE_EDIT"
      },
      {
        "desc": "进度条控件。",
        "name": "WIDGET_TYPE_PROGRESS_BAR"
      },
      {
        "desc": "分组控件。",
        "name": "WIDGET_TYPE_GROUP_BOX"
      },
      {
        "desc": "多选按钮控件。",
        "name": "WIDGET_TYPE_CHECK_BUTTON"
      },
      {
        "desc": "单选按钮控件。",
        "name": "WIDGET_TYPE_RADIO_BUTTON"
      },
      {
        "desc": "对话框标题。",
        "name": "WIDGET_TYPE_DIALOG_TITLE"
      },
      {
        "desc": "对话框客户区域。",
        "name": "WIDGET_TYPE_DIALOG_CLIENT"
      },
      {
        "desc": "滑块控件。",
        "name": "WIDGET_TYPE_SLIDER"
      },
      {
        "desc": "视图控件。",
        "name": "WIDGET_TYPE_VIEW"
      },
      {
        "desc": "下拉选择框控件。",
        "name": "WIDGET_TYPE_COMBO_BOX"
      },
      {
        "desc": "下拉选择框的列表项控件。",
        "name": "WIDGET_TYPE_COMBO_BOX_ITEM"
      },
      {
        "desc": "滑动视图控件。",
        "name": "WIDGET_TYPE_SLIDE_VIEW"
      },
      {
        "desc": "滑动视图的指示器控件。",
        "name": "WIDGET_TYPE_SLIDE_INDICATOR"
      },
      {
        "desc": "滑动视图的指示器控件（圆弧显示）。",
        "name": "WIDGET_TYPE_SLIDE_INDICATOR_ARC"
      },
      {
        "desc": "多页控件。",
        "name": "WIDGET_TYPE_PAGES"
      },
      {
        "desc": "标签按钮控件。",
        "name": "WIDGET_TYPE_TAB_BUTTON"
      },
      {
        "desc": "标签控件。",
        "name": "WIDGET_TYPE_TAB_CONTROL"
      },
      {
        "desc": "标签按钮分组控件。",
        "name": "WIDGET_TYPE_TAB_BUTTON_GROUP"
      },
      {
        "desc": "按钮分组控件。",
        "name": "WIDGET_TYPE_BUTTON_GROUP"
      },
      {
        "desc": "候选字控件。",
        "name": "WIDGET_TYPE_CANDIDATES"
      },
      {
        "desc": "数值编辑控件。",
        "name": "WIDGET_TYPE_SPIN_BOX"
      },
      {
        "desc": "拖动块控件。",
        "name": "WIDGET_TYPE_DRAGGER"
      },
      {
        "desc": "滚动条控件。",
        "name": "WIDGET_TYPE_SCROLL_BAR"
      },
      {
        "desc": "桌面版滚动条控件。",
        "name": "WIDGET_TYPE_SCROLL_BAR_DESKTOP"
      },
      {
        "desc": "移动版滚动条控件。",
        "name": "WIDGET_TYPE_SCROLL_BAR_MOBILE"
      },
      {
        "desc": "滚动视图控件。",
        "name": "WIDGET_TYPE_SCROLL_VIEW"
      },
      {
        "desc": "列表视图控件。",
        "name": "WIDGET_TYPE_LIST_VIEW"
      },
      {
        "desc": "水平列表视图控件。",
        "name": "WIDGET_TYPE_LIST_VIEW_H"
      },
      {
        "desc": "列表项控件。",
        "name": "WIDGET_TYPE_LIST_ITEM"
      },
      {
        "desc": "颜色选择器控件。",
        "name": "WIDGET_TYPE_COLOR_PICKER"
      },
      {
        "desc": "颜色选择器组件控件。",
        "name": "WIDGET_TYPE_COLOR_COMPONENT"
      },
      {
        "desc": "颜色块控件。",
        "name": "WIDGET_TYPE_COLOR_TILE"
      },
      {
        "desc": "裁剪控件。",
        "name": "WIDGET_TYPE_CLIP_VIEW"
      },
      {
        "desc": "富文本控件。",
        "name": "WIDGET_TYPE_RICH_TEXT"
      },
      {
        "desc": "AppBar控件。",
        "name": "WIDGET_TYPE_APP_BAR"
      },
      {
        "desc": "网格控件。",
        "name": "WIDGET_TYPE_GRID"
      },
      {
        "desc": "网格项目控件。",
        "name": "WIDGET_TYPE_GRID_ITEM"
      },
      {
        "desc": "行控件。",
        "name": "WIDGET_TYPE_ROW"
      },
      {
        "desc": "列控件。",
        "name": "WIDGET_TYPE_COLUMN"
      },
      {
        "desc": "电阻屏校准窗口。",
        "name": "WIDGET_TYPE_CALIBRATION_WIN"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_type_t",
    "prefix": "WIDGET_TYPE_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "窗口的生命周期常量定义。",
    "consts": [
      {
        "desc": "初始状态。",
        "name": "WINDOW_STAGE_NONE"
      },
      {
        "desc": "从UI资源加载完成。",
        "name": "WINDOW_STAGE_LOADED"
      },
      {
        "desc": "创建完成。",
        "name": "WINDOW_STAGE_CREATED"
      },
      {
        "desc": "窗口已经打开(窗口打开动画完成后)",
        "name": "WINDOW_STAGE_OPENED"
      },
      {
        "desc": "窗口已关闭。",
        "name": "WINDOW_STAGE_CLOSED"
      },
      {
        "desc": "窗口挂起状态。",
        "name": "WINDOW_STAGE_SUSPEND"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "window_stage_t",
    "prefix": "WINDOW_STAGE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "窗口的closable常量定义。",
    "consts": [
      {
        "desc": "窗口可关闭。",
        "name": "WINDOW_CLOSABLE_YES"
      },
      {
        "desc": "窗口不可关闭。",
        "name": "WINDOW_CLOSABLE_NO"
      },
      {
        "desc": "窗口需要确认后才能关闭。",
        "name": "WINDOW_CLOSABLE_CONFIRM"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "window_closable_t",
    "prefix": "WINDOW_CLOSABLE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "控件状态常量定义。\n\n这里指定常用的状态值，扩展控件可以在自己的头文件中定义私有的状态。",
    "consts": [
      {
        "desc": "无效状态。",
        "name": "WIDGET_STATE_NONE"
      },
      {
        "desc": "正常状态。",
        "name": "WIDGET_STATE_NORMAL"
      },
      {
        "desc": "内容被修改的状态。",
        "name": "WIDGET_STATE_CHANGED"
      },
      {
        "desc": "指针按下状态。",
        "name": "WIDGET_STATE_PRESSED"
      },
      {
        "desc": "指针悬浮状态。",
        "name": "WIDGET_STATE_OVER"
      },
      {
        "desc": "禁用状态。",
        "name": "WIDGET_STATE_DISABLE"
      },
      {
        "desc": "聚焦状态。",
        "name": "WIDGET_STATE_FOCUSED"
      },
      {
        "desc": "勾选状态。",
        "name": "WIDGET_STATE_CHECKED"
      },
      {
        "desc": "没勾选状态。",
        "name": "WIDGET_STATE_UNCHECKED"
      },
      {
        "desc": "编辑器无内容状态。",
        "name": "WIDGET_STATE_EMPTY"
      },
      {
        "desc": "编辑器无内容同时聚焦的状态。",
        "name": "WIDGET_STATE_EMPTY_FOCUS"
      },
      {
        "desc": "输入错误状态。",
        "name": "WIDGET_STATE_ERROR"
      },
      {
        "desc": "选中状态。",
        "name": "WIDGET_STATE_SELECTED"
      },
      {
        "desc": "正常状态(选中项)。",
        "name": "WIDGET_STATE_NORMAL_OF_CHECKED"
      },
      {
        "desc": "指针按下状态(选中项)。",
        "name": "WIDGET_STATE_PRESSED_OF_CHECKED"
      },
      {
        "desc": "指针悬浮状态(选中项)。",
        "name": "WIDGET_STATE_OVER_OF_CHECKED"
      },
      {
        "desc": "禁用状态(选中项)。",
        "name": "WIDGET_STATE_DISABLE_OF_CHECKED"
      },
      {
        "desc": "焦点状态(选中项)。",
        "name": "WIDGET_STATE_FOCUSED_OF_CHECKED"
      },
      {
        "desc": "正常状态(当前项)。",
        "name": "WIDGET_STATE_NORMAL_OF_ACTIVE"
      },
      {
        "desc": "指针按下状态(当前项)。",
        "name": "WIDGET_STATE_PRESSED_OF_ACTIVE"
      },
      {
        "desc": "指针悬浮状态(当前项)。",
        "name": "WIDGET_STATE_OVER_OF_ACTIVE"
      },
      {
        "desc": "禁用状态(当前项)。",
        "name": "WIDGET_STATE_DISABLE_OF_ACTIVE"
      },
      {
        "desc": "焦点状态(当前项)。",
        "name": "WIDGET_STATE_FOCUSED_OF_ACTIVE"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_state_t",
    "prefix": "WIDGET_STATE_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "控件鼠标光标常量定义。",
    "consts": [
      {
        "desc": "默认光标。",
        "name": "WIDGET_CURSOR_DEFAULT"
      },
      {
        "desc": "文本选择光标。",
        "name": "WIDGET_CURSOR_EDIT"
      },
      {
        "desc": "手指光标。",
        "name": "WIDGET_CURSOR_HAND"
      },
      {
        "desc": "等待光标。",
        "name": "WIDGET_CURSOR_WAIT"
      },
      {
        "desc": "叉光标。",
        "name": "WIDGET_CURSOR_CROSS"
      },
      {
        "desc": "Slashed circle or crossbones。",
        "name": "WIDGET_CURSOR_NO"
      },
      {
        "desc": "Double arrow pointing northwest and southeast。",
        "name": "WIDGET_CURSOR_SIZENWSE"
      },
      {
        "desc": "Double arrow pointing northeast and southwest。",
        "name": "WIDGET_CURSOR_SIZENESW"
      },
      {
        "desc": "Double arrow pointing west and east。",
        "name": "WIDGET_CURSOR_SIZEWE"
      },
      {
        "desc": "Double arrow pointing north and south。",
        "name": "WIDGET_CURSOR_SIZENS"
      },
      {
        "desc": "Four pointed arrow pointing north, south, east, and west。",
        "name": "WIDGET_CURSOR_SIZEALL"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_cursor_t",
    "prefix": "WIDGET_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取子控件的个数。",
        "name": "widget_count_children",
        "return": {
          "type": "int32_t",
          "desc": "子控件的个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "index",
            "desc": "索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定索引的子控件。",
        "name": "widget_get_child",
        "return": {
          "type": "widget_t*",
          "desc": "子控件。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取当前窗口中的焦点控件。",
        "name": "widget_get_focused_widget",
        "return": {
          "type": "widget_t*",
          "desc": "焦点控件。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取原生窗口对象。",
        "name": "widget_get_native_window",
        "return": {
          "type": "native_window_t*",
          "desc": "原生窗口对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件在父控件中的索引编号。",
        "name": "widget_index_of",
        "return": {
          "type": "int32_t",
          "desc": "在父控件中的索引编号。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "关闭控件所在的窗口。",
        "name": "widget_close_window",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "关闭控件所在的窗口。",
        "name": "widget_close_window_force",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "请求返回到前一个窗口。",
        "name": "widget_back",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "请求返回到home窗口。",
        "name": "widget_back_to_home",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "移动控件。",
        "name": "widget_move",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "调整控件的大小。",
        "name": "widget_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "移动控件并调整控件的大小。",
        "name": "widget_move_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值。\n只是对widget\\_set\\_prop的包装，值的意义由子类控件决定。",
        "name": "widget_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值(以动画形式变化到指定的值)。\n只是对widget\\_set\\_prop的包装，值的意义由子类控件决定。",
        "name": "widget_animate_value_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "增量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "增加控件的值。\n只是对widget\\_set\\_prop的包装，值的意义由子类控件决定。",
        "name": "widget_add_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "style_name",
            "desc": "style的名称（如果为 NULL，则默认为 default）。"
          },
          {
            "type": "const char*",
            "name": "state_name",
            "desc": "state的名称（如果为 NULL，则默认为 normal）。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查询指定的style是否存在。",
        "name": "widget_is_style_exist",
        "return": {
          "type": "bool_t",
          "desc": "存在返回 TRUE，不存在返回 FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "style",
            "desc": "style的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "启用指定的style。",
        "name": "widget_use_style",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的文本。\n只是对widget\\_set\\_prop的包装，文本的意义由子类控件决定。",
        "name": "widget_set_text_utf8",
        "alias": "set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "子控件的名称。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置子控件的文本。\n只是对widget\\_set\\_prop的包装，文本的意义由子类控件决定。",
        "name": "widget_set_child_text_utf8",
        "alias": "set_child_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "子控件的名称。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式字符串(如：\"%2.2lf\")。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "浮点数值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "用一个浮点数去设置子控件的文本。\n只是对widget\\_set\\_prop的包装，文本的意义由子类控件决定。",
        "name": "widget_set_child_text_with_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "子控件的名称。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式字符串(如：\"%d\")。"
          },
          {
            "type": "int",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "用一个整数去设置子控件的文本。\n只是对widget\\_set\\_prop的包装，文本的意义由子类控件决定。",
        "name": "widget_set_child_text_with_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取翻译之后的文本，然后调用widget_set_text。",
        "name": "widget_set_tr_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件的值。只是对widget\\_get\\_prop的包装，值的意义由子类控件决定。",
        "name": "widget_get_value",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件enable属性值。",
        "name": "widget_get_enable",
        "return": {
          "type": "bool_t",
          "desc": "返回enable。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件floating属性值。",
        "name": "widget_get_floating",
        "return": {
          "type": "bool_t",
          "desc": "返回floating。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件auto_adjust_size属性值。",
        "name": "widget_get_auto_adjust_size",
        "return": {
          "type": "bool_t",
          "desc": "返回auto_adjust_size。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件with_focus_state属性值。",
        "name": "widget_get_with_focus_state",
        "return": {
          "type": "bool_t",
          "desc": "返回with_focus_state。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件focusable属性值。",
        "name": "widget_get_focusable",
        "return": {
          "type": "bool_t",
          "desc": "返回focusable。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件sensitive属性值。",
        "name": "widget_get_sensitive",
        "return": {
          "type": "bool_t",
          "desc": "返回sensitive。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件visible属性值。",
        "name": "widget_get_visible",
        "return": {
          "type": "bool_t",
          "desc": "返回visible。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件feedback属性值。",
        "name": "widget_get_feedback",
        "return": {
          "type": "bool_t",
          "desc": "返回feedback。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件的文本。\n只是对widget\\_get\\_prop的包装，文本的意义由子类控件决定。\n\n如果希望获取UTF8格式的文本，可以参考下面的代码：\n\n```c\nstr_t str;\nstr_init(&str, 0);\nstr_from_wstr(&str, widget_get_text(target));\nlog_debug(\"%s: %s\\n\", target->name, str.str);\nstr_reset(&str);\n```",
        "name": "widget_get_text",
        "return": {
          "type": "const wchar_t*",
          "desc": "返回文本。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的名称。",
        "name": "widget_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "主题的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置theme的名称，用于动态切换主题。名称与当前主题名称相同，则重新加载全部资源。\n\n> 目前只支持带有文件系统的平台。",
        "name": "widget_set_theme",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "cursor",
            "desc": "图片名称(无扩展名)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置鼠标指针的图片名。",
        "name": "widget_set_pointer_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "animation",
            "desc": "动画参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的动画参数(仅用于在UI文件使用)。\n请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)",
        "name": "widget_set_animation",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "animation",
            "desc": "动画参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "创建动画。\n请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n* 除非指定auto_start=false，动画创建后自动启动。\n* 除非指定auto_destroy=false，动画播放完成后自动销毁。",
        "name": "widget_create_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "播放动画。\n请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n* 1.widget为NULL时，播放所有名称为name的动画。\n* 2.name为NULL时，播放所有widget相关的动画。\n* 3.widget和name均为NULL，播放所有动画。",
        "name": "widget_start_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          },
          {
            "type": "float_t",
            "name": "time_scale",
            "desc": "时间倍率。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置动画的时间倍率，<0: 时间倒退，<1: 时间变慢，>1 时间变快。\n请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n* 1.widget为NULL时，设置所有名称为name的动画的时间倍率。\n* 2.name为NULL时，设置所有widget相关的动画的时间倍率。\n* 3.widget和name均为NULL，设置所有动画的时间倍率。",
        "name": "widget_set_animator_time_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "暂停动画。\n请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n* 1.widget为NULL时，暂停所有名称为name的动画。\n* 2.name为NULL时，暂停所有widget相关的动画。\n* 3.widget和name均为NULL，暂停所有动画。",
        "name": "widget_pause_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "停止动画(控件的相应属性回归原位)。\n请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n* 1.widget为NULL时，停止所有名称为name的动画。\n* 2.name为NULL时，停止所有widget相关的动画。\n* 3.widget和name均为NULL，停止所有动画。",
        "name": "widget_stop_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "动画名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "销毁动画。\n请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)\n\n* 1.widget为NULL时，销毁所有名称为name的动画。\n* 2.name为NULL时，销毁所有widget相关的动画。\n* 3.widget和name均为NULL，销毁所有动画。",
        "name": "widget_destroy_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "enable",
            "desc": "是否可用性。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的可用性。",
        "name": "widget_set_enable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "feedback",
            "desc": "是否启用反馈。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否启用反馈。",
        "name": "widget_set_feedback",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_adjust_size",
            "desc": "是否根据子控件和文本自动调整控件自身大小。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否根据子控件和文本自动调整控件自身大小。",
        "name": "widget_set_auto_adjust_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "floating",
            "desc": "是否启用floating布局。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的floating标志。\n> floating的控件不受父控件的子控件布局参数的影响。",
        "name": "widget_set_floating",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "focused",
            "desc": "是否获得焦点。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否获得焦点。",
        "name": "widget_set_focused",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "focusable",
            "desc": "是否可获得焦点。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否可获得焦点。",
        "name": "widget_set_focusable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "state",
            "desc": "状态(必须为真正的常量字符串，在widget的整个生命周期有效)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的状态。",
        "name": "widget_set_state",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint8_t",
            "name": "opacity",
            "desc": "不透明度(取值0-255，0表示完全透明，255表示完全不透明)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的不透明度。\n\n>在嵌入式平台，半透明效果会使性能大幅下降，请谨慎使用。",
        "name": "widget_set_opacity",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint16_t",
            "name": "dirty_rect_tolerance",
            "desc": "控件脏脏矩形超出控件本身大小的最大范。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件脏矩形超出控件本身大小的最大范围(一般不用指定)。",
        "name": "widget_set_dirty_rect_tolerance",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "销毁全部子控件。",
        "name": "widget_destroy_children",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "加入一个子控件。",
        "name": "widget_add_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "移出指定的子控件(并不销毁)。",
        "name": "widget_remove_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置序数(大于等于总个数，则放到最后)。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "插入子控件到指定的位置。",
        "name": "widget_insert_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置序数(大于等于总个数，则放到最后)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "调整控件在父控件中的位置序数。",
        "name": "widget_restack",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "子控件的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找指定名称的子控件(同widget_lookup(widget, name, FALSE))。",
        "name": "widget_child",
        "return": {
          "type": "widget_t*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "子控件的名称。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归查找全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找指定名称的子控件(返回第一个)。",
        "name": "widget_lookup",
        "return": {
          "type": "widget_t*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "type",
            "desc": "子控件的名称。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归查找全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找指定类型的子控件(返回第一个)。",
        "name": "widget_lookup_by_type",
        "return": {
          "type": "widget_t*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "visible",
            "desc": "是否可见。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的可见性。",
        "name": "widget_set_visible",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "visible",
            "desc": "是否可见。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的可见性(不触发repaint和relayout)。",
        "name": "widget_set_visible_only",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "sensitive",
            "desc": "是否接受用户事件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否接受用户事件。",
        "name": "widget_set_sensitive",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": "注册指定事件的处理函数。\n使用示例：\n\n```c\nwidget_t* ok = button_create(win, 10, 10, 80, 30);\nwidget_on(ok, EVT_CLICK, on_click, NULL);\n\n```",
        "name": "widget_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于widget_off。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "widget_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "注销指定事件的处理函数。",
        "name": "widget_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "矩形对象(widget本地坐标)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "请求强制重绘控件。",
        "name": "widget_invalidate_force",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "const char*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置字符串格式的属性。",
        "name": "widget_set_prop_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "const char*",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取字符串格式的属性。",
        "name": "widget_get_prop_str",
        "return": {
          "type": "const char*",
          "desc": "返回属性的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "void*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指针格式的属性。",
        "name": "widget_set_prop_pointer",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指针格式的属性。",
        "name": "widget_get_prop_pointer",
        "return": {
          "type": "void*",
          "desc": "返回属性的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置整数格式的属性。",
        "name": "widget_set_prop_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取整数格式的属性。",
        "name": "widget_get_prop_int",
        "return": {
          "type": "int32_t",
          "desc": "返回属性的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "bool_t",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置布尔格式的属性。",
        "name": "widget_set_prop_bool",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "bool_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取布尔格式的属性。",
        "name": "widget_get_prop_bool",
        "return": {
          "type": "bool_t",
          "desc": "返回属性的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件所在的窗口是否已经打开。",
        "name": "widget_is_window_opened",
        "return": {
          "type": "bool_t",
          "desc": "返回当前控件所在的窗口是否已经打开。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断窗口及子控件创建或加载是否完成。",
        "name": "widget_is_window_created",
        "return": {
          "type": "bool_t",
          "desc": "返回创建或加载是否完成。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件是否是指定控件的父控件(包括非直系)。",
        "name": "widget_is_parent_of",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是，否则表示不是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件是否是指定控件的直系父控件。",
        "name": "widget_is_direct_parent_of",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是，否则表示不是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件是否是窗口。",
        "name": "widget_is_window",
        "return": {
          "type": "bool_t",
          "desc": "返回当前控件是否是窗口。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查控件是否是system bar类型。",
        "name": "widget_is_system_bar",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE表示不是，否则表示是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查控件是否是普通窗口类型。",
        "name": "widget_is_normal_window",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE表示不是，否则表示是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查控件是否是对话框类型。",
        "name": "widget_is_dialog",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE表示不是，否则表示是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查控件是否是弹出窗口类型。",
        "name": "widget_is_popup",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE表示不是，否则表示是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查控件是否是overlay窗口类型。",
        "name": "widget_is_overlay",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE表示不是，否则表示是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查控件弹出对话框控件是否已经打开了（而非挂起状态）。",
        "name": "widget_is_opened_dialog",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE表示不是，否则表示是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查控件弹出窗口控件是否已经打开了（而非挂起状态）。",
        "name": "widget_is_opened_popup",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE表示不是，否则表示是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件是否是keyboard。\n\n> keyboard收到pointer事件时，不会让当前控件失去焦点。\n\n在自定义软键盘时，将所有按钮放到一个容器当中，并设置为is_keyboard。\n\n```c\nwidget_set_prop_bool(group, WIDGET_PROP_IS_KEYBOARD, TRUE);\n```",
        "name": "widget_is_keyboard",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE表示不是，否则表示是。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件是否是设计窗口。",
        "name": "widget_is_designing_window",
        "return": {
          "type": "bool_t",
          "desc": "返回当前控件是否是设计窗口。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件是否是窗口管理器。",
        "name": "widget_is_window_manager",
        "return": {
          "type": "bool_t",
          "desc": "返回当前控件是否是窗口管理器。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "visit",
            "desc": "遍历的回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": "遍历当前控件及子控件。",
        "name": "widget_foreach",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取当前控件所在的窗口。",
        "name": "widget_get_window",
        "return": {
          "type": "widget_t*",
          "desc": "窗口对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取当前的窗口管理器。",
        "name": "widget_get_window_manager",
        "return": {
          "type": "widget_t*",
          "desc": "窗口管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取当前控件的类型名称。",
        "name": "widget_get_type",
        "return": {
          "type": "const char*",
          "desc": "返回类型名。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "clone新控件的parent对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "clone。",
        "name": "widget_clone",
        "return": {
          "type": "widget_t*",
          "desc": "返回clone的对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "other",
            "desc": "要比较的控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断两个widget是否相同。",
        "name": "widget_equal",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示相同，否则表示不同。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为widget对象(供脚本语言使用)。",
        "name": "widget_cast",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "从父控件中移除控件，并调用unref函数销毁控件。\n\n> 一般无需直接调用，关闭窗口时，自动销毁相关控件。",
        "name": "widget_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "从父控件中移除控件，并调用unref函数销毁控件。\n\n> 一般无需直接调用，关闭窗口时，自动销毁相关控件。",
        "name": "widget_destroy_async",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "减少控件的引用计数。引用计数为0时销毁控件。",
        "name": "widget_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "矩形区域。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "根据控件的style绘制边框矩形。",
        "name": "widget_stroke_border_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "矩形区域。"
          },
          {
            "type": "image_draw_type_t",
            "name": "draw_type",
            "desc": "图片缺省绘制方式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "根据控件的style绘制背景矩形。",
        "name": "widget_fill_bg_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "矩形区域。"
          },
          {
            "type": "image_draw_type_t",
            "name": "draw_type",
            "desc": "图片缺省绘制方式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "根据控件的style绘制前景矩形。",
        "name": "widget_fill_fg_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "递归的分发一个事件到所有target子控件。",
        "name": "widget_dispatch_to_target",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "递归的分发一个事件到所有key_target子控件。",
        "name": "widget_dispatch_to_key_target",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取 widget 对应风格类型",
        "name": "widget_get_style_type",
        "return": {
          "type": "const char*",
          "desc": "返回 widget 的对应风格类型。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "让控件根据自己当前状态更新style。",
        "name": "widget_update_style",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "让控件及子控件根据自己当前状态更新style。",
        "name": "widget_update_style_recursive",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "递归的把父控件的key_target设置为自己。",
        "name": "widget_set_as_key_target",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "把焦点移动下一个控件。\n\n>widget必须是当前焦点控件。",
        "name": "widget_focus_next",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "把焦点移动前一个控件。\n\n>widget必须是当前焦点控件。",
        "name": "widget_focus_prev",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "active",
            "desc": "控件是否为当前项。"
          },
          {
            "type": "bool_t",
            "name": "checked",
            "desc": "控件是否为选中项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "把控件的状态转成获取style选要的状态，一般只在子类中使用。",
        "name": "widget_get_state_for_style",
        "return": {
          "type": "const char*",
          "desc": "返回状态值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "布局当前控件及子控件。",
        "name": "widget_layout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "params",
            "desc": "布局参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件自己的布局参数。",
        "name": "widget_set_self_layout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "params",
            "desc": "布局参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置子控件的布局参数。",
        "name": "widget_set_children_layout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "x",
            "desc": "x参数。"
          },
          {
            "type": "const char*",
            "name": "y",
            "desc": "y参数。"
          },
          {
            "type": "const char*",
            "name": "w",
            "desc": "w参数。"
          },
          {
            "type": "const char*",
            "name": "h",
            "desc": "h参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件自己的布局(缺省布局器)参数(过时，请用widget\\_set\\_self\\_layout)。",
        "name": "widget_set_self_layout_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "state_and_name",
            "desc": "状态和名字，用英文的冒号分隔。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置整数类型的style。\n\n> * [state 的取值](https://github.com/zlgopen/awtk/blob/master/docs/manual/widget_state_t.md)\n> * [name 的取值](https://github.com/zlgopen/awtk/blob/master/docs/theme.md)",
        "name": "widget_set_style_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "state_and_name",
            "desc": "状态和名字，用英文的冒号分隔。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置字符串类型的style。\n\n> * [state 的取值](https://github.com/zlgopen/awtk/blob/master/docs/manual/widget_state_t.md)\n> * [name 的取值](https://github.com/zlgopen/awtk/blob/master/docs/theme.md)",
        "name": "widget_set_style_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "state_and_name",
            "desc": "状态和名字，用英文的冒号分隔。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "值。颜色值一般用十六进制表示，每两个数字表示一个颜色通道，从高位到低位，依次是ABGR。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置颜色类型的style。\n\n> * [state 的取值](https://github.com/zlgopen/awtk/blob/master/docs/manual/widget_state_t.md)\n> * [name 的取值](https://github.com/zlgopen/awtk/blob/master/docs/theme.md)\n\n\n在下面这个例子中，R=0x11 G=0x22 B=0x33 A=0xFF\n\n```c\nwidget_set_style_color(label, \"normal:bg_color\", 0xFF332211);\n```",
        "name": "widget_set_style_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_WILL_MOVE",
        "desc": "控件移动前触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_MOVE",
        "desc": "控件移动后触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_WILL_RESIZE",
        "desc": "控件调整大小前触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_RESIZE",
        "desc": "控件调整大小后触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_WILL_MOVE_RESIZE",
        "desc": "控件移动并调整大小前触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_MOVE_RESIZE",
        "desc": "控件移动并调整大小后触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_THEME_CHANGED",
        "desc": "主题变化事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_FOCUS",
        "desc": "控件得到焦点时触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_BLUR",
        "desc": "控件失去焦点时触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_WIDGET_ADD_CHILD",
        "desc": "控件加载新的子控件。",
        "type": "event_t"
      },
      {
        "name": "EVT_WIDGET_REMOVE_CHILD",
        "desc": "控件移除子控件。",
        "type": "event_t"
      },
      {
        "name": "EVT_PROP_WILL_CHANGE",
        "desc": "控件属性改变前触发(通过set_prop设置属性，才会触发)。",
        "type": "prop_change_event_t"
      },
      {
        "name": "EVT_PROP_CHANGED",
        "desc": "控件属性改变后触发(通过set_prop设置属性，才会触发)。",
        "type": "prop_change_event_t"
      },
      {
        "name": "EVT_PAINT",
        "desc": "控件绘制时触发。",
        "type": "paint_event_t"
      },
      {
        "name": "EVT_BEFORE_PAINT",
        "desc": "控件绘制前触发。",
        "type": "paint_event_t"
      },
      {
        "name": "EVT_AFTER_PAINT",
        "desc": "控件绘制完成时触发。",
        "type": "paint_event_t"
      },
      {
        "name": "EVT_PAINT_DONE",
        "desc": "控件绘制完成时(canvas状态已经恢复)触发。",
        "type": "paint_event_t"
      },
      {
        "name": "EVT_WHEEL_BEFORE_CHILDREN",
        "desc": "鼠标滚轮事件，在子控件处理之前触发。",
        "type": "wheel_event_t"
      },
      {
        "name": "EVT_WHEEL",
        "desc": "鼠标滚轮事件。",
        "type": "wheel_event_t"
      },
      {
        "name": "EVT_POINTER_LEAVE",
        "desc": "鼠标指针离开控件时触发。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_ENTER",
        "desc": "鼠标指针进入控件时触发。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_KEY_DOWN_BEFORE_CHILDREN",
        "desc": "键按下事件，在子控件处理之前触发。",
        "type": "key_event_t"
      },
      {
        "name": "EVT_KEY_DOWN",
        "desc": "键按下事件。",
        "type": "key_event_t"
      },
      {
        "name": "EVT_KEY_UP_BEFORE_CHILDREN",
        "desc": "键释放事件，在子控件处理之前触发。",
        "type": "key_event_t"
      },
      {
        "name": "EVT_KEY_UP",
        "desc": "键释放事件。",
        "type": "key_event_t"
      },
      {
        "name": "EVT_POINTER_DOWN_BEFORE_CHILDREN",
        "desc": "指针设备按下事件，在子控件处理之前触发。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_DOWN",
        "desc": "指针设备按下事件。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_DOWN_ABORT",
        "desc": "取消指针设备按下事件。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_MOVE",
        "desc": "指针设备移动事件。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_MOVE_BEFORE_CHILDREN",
        "desc": "指针设备移动事件，在子控件处理之前触发。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_UP",
        "desc": "指针设备释放事件。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_POINTER_UP_BEFORE_CHILDREN",
        "desc": "指针设备释放事件，在子控件处理之前触发。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_DESTROY",
        "desc": "控件销毁时触发。",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标(相对于父控件的x坐标)。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标(相对于父控件的y坐标)。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "w",
        "desc": "宽度。",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": "高度。",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": "控件名字。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "pointer_cursor",
        "desc": "鼠标光标图片名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "tr_text",
        "desc": "保存用于翻译的字符串。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "style",
        "desc": "style的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "animation",
        "desc": "动画参数。请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "enable",
        "desc": "启用/禁用状态。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "feedback",
        "desc": "是否启用按键音、触屏音和震动等反馈。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "visible",
        "desc": "是否可见。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "sensitive",
        "desc": "是否接受用户事件。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "focusable",
        "desc": "是否支持焦点停留。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "with_focus_state",
        "desc": "是否支持焦点状态。\n> 如果希望style支持焦点状态，但又不希望焦点停留，可用本属性。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_adjust_size",
        "desc": "是否根据子控件和文本自动调整控件自身大小。\n\n> 为true时，最好不要使用child_layout，否则可能有冲突。\n> 注意：只是调整控件的本身的宽高，不会修改控件本身的位置。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "floating",
        "desc": "标识控件是否启用浮动布局，不受父控件的children_layout的控制。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "dirty_rect_tolerance",
        "desc": "脏矩形超出控件本身大小的最大范围(一般不用指定)。\n\n> 如果 border 太粗或 offset 太大等原因，导致脏矩形超出控件本身大小太多（大于缺省值）时，才需要指定。",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "parent",
        "desc": "父控件",
        "type": "widget_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/widget.h",
    "desc": "**widget_t** 是所有控件、窗口和窗口管理器的基类。\n**widget_t**也是一个容器，可放其它**widget_t**到它的内部，形成一个树形结构。\n\n```graphviz\n[default_style]\n\nwidget_t -> widget_t[arrowhead = \"diamond\"]\nwindow_t -> widget_t[arrowhead = \"empty\"]\nwindow_manager_t -> widget_t[arrowhead = \"empty\"]\nbutton_t -> widget_t[arrowhead = \"empty\"]\nlabel_t -> widget_t[arrowhead = \"empty\"]\nxxx_widget_t -> widget_t[arrowhead = \"empty\"]\n```\n\n通常**widget_t**通过一个矩形区域向用户呈现一些信息，接受用户的输入，并据此做出适当的反应。\n它负责控件的生命周期、通用状态、事件分发和Style的管理。\n本类提供的接口(函数和属性)除非特别说明，一般都适用于子类控件。\n\n为了便于解释，这里特别说明一下几个术语：\n\n* **父控件与子控件**：父控件与子控件指的两个控件的组合关系(这是在运行时决定的)。\n比如：在窗口中放一个按钮，此时，我们称按钮是窗口的子控件，窗口是按钮的父控件。\n\n```graphviz\n[default_style]\n\n子控件 -> 父控件[arrowhead = \"ediamond\"]\n```\n\n* **子类控件与父类控件**：子类控件与父类控件指的两类控件的继承关系(这是在设计时决定的)。\n比如：我们称**button_t**是**widget_t**的子类控件，**widget_t**是**button_t**的父类控件。\n\n```graphviz\n[default_style]\n\n子类控件 -> 父类控件[arrowhead = \"empty\"]\n\n```\n\nwidget相关的函数都只能在GUI线程中执行，如果需在非GUI线程中想调用widget相关函数，\n请用idle\\_queue或timer\\_queue进行串行化。\n请参考[demo thread](https://github.com/zlgopen/awtk/blob/master/demos/demo_thread_app.c)\n\n**widget\\_t**是抽象类，不要直接创建**widget\\_t**的实例。控件支持两种创建方式：\n\n* 通过XML创建。如：\n\n```xml\n<button x=\"c\" y=\"m\" w=\"80\" h=\"30\" text=\"OK\"/>\n```\n\n* 通过代码创建。如：\n\n```c\nwidget_t* button = button_create(win, 10, 10, 128, 30);\nwidget_set_text(button, L\"OK\");\nwidget_on(button, EVT_CLICK, on_click, NULL);\n```",
    "name": "widget_t",
    "annotation": {
      "scriptable": true,
      "widget": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "持久保存配置。",
        "name": "app_conf_save",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "重新加载配置(内存中的配置丢失)。",
        "name": "app_conf_reload",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "释放conf对象。",
        "name": "app_conf_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "检查配置项是否存在。",
        "name": "app_conf_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，FALSE表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置整数类型配置项的值。",
        "name": "app_conf_set_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "int64_t",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置64位整数类型配置项的值。",
        "name": "app_conf_set_int64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "bool_t",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置bool类型配置项的值。",
        "name": "app_conf_set_bool",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "double",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置双精度类型配置项的值。",
        "name": "app_conf_set_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "const char*",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置字符串类型配置项的值。",
        "name": "app_conf_set_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取整数类型配置项的值。",
        "name": "app_conf_get_int",
        "return": {
          "type": "int32_t",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "int64_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取64位整数类型配置项的值。",
        "name": "app_conf_get_int64",
        "return": {
          "type": "int64_t",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "bool_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取bool类型配置项的值。",
        "name": "app_conf_get_bool",
        "return": {
          "type": "bool_t",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "double",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取单精度浮点数类型配置项的值。",
        "name": "app_conf_get_double",
        "return": {
          "type": "double",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "const char*",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取字符串类型配置项的值。",
        "name": "app_conf_get_str",
        "return": {
          "type": "const char*",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "删除配置项。",
        "name": "app_conf_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "conf_io/app_conf.h",
    "desc": "应用程序的配置信息。\n\n底层实现可以是任何格式，比如INI，XML，JSON和UBJSON。\n\n对于树状的文档，key可以是多级的，用.分隔。如network.ip。\n\nconf-io是可选组件，需要自己包含头文件，否则64位数据类型会被截断成32位的数据。\n\n```c\n#include \"conf_io/app_conf.h\"\n```",
    "name": "app_conf_t",
    "annotation": {
      "fake": true,
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "初始化AWTK扩展控件。",
        "name": "tk_ext_widgets_init",
        "alias": "ext_widgets_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "ext_widgets/ext_widgets.h",
    "desc": "扩展控件。",
    "name": "ext_widgets_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "指示器默认绘制的类型。",
    "consts": [
      {
        "desc": "自动选择。",
        "name": "INDICATOR_DEFAULT_PAINT_AUTO"
      },
      {
        "desc": "实心圆点指示器，当前项填充selected_fg_color，其他填充fg_color。",
        "name": "INDICATOR_DEFAULT_PAINT_FILL_DOT"
      },
      {
        "desc": "镂空圆点指示器，当前项填充selected_fg_color，其他镂空fg_color。",
        "name": "INDICATOR_DEFAULT_PAINT_STROKE_DOT"
      },
      {
        "desc": "实心矩形指示器，当前项填充selected_fg_color，其他填充fg_color。",
        "name": "INDICATOR_DEFAULT_PAINT_FILL_RECT"
      },
      {
        "desc": "镂空矩形指示器，当前项填充selected_fg_color，其他镂空fg_color。",
        "name": "INDICATOR_DEFAULT_PAINT_STROKE_RECT"
      }
    ],
    "header": "slide_view/slide_indicator.h",
    "name": "indicator_default_paint_t",
    "prefix": "INDICATOR_DEFAULT_PAINT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "虚拟页面的事件。",
    "consts": [
      {
        "desc": "页面即将打开(动画前)。",
        "name": "EVT_VPAGE_WILL_OPEN"
      },
      {
        "desc": "页面打开完成(动画后)。",
        "name": "EVT_VPAGE_OPEN"
      },
      {
        "desc": "页面已经关闭(动画后)。",
        "name": "EVT_VPAGE_CLOSE"
      }
    ],
    "header": "vpage/vpage.h",
    "name": "vpage_event_t",
    "prefix": "EVT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "资源类型常量定义。",
    "consts": [
      {
        "desc": "无效资源。",
        "name": "ASSET_TYPE_NONE"
      },
      {
        "desc": "字体资源。",
        "name": "ASSET_TYPE_FONT"
      },
      {
        "desc": "图片资源。",
        "name": "ASSET_TYPE_IMAGE"
      },
      {
        "desc": "窗体样式资源。",
        "name": "ASSET_TYPE_STYLE"
      },
      {
        "desc": "UI数据资源。",
        "name": "ASSET_TYPE_UI"
      },
      {
        "desc": "XML数据资源。",
        "name": "ASSET_TYPE_XML"
      },
      {
        "desc": "字符串数据资源。",
        "name": "ASSET_TYPE_STRINGS"
      },
      {
        "desc": "JS等脚本资源。",
        "name": "ASSET_TYPE_SCRIPT"
      },
      {
        "desc": "流图资源。",
        "name": "ASSET_TYPE_FLOW"
      },
      {
        "desc": "其它数据资源。",
        "name": "ASSET_TYPE_DATA"
      }
    ],
    "header": "tkc/asset_info.h",
    "name": "asset_type_t",
    "prefix": "ASSET_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "asset_info对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型。",
        "name": "asset_info_get_type",
        "return": {
          "type": "uint16_t",
          "desc": "返回类型。"
        }
      },
      {
        "params": [
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "asset_info对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取名称。",
        "name": "asset_info_get_name",
        "return": {
          "type": "const char*",
          "desc": "返回名称。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "type",
        "desc": "类型。",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "subtype",
        "desc": "子类型。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "is_in_rom",
        "desc": "资源是否在ROM中。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "size",
        "desc": "大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "refcount",
        "desc": "引用计数。\nis\\_in\\_rom == FALSE时才有效。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": "名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/asset_info.h",
    "desc": "单个资源的描述信息。",
    "name": "asset_info_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint8_t",
            "name": "r",
            "desc": "红色通道。"
          },
          {
            "type": "uint8_t",
            "name": "b",
            "desc": "蓝色通道。"
          },
          {
            "type": "uint8_t",
            "name": "g",
            "desc": "绿色通道。"
          },
          {
            "type": "uint8_t",
            "name": "a",
            "desc": "alpha通道。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建color对象。\n\n> 主要供脚本语言使用。",
        "name": "color_create",
        "return": {
          "type": "color_t*",
          "desc": "color对象。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "css类似的颜色值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "创建color对象。\n\n> 主要供脚本语言使用。",
        "name": "color_from_str",
        "return": {
          "type": "color_t*",
          "desc": "color对象。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取红色通道的值。\n\n> 主要供脚本语言使用。",
        "name": "color_r",
        "return": {
          "type": "uint8_t",
          "desc": "返回红色通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取绿色通道的值。\n\n> 主要供脚本语言使用。",
        "name": "color_g",
        "return": {
          "type": "uint8_t",
          "desc": "返回绿色通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取蓝色通道的值。\n\n> 主要供脚本语言使用。",
        "name": "color_b",
        "return": {
          "type": "uint8_t",
          "desc": "返回蓝色通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取alpha通道的值。\n\n> 主要供脚本语言使用。",
        "name": "color_a",
        "return": {
          "type": "uint8_t",
          "desc": "返回alpha通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取颜色值。\n\n> 主要供脚本语言使用。",
        "name": "color_get_color",
        "return": {
          "type": "uint32_t",
          "desc": "返回颜色值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "color",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为color对象。\n\n> 供脚本语言使用。",
        "name": "color_cast",
        "return": {
          "type": "color_t*",
          "desc": "color对象。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁color对象。\n> 主要供脚本语言使用。",
        "name": "color_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "color",
        "desc": "颜色的数值。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "writable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/color.h",
    "desc": "颜色。",
    "name": "color_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建date_time对象，并初始为当前日期和时间(一般供脚本语言中使用)。",
        "name": "date_time_create",
        "return": {
          "type": "date_time_t*",
          "desc": "返回date_time对象。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "year",
            "desc": "年。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置年。",
        "name": "date_time_set_year",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "month",
            "desc": "月。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置月。",
        "name": "date_time_set_month",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "day",
            "desc": "日。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置日。",
        "name": "date_time_set_day",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "hour",
            "desc": "小时。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置小时。",
        "name": "date_time_set_hour",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "minute",
            "desc": "分钟。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置分钟。",
        "name": "date_time_set_minute",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "second",
            "desc": "秒。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置秒。",
        "name": "date_time_set_second",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前时间。",
        "name": "date_time_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint64_t",
            "name": "time",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "从time转换而来。",
        "name": "date_time_from_time",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "转换成time。",
        "name": "date_time_to_time",
        "return": {
          "type": "uint64_t",
          "desc": "返回time。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "int64_t",
            "name": "delta",
            "desc": "偏移量(s)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "加上一个偏移量(s)。",
        "name": "date_time_add_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "year",
            "desc": "年份。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "是否是闰年。",
        "name": "date_time_is_leap",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是，否则表示否。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "year",
            "desc": "年份。"
          },
          {
            "type": "uint32_t",
            "name": "montn",
            "desc": "月份(1-12)。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取指定年份月份的天数。",
        "name": "date_time_get_days",
        "return": {
          "type": "int32_t",
          "desc": "返回大于0表示天数，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "year",
            "desc": "年份。"
          },
          {
            "type": "uint32_t",
            "name": "montn",
            "desc": "月份(1-12)。"
          },
          {
            "type": "uint32_t",
            "name": "day",
            "desc": "日(1-31)。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取指定日期是周几(0-6, Sunday = 0)。。",
        "name": "date_time_get_wday",
        "return": {
          "type": "int32_t",
          "desc": "返回大于等于0表示周几(0-6)，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "montn",
            "desc": "月份(1-12)。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取指定月份的英文名称(简写)。",
        "name": "date_time_get_month_name",
        "return": {
          "type": "const char*",
          "desc": "返回指定月份的英文名称(简写)。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "wday",
            "desc": "星期几(0-6, Sunday = 0)。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取周几的英文名称(简写)。",
        "name": "date_time_get_wday_name",
        "return": {
          "type": "const char*",
          "desc": "返回指定周几的英文名称(简写)。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁date_time对象(一般供脚本语言中使用)。",
        "name": "date_time_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "second",
        "desc": "秒(0 - 59)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "minute",
        "desc": "分(0 - 59)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "hour",
        "desc": "时(0 - 23)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "day",
        "desc": "日(1-31)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "wday",
        "desc": "星期几(0-6, Sunday = 0)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "month",
        "desc": "月(1-12)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "year",
        "desc": "年。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/date_time.h",
    "desc": "日期时间。\n\n> 在嵌入式平台中，在系统初始时，需要调用date\\_time\\_global\\_init设置实际获取/设置系统时间的函数。",
    "name": "date_time_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "缓动作动画常量定义。",
    "consts": [
      {
        "desc": "EASING_LINEAR。",
        "name": "EASING_LINEAR"
      },
      {
        "desc": "EASING_QUADRATIC_IN",
        "name": "EASING_QUADRATIC_IN"
      },
      {
        "desc": "EASING_QUADRATIC_OUT",
        "name": "EASING_QUADRATIC_OUT"
      },
      {
        "desc": "EASING_QUADRATIC_INOUT",
        "name": "EASING_QUADRATIC_INOUT"
      },
      {
        "desc": "EASING_CUBIC_IN",
        "name": "EASING_CUBIC_IN"
      },
      {
        "desc": "EASING_CUBIC_OUT",
        "name": "EASING_CUBIC_OUT"
      },
      {
        "desc": "EASING_SIN_IN",
        "name": "EASING_SIN_IN"
      },
      {
        "desc": "EASING_SIN_OUT",
        "name": "EASING_SIN_OUT"
      },
      {
        "desc": "EASING_SIN_OUT",
        "name": "EASING_SIN_INOUT"
      },
      {
        "desc": "EASING_POW_IN",
        "name": "EASING_POW_IN"
      },
      {
        "desc": "EASING_POW_OUT",
        "name": "EASING_POW_OUT"
      },
      {
        "desc": "EASING_POW_INOUT",
        "name": "EASING_POW_INOUT"
      },
      {
        "desc": "EASING_CIRCULAR_IN",
        "name": "EASING_CIRCULAR_IN"
      },
      {
        "desc": "EASING_CIRCULAR_OUT",
        "name": "EASING_CIRCULAR_OUT"
      },
      {
        "desc": "EASING_CIRCULAR_INOUT",
        "name": "EASING_CIRCULAR_INOUT"
      },
      {
        "desc": "EASING_ELASTIC_IN",
        "name": "EASING_ELASTIC_IN"
      },
      {
        "desc": "EASING_ELASTIC_OUT",
        "name": "EASING_ELASTIC_OUT"
      },
      {
        "desc": "EASING_ELASTIC_INOUT",
        "name": "EASING_ELASTIC_INOUT"
      },
      {
        "desc": "EASING_BACK_IN",
        "name": "EASING_BACK_IN"
      },
      {
        "desc": "EASING_BACK_OUT",
        "name": "EASING_BACK_OUT"
      },
      {
        "desc": "EASING_BACK_INOUT",
        "name": "EASING_BACK_INOUT"
      },
      {
        "desc": "EASING_BOUNCE_IN",
        "name": "EASING_BOUNCE_IN"
      },
      {
        "desc": "EASING_BOUNCE_OUT",
        "name": "EASING_BOUNCE_OUT"
      },
      {
        "desc": "EASING_BOUNCE_INOUT",
        "name": "EASING_BOUNCE_INOUT"
      }
    ],
    "header": "tkc/easing.h",
    "name": "easing_type_t",
    "prefix": "EASING_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/idle_manager.h",
    "desc": "idle_manager_t管理器。",
    "name": "idle_manager_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "MIME_TYPE。",
    "consts": [
      {
        "desc": "\"application/envoy\"。",
        "name": "MIME_TYPE_APPLICATION_ENVOY"
      },
      {
        "desc": "\"application/fractals\"。",
        "name": "MIME_TYPE_APPLICATION_FRACTALS"
      },
      {
        "desc": "\"application/futuresplash\"。",
        "name": "MIME_TYPE_APPLICATION_FUTURESPLASH"
      },
      {
        "desc": "\"application/hta\"。",
        "name": "MIME_TYPE_APPLICATION_HTA"
      },
      {
        "desc": "\"application/json\"。",
        "name": "MIME_TYPE_APPLICATION_JSON"
      },
      {
        "desc": "\"application/ubjson\"。",
        "name": "MIME_TYPE_APPLICATION_UBJSON"
      },
      {
        "desc": "\"application/mac-binhex40\"。",
        "name": "MIME_TYPE_APPLICATION_MAC_BINHEX40"
      },
      {
        "desc": "\"application/msword\"。",
        "name": "MIME_TYPE_APPLICATION_MSWORD"
      },
      {
        "desc": "\"application/octet-stream\"。",
        "name": "MIME_TYPE_APPLICATION_OCTET_STREAM"
      },
      {
        "desc": "\"application/oda\"。",
        "name": "MIME_TYPE_APPLICATION_ODA"
      },
      {
        "desc": "\"application/olescript\"。",
        "name": "MIME_TYPE_APPLICATION_OLESCRIPT"
      },
      {
        "desc": "\"application/pdf\"。",
        "name": "MIME_TYPE_APPLICATION_PDF"
      },
      {
        "desc": "\"application/pics-rules\"。",
        "name": "MIME_TYPE_APPLICATION_PICS_RULES"
      },
      {
        "desc": "\"application/pkcs10\"。",
        "name": "MIME_TYPE_APPLICATION_PKCS10"
      },
      {
        "desc": "\"application/pkix-crl\"。",
        "name": "MIME_TYPE_APPLICATION_PKIX_CRL"
      },
      {
        "desc": "\"application/postscript\"。",
        "name": "MIME_TYPE_APPLICATION_POSTSCRIPT"
      },
      {
        "desc": "\"application/rtf\"。",
        "name": "MIME_TYPE_APPLICATION_RTF"
      },
      {
        "desc": "\"application/vnd.ms-excel\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_EXCEL"
      },
      {
        "desc": "\"application/vnd.ms-outlook\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_OUTLOOK"
      },
      {
        "desc": "\"application/vnd.ms-pkicertstore\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_PKICERTSTORE"
      },
      {
        "desc": "\"application/vnd.ms-pkiseccat\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_PKISECCAT"
      },
      {
        "desc": "\"application/vnd.ms-pkistl\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_PKISTL"
      },
      {
        "desc": "\"application/vnd.ms-powerpoint\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_POWERPOINT"
      },
      {
        "desc": "\"application/vnd.ms-project\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_PROJECT"
      },
      {
        "desc": "\"application/vnd.ms-works\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_WORKS"
      },
      {
        "desc": "\"application/winhlp\"。",
        "name": "MIME_TYPE_APPLICATION_WINHLP"
      },
      {
        "desc": "\"application/x-bcpio\"。",
        "name": "MIME_TYPE_APPLICATION_X_BCPIO"
      },
      {
        "desc": "\"application/x-cdf\"。",
        "name": "MIME_TYPE_APPLICATION_X_CDF"
      },
      {
        "desc": "\"application/x-compress\"。",
        "name": "MIME_TYPE_APPLICATION_X_COMPRESS"
      },
      {
        "desc": "\"application/x-compressed\"。",
        "name": "MIME_TYPE_APPLICATION_X_COMPRESSED"
      },
      {
        "desc": "\"application/x-cpio\"。",
        "name": "MIME_TYPE_APPLICATION_X_CPIO"
      },
      {
        "desc": "\"application/x-csh\"。",
        "name": "MIME_TYPE_APPLICATION_X_CSH"
      },
      {
        "desc": "\"application/x-director\"。",
        "name": "MIME_TYPE_APPLICATION_X_DIRECTOR"
      },
      {
        "desc": "\"application/x-dvi\"。",
        "name": "MIME_TYPE_APPLICATION_X_DVI"
      },
      {
        "desc": "\"application/x-gtar\"。",
        "name": "MIME_TYPE_APPLICATION_X_GTAR"
      },
      {
        "desc": "\"application/x-gzip\"。",
        "name": "MIME_TYPE_APPLICATION_X_GZIP"
      },
      {
        "desc": "\"application/x-hdf\"。",
        "name": "MIME_TYPE_APPLICATION_X_HDF"
      },
      {
        "desc": "\"application/x-iphone\"。",
        "name": "MIME_TYPE_APPLICATION_X_IPHONE"
      },
      {
        "desc": "\"application/x-javascript\"。",
        "name": "MIME_TYPE_APPLICATION_X_JAVASCRIPT"
      },
      {
        "desc": "\"application/x-latex\"。",
        "name": "MIME_TYPE_APPLICATION_X_LATEX"
      },
      {
        "desc": "\"application/x-msaccess\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSACCESS"
      },
      {
        "desc": "\"application/x-mscardfile\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSCARDFILE"
      },
      {
        "desc": "\"application/x-msclip\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSCLIP"
      },
      {
        "desc": "\"application/x-msdownload\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSDOWNLOAD"
      },
      {
        "desc": "\"application/x-msmediaview\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSMEDIAVIEW"
      },
      {
        "desc": "\"application/x-msmetafile\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSMETAFILE"
      },
      {
        "desc": "\"application/x-msmoney\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSMONEY"
      },
      {
        "desc": "\"application/x-mspublisher\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSPUBLISHER"
      },
      {
        "desc": "\"application/x-msschedule\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSSCHEDULE"
      },
      {
        "desc": "\"application/x-msterminal\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSTERMINAL"
      },
      {
        "desc": "\"application/x-mswrite\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSWRITE"
      },
      {
        "desc": "\"application/x-netcdf\"。",
        "name": "MIME_TYPE_APPLICATION_X_NETCDF"
      },
      {
        "desc": "\"application/x-perfmon\"。",
        "name": "MIME_TYPE_APPLICATION_X_PERFMON"
      },
      {
        "desc": "\"application/x-pkcs12\"。",
        "name": "MIME_TYPE_APPLICATION_X_PKCS12"
      },
      {
        "desc": "\"application/x-sh\"。",
        "name": "MIME_TYPE_APPLICATION_X_SH"
      },
      {
        "desc": "\"application/x-shar\"。",
        "name": "MIME_TYPE_APPLICATION_X_SHAR"
      },
      {
        "desc": "\"application/x-shockwave-flash\"。",
        "name": "MIME_TYPE_APPLICATION_X_SHOCKWAVE_FLASH"
      },
      {
        "desc": "\"application/x-stuffit\"。",
        "name": "MIME_TYPE_APPLICATION_X_STUFFIT"
      },
      {
        "desc": "\"application/x-sv4cpio\"。",
        "name": "MIME_TYPE_APPLICATION_X_SV4CPIO"
      },
      {
        "desc": "\"application/x-sv4crc\"。",
        "name": "MIME_TYPE_APPLICATION_X_SV4CRC"
      },
      {
        "desc": "\"application/x-tar\"。",
        "name": "MIME_TYPE_APPLICATION_X_TAR"
      },
      {
        "desc": "\"application/x-tcl\"。",
        "name": "MIME_TYPE_APPLICATION_X_TCL"
      },
      {
        "desc": "\"application/x-tex\"。",
        "name": "MIME_TYPE_APPLICATION_X_TEX"
      },
      {
        "desc": "\"application/x-texinfo\"。",
        "name": "MIME_TYPE_APPLICATION_X_TEXINFO"
      },
      {
        "desc": "\"application/x-troff\"。",
        "name": "MIME_TYPE_APPLICATION_X_TROFF"
      },
      {
        "desc": "\"application/x-ustar\"。",
        "name": "MIME_TYPE_APPLICATION_X_USTAR"
      },
      {
        "desc": "\"application/zip\"。",
        "name": "MIME_TYPE_APPLICATION_ZIP"
      },
      {
        "desc": "\"audio/basic\"。",
        "name": "MIME_TYPE_AUDIO_BASIC"
      },
      {
        "desc": "\"audio/mid\"。",
        "name": "MIME_TYPE_AUDIO_MID"
      },
      {
        "desc": "\"audio/mpeg\"。",
        "name": "MIME_TYPE_AUDIO_MPEG"
      },
      {
        "desc": "\"audio/x-aiff\"。",
        "name": "MIME_TYPE_AUDIO_X_AIFF"
      },
      {
        "desc": "\"audio/x-mpegurl\"。",
        "name": "MIME_TYPE_AUDIO_X_MPEGURL"
      },
      {
        "desc": "\"audio/x-wav\"。",
        "name": "MIME_TYPE_AUDIO_X_WAV"
      },
      {
        "desc": "\"image/bmp\"。",
        "name": "MIME_TYPE_IMAGE_BMP"
      },
      {
        "desc": "\"image/cis-cod\"。",
        "name": "MIME_TYPE_IMAGE_CIS_COD"
      },
      {
        "desc": "\"image/gif\"。",
        "name": "MIME_TYPE_IMAGE_GIF"
      },
      {
        "desc": "\"image/ief\"。",
        "name": "MIME_TYPE_IMAGE_IEF"
      },
      {
        "desc": "\"image/jpeg\"。",
        "name": "MIME_TYPE_IMAGE_JPEG"
      },
      {
        "desc": "\"image/pipeg\"。",
        "name": "MIME_TYPE_IMAGE_PIPEG"
      },
      {
        "desc": "\"image/svg+xml\"。",
        "name": "MIME_TYPE_IMAGE_SVG_XML"
      },
      {
        "desc": "\"image/tiff\"。",
        "name": "MIME_TYPE_IMAGE_TIFF"
      },
      {
        "desc": "\"image/x-cmx\"。",
        "name": "MIME_TYPE_IMAGE_X_CMX"
      },
      {
        "desc": "\"image/x-icon\"。",
        "name": "MIME_TYPE_IMAGE_X_ICON"
      },
      {
        "desc": "\"image/x-rgb\"。",
        "name": "MIME_TYPE_IMAGE_X_RGB"
      },
      {
        "desc": "\"image/x-xbitmap\"。",
        "name": "MIME_TYPE_IMAGE_X_XBITMAP"
      },
      {
        "desc": "\"image/x-xpixmap\"。",
        "name": "MIME_TYPE_IMAGE_X_XPIXMAP"
      },
      {
        "desc": "\"image/x-xwindowdump\"。",
        "name": "MIME_TYPE_IMAGE_X_XWINDOWDUMP"
      },
      {
        "desc": "\"message/rfc822\"。",
        "name": "MIME_TYPE_MESSAGE_RFC822"
      },
      {
        "desc": "\"text/css\"。",
        "name": "MIME_TYPE_TEXT_CSS"
      },
      {
        "desc": "\"text/h323\"。",
        "name": "MIME_TYPE_TEXT_H323"
      },
      {
        "desc": "\"text/html\"。",
        "name": "MIME_TYPE_TEXT_HTML"
      },
      {
        "desc": "\"text/iuls\"。",
        "name": "MIME_TYPE_TEXT_IULS"
      },
      {
        "desc": "\"text/plain\"。",
        "name": "MIME_TYPE_TEXT_PLAIN"
      },
      {
        "desc": "\"text/richtext\"。",
        "name": "MIME_TYPE_TEXT_RICHTEXT"
      },
      {
        "desc": "\"text/scriptlet\"。",
        "name": "MIME_TYPE_TEXT_SCRIPTLET"
      },
      {
        "desc": "\"text/webviewhtml\"。",
        "name": "MIME_TYPE_TEXT_WEBVIEWHTML"
      },
      {
        "desc": "\"text/x-component\"。",
        "name": "MIME_TYPE_TEXT_X_COMPONENT"
      },
      {
        "desc": "\"text/x-setext\"。",
        "name": "MIME_TYPE_TEXT_X_SETEXT"
      },
      {
        "desc": "\"text/x-vcard\"。",
        "name": "MIME_TYPE_TEXT_X_VCARD"
      },
      {
        "desc": "\"video/mpeg\"。",
        "name": "MIME_TYPE_VIDEO_MPEG"
      },
      {
        "desc": "\"video/quicktime\"。",
        "name": "MIME_TYPE_VIDEO_QUICKTIME"
      },
      {
        "desc": "\"video/x-msvideo\"。",
        "name": "MIME_TYPE_VIDEO_X_MSVIDEO"
      }
    ],
    "header": "tkc/mime_types.h",
    "name": "MIME_TYPE",
    "prefix": "MIME_TYPE_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建named_value对象。",
        "name": "named_value_create",
        "return": {
          "type": "named_value_t*",
          "desc": "返回named_value对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为named_value对象(供脚本语言使用)。",
        "name": "named_value_cast",
        "return": {
          "type": "named_value_t*",
          "desc": "返回named_value对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置名称。",
        "name": "named_value_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "const value_t*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值。",
        "name": "named_value_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取值对象(主要给脚本语言使用)。",
        "name": "named_value_get_value",
        "return": {
          "type": "value_t*",
          "desc": "返回值对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁named_value对象。",
        "name": "named_value_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": "名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/named_value.h",
    "desc": "命名的值。",
    "name": "named_value_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "对象常见命令定义",
    "consts": [
      {
        "desc": "保存命令",
        "name": "OBJECT_CMD_SAVE"
      },
      {
        "desc": "重新加载命令",
        "name": "OBJECT_CMD_RELOAD"
      },
      {
        "desc": "和前一个属性交换位置\n>参数为属性的名称或路径。",
        "name": "OBJECT_CMD_MOVE_UP"
      },
      {
        "desc": "和后一个属性交换位置\n>参数为属性的名称或路径。",
        "name": "OBJECT_CMD_MOVE_DOWN"
      },
      {
        "desc": "删除属性。\n>参数为属性的名称或路径。",
        "name": "OBJECT_CMD_REMOVE"
      },
      {
        "desc": "删除勾选的属性。\n>参数为属性的名称或路径。",
        "name": "OBJECT_CMD_REMOVE_CHECKED"
      },
      {
        "desc": "清除全部属性。\n>参数为属性的名称或路径。",
        "name": "OBJECT_CMD_CLEAR"
      },
      {
        "desc": "增加子项。\n>参数为属性的名称或路径。",
        "name": "OBJECT_CMD_ADD"
      },
      {
        "desc": "显示对象详细信息。\n>参数为属性的名称或路径。",
        "name": "OBJECT_CMD_DETAIL"
      },
      {
        "desc": "编辑子项。\n>参数为属性的名称或路径。",
        "name": "OBJECT_CMD_EDIT"
      }
    ],
    "header": "tkc/object.h",
    "name": "object_cmd_t",
    "prefix": "OBJECT_CMD_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "对象常见属性定义",
    "consts": [
      {
        "desc": "属性的个数。",
        "name": "OBJECT_PROP_SIZE"
      },
      {
        "desc": "属性是否勾选。",
        "name": "OBJECT_PROP_CHECKED"
      }
    ],
    "header": "tkc/object.h",
    "name": "object_prop_t",
    "prefix": "OBJECT_PROP_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename_pattern",
            "desc": "用来确定文件名的路径和文件名。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "log文件占用最大磁盘空间(字节)。"
          },
          {
            "type": "uint32_t",
            "name": "buff_size",
            "desc": "用于指定print时的buff大小。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "constructor": true
        },
        "desc": "创建rlog对象。\n\n```c\nrlog_t* log = rlog_create(\"./logs/%d.log\", 1020*1024, 256);\nrlog_write(log, \"hello\\n\");\nrlog_destroy(log);\n```",
        "name": "rlog_create",
        "return": {
          "type": "rlog_t*",
          "desc": "返回rlog对象。"
        }
      },
      {
        "params": [
          {
            "type": "rlog_t*",
            "name": "log",
            "desc": "日志对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "日志字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "写入一条日志记录。",
        "name": "rlog_write",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/rlog.h",
    "desc": "循环记录日志(支持多线程访问)。\n如果我们把日志写入文件中，随着时间的推移，日志文件会越来越大，最终占满这个磁盘，出现不可预料的错误。\nrlog提供一个循环记录日志的功能，让日志文件始终不会超出指定的大小，达到指定大小后再从头开始写。\n\n> 为了实现简单，我们把日志文件分成0和1两个文件，先写文件0，到达指定最大值的一半时，再写文件1。\n> 文件1到达指定最大值的一半时，删除文件0，并将文件1改名为文件0，重新创建文件1，继续写文件1，重复此过程。",
    "name": "rlog_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取当前时间(秒)。",
        "name": "time_now_s",
        "return": {
          "type": "uint64_t",
          "desc": "返回当前时间(秒)。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取当前时间(毫秒)。",
        "name": "time_now_ms",
        "return": {
          "type": "uint64_t",
          "desc": "返回当前时间(毫秒)。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取当前时间(微秒)。",
        "name": "time_now_us",
        "return": {
          "type": "uint64_t",
          "desc": "返回当前时间(微秒)。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/time_now.h",
    "desc": "获取当前时间的函数。\n这里的当前时间是相对的，在嵌入式系统一般相对于开机时间。\n它本身并没有任何意义，一般用来计算时间间隔，如实现定时器和动画等等。",
    "name": "time_now_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/timer_manager.h",
    "desc": "定时器管理器。",
    "name": "timer_manager_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "函数返回值常量定义。",
    "consts": [
      {
        "desc": "成功。",
        "name": "RET_OK"
      },
      {
        "desc": "Out of memory。",
        "name": "RET_OOM"
      },
      {
        "desc": "失败。",
        "name": "RET_FAIL"
      },
      {
        "desc": "没有实现/不支持。",
        "name": "RET_NOT_IMPL"
      },
      {
        "desc": "退出。通常用于主循环。",
        "name": "RET_QUIT"
      },
      {
        "desc": "找到。",
        "name": "RET_FOUND"
      },
      {
        "desc": "对象忙。",
        "name": "RET_BUSY"
      },
      {
        "desc": "移出。通常用于定时器。",
        "name": "RET_REMOVE"
      },
      {
        "desc": "重复。通常用于定时器。",
        "name": "RET_REPEAT"
      },
      {
        "desc": "没找到。",
        "name": "RET_NOT_FOUND"
      },
      {
        "desc": "操作完成。",
        "name": "RET_DONE"
      },
      {
        "desc": "停止后续操作。",
        "name": "RET_STOP"
      },
      {
        "desc": "跳过当前项。",
        "name": "RET_SKIP"
      },
      {
        "desc": "继续后续操作。",
        "name": "RET_CONTINUE"
      },
      {
        "desc": "对象属性变化。",
        "name": "RET_OBJECT_CHANGED"
      },
      {
        "desc": "集合数目变化。",
        "name": "RET_ITEMS_CHANGED"
      },
      {
        "desc": "无效参数。",
        "name": "RET_BAD_PARAMS"
      },
      {
        "desc": "超时。",
        "name": "RET_TIMEOUT"
      },
      {
        "desc": "CRC错误。",
        "name": "RET_CRC"
      },
      {
        "desc": "IO错误。",
        "name": "RET_IO"
      },
      {
        "desc": "End of Stream",
        "name": "RET_EOS"
      },
      {
        "desc": "没有改变。",
        "name": "RET_NOT_MODIFIED"
      }
    ],
    "header": "tkc/types_def.h",
    "name": "ret_t",
    "prefix": "RET_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "类型常量定义。",
    "consts": [
      {
        "desc": "无效类型。",
        "name": "VALUE_TYPE_INVALID"
      },
      {
        "desc": "BOOL类型。",
        "name": "VALUE_TYPE_BOOL"
      },
      {
        "desc": "int8_t类型。",
        "name": "VALUE_TYPE_INT8"
      },
      {
        "desc": "uint8_t类型。",
        "name": "VALUE_TYPE_UINT8"
      },
      {
        "desc": "int16_t类型。",
        "name": "VALUE_TYPE_INT16"
      },
      {
        "desc": "uint16_t类型。",
        "name": "VALUE_TYPE_UINT16"
      },
      {
        "desc": "int32_t类型。",
        "name": "VALUE_TYPE_INT32"
      },
      {
        "desc": "uint32_t类型。",
        "name": "VALUE_TYPE_UINT32"
      },
      {
        "desc": "int64_t类型。",
        "name": "VALUE_TYPE_INT64"
      },
      {
        "desc": "uint64_t类型。",
        "name": "VALUE_TYPE_UINT64"
      },
      {
        "desc": "void*类型。",
        "name": "VALUE_TYPE_POINTER"
      },
      {
        "desc": "float_t类型。",
        "name": "VALUE_TYPE_FLOAT"
      },
      {
        "desc": "float类型。",
        "name": "VALUE_TYPE_FLOAT32"
      },
      {
        "desc": "double类型。",
        "name": "VALUE_TYPE_DOUBLE"
      },
      {
        "desc": "char*类型。",
        "name": "VALUE_TYPE_STRING"
      },
      {
        "desc": "wchar_t*类型。",
        "name": "VALUE_TYPE_WSTRING"
      },
      {
        "desc": "object_t*类型。",
        "name": "VALUE_TYPE_OBJECT"
      },
      {
        "desc": "带长度的字符串。",
        "name": "VALUE_TYPE_SIZED_STRING"
      },
      {
        "desc": "二进制数据。",
        "name": "VALUE_TYPE_BINARY"
      },
      {
        "desc": "二进制数据(UBJSON)。",
        "name": "VALUE_TYPE_UBJSON"
      },
      {
        "desc": "特殊用途。",
        "name": "VALUE_TYPE_TOKEN"
      }
    ],
    "header": "tkc/value.h",
    "name": "value_type_t",
    "prefix": "VALUE_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "获取缺省资源管理器。",
        "name": "assets_manager",
        "alias": "assets_manager_instance",
        "return": {
          "type": "assets_manager_t*",
          "desc": "返回asset manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "am",
            "desc": "asset manager对象。"
          },
          {
            "type": "const char*",
            "name": "theme",
            "desc": "主题名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前的主题。",
        "name": "assets_manager_set_theme",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "am",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "资源的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在资源管理器的缓存中查找指定的资源并引用它，如果缓存中不存在，尝试加载该资源。",
        "name": "assets_manager_ref",
        "return": {
          "type": "asset_info_t*",
          "desc": "返回资源。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "am",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          },
          {
            "type": "uint16_t",
            "name": "subtype",
            "desc": "资源的子类型。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "资源的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在资源管理器的缓存中查找指定的资源并引用它，如果缓存中不存在，尝试加载该资源。",
        "name": "assets_manager_ref_ex",
        "return": {
          "type": "asset_info_t*",
          "desc": "返回资源。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "am",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "资源。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "释放指定的资源。",
        "name": "assets_manager_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/assets_manager.h",
    "desc": "资源管理器。\n这里的资源管理器并非Windows下的文件浏览器，而是负责对各种资源，比如字体、窗体样式、图片、界面数据、字符串和其它数据的进行集中管理的组件。引入资源管理器的目的有以下几个：\n\n* 让上层不需要了解存储的方式。\n在没有文件系统时或者内存紧缺时，把资源转成常量数组直接编译到代码中。在有文件系统而且内存充足时，资源放在文件系统中。在有网络时，资源也可以存放在服务器上(暂未实现)。资源管理器为上层提供统一的接口，让上层而不用关心底层的存储方式。\n\n* 让上层不需要了解资源的具体格式。\n比如一个名为earth的图片，没有文件系统或内存紧缺，图片直接用位图数据格式存在ROM中，而有文件系统时，则用PNG格式存放在文件系统中。资源管理器让上层不需要关心图片的格式，访问时指定图片的名称即可(不用指定扩展名)。\n\n* 让上层不需要了解屏幕的密度。\n不同的屏幕密度下需要加载不同的图片，比如MacPro的Retina屏就需要用双倍解析度的图片，否则就出现界面模糊。AWTK以后会支持PC软件和手机软件的开发，所以资源管理器需要为此提供支持，让上层不需关心屏幕的密度。\n\n* 对资源进行内存缓存。\n不同类型的资源使用方式是不一样的，比如字体和窗体样式加载之后会一直使用，UI文件在生成界面之后就暂时不需要了，PNG文件解码之后就只需要保留解码的位图数据即可。资源管理器配合图片管理器等其它组件实现资源的自动缓存。\n\n当从文件系统加载资源时，目录结构要求如下：\n\n```\nassets/{theme}/raw/\nfonts   字体\nimages  图片\nx1   普通密度屏幕的图片。\nx2   2倍密度屏幕的图片。\nx3   3倍密度屏幕的图片。\nxx   密度无关的图片。\nstrings 需要翻译的字符串。\nstyles  窗体样式数据。\nui      UI描述数据。\n```",
    "name": "assets_manager_t",
    "parent": "emitter_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转wheel_event_t对象，主要给脚本语言使用。",
        "name": "wheel_event_cast",
        "return": {
          "type": "wheel_event_t*",
          "desc": "event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "dy",
        "desc": "滚轮的y值。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "alt",
        "desc": "alt键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ctrl",
        "desc": "ctrl键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "shift",
        "desc": "shift键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "滚轮事件。",
    "name": "wheel_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转orientation_event_t对象，主要给脚本语言使用。",
        "name": "orientation_event_cast",
        "return": {
          "type": "orientation_event_t*",
          "desc": "event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "orientation",
        "desc": "屏幕方向。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "滚轮事件。",
    "name": "orientation_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转value_change_event_t对象，主要给脚本语言使用。",
        "name": "value_change_event_cast",
        "return": {
          "type": "value_change_event_t*",
          "desc": "event对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/events.h",
    "desc": "值变化事件。",
    "name": "value_change_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转pointer_event_t对象，主要给脚本语言使用。",
        "name": "pointer_event_cast",
        "return": {
          "type": "pointer_event_t*",
          "desc": "event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "button",
        "desc": "button。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "pressed",
        "desc": "指针是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "alt",
        "desc": "alt键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ctrl",
        "desc": "ctrl键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "cmd",
        "desc": "cmd键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "menu",
        "desc": "menu键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "shift",
        "desc": "shift键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "指针事件。",
    "name": "pointer_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转key_event_t对象，主要给脚本语言使用。",
        "name": "key_event_cast",
        "return": {
          "type": "key_event_t*",
          "desc": "event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "key",
        "desc": "键值。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "alt",
        "desc": "alt键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "lalt",
        "desc": "left alt键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ralt",
        "desc": "right alt键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ctrl",
        "desc": "right alt键是否按下。\nctrl键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "lctrl",
        "desc": "left ctrl键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "rctrl",
        "desc": "right ctrl键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "shift",
        "desc": "shift键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "lshift",
        "desc": "left shift键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "rshift",
        "desc": "right shift键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "cmd",
        "desc": "left shift键是否按下。\ncmd/win键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "menu",
        "desc": "menu键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "capslock",
        "desc": "capslock键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "按键事件。",
    "name": "key_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转paint_event_t对象。主要给脚本语言使用。",
        "name": "paint_event_cast",
        "return": {
          "type": "paint_event_t*",
          "desc": "event 对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "c",
        "desc": "canvas。",
        "type": "canvas_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "绘制事件。",
    "name": "paint_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转window_event_t对象。主要给脚本语言使用。",
        "name": "window_event_cast",
        "return": {
          "type": "window_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "window",
        "desc": "canvas。",
        "type": "widget_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "窗口事件，由窗口管理器触发。",
    "name": "window_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转multi_gesture_event_t对象，主要给脚本语言使用。",
        "name": "multi_gesture_event_cast",
        "return": {
          "type": "multi_gesture_event_t*",
          "desc": "event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": "中心点x坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": "中心点y坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "rotation",
        "desc": "旋转角度(幅度)增量。（单位弧度）",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "distance",
        "desc": "两点间的距离增量。(-1,0)表示缩小，(0-1)表示增加。",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "多点触摸手势事件。",
    "name": "multi_gesture_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称，该图片必须存在于资源管理器。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的图片名称。\n\n> 如果需要显示文件系统中的图片，只需将图片名称换成实际的文件名，并加上\"file://\"前缀即可。",
        "name": "image_base_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "rotation",
            "desc": "旋转角度(幅度)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的旋转角度(仅在WITH_VGCANVAS定义时生效)。",
        "name": "image_base_set_rotation",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "scale_x",
            "desc": "X方向缩放比例。"
          },
          {
            "type": "float_t",
            "name": "scale_y",
            "desc": "Y方向缩放比例。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的缩放比例(仅在WITH_VGCANVAS定义时生效)。",
        "name": "image_base_set_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "anchor_x",
            "desc": "锚点X(0-1)。0在控件左边，0.5在控件中间，1在控件右边。"
          },
          {
            "type": "float_t",
            "name": "anchor_y",
            "desc": "锚点Y(0-1)。0在控件顶部，0.5在控件中间，1在控件底部。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的锚点(仅在WITH_VGCANVAS定义时生效)。",
        "name": "image_base_set_anchor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "selected",
            "desc": "是否被选中。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的选中状态。",
        "name": "image_base_set_selected",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "selectable",
            "desc": "是否可以被选中。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否可以被选中。",
        "name": "image_base_set_selectable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "clickable",
            "desc": "是否可以被点击。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否可以被点击。",
        "name": "image_base_set_clickable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_base对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为image_base对象(供脚本语言使用)。",
        "name": "image_base_cast",
        "return": {
          "type": "widget_t*",
          "desc": "image_base对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_CLICK",
        "desc": "点击事件。",
        "type": "pointer_event_t"
      }
    ],
    "properties": [
      {
        "name": "image",
        "desc": "图片的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anchor_x",
        "desc": "锚点X(0-1)。0在控件左边，0.5在控件中间，1在控件右边。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anchor_y",
        "desc": "锚点Y(0-1)。0在控件顶部，0.5在控件中间，1在控件底部。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "scale_x",
        "desc": "控件在X方向上的缩放比例。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "scale_y",
        "desc": "控件在Y方向上的缩放比例。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "rotation",
        "desc": "控件的旋转角度(幅度)。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "clickable",
        "desc": "点击时，是否触发EVT_CLICK事件。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selectable",
        "desc": "是否设置选中状态。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected",
        "desc": "当前是否被选中。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/image_base.h",
    "desc": "图片控件基类。\n\n本类把图片相关控件的公共行为进行抽象，放到一起方便重用。目前已知的具体实现如下图：\n\n```graphviz\n[default_style]\n\nimage_t -> image_base_t[arrowhead = \"empty\"]\nsvg_image_t -> image_base_t[arrowhead = \"empty\"]\ngif_image_t -> image_base_t[arrowhead = \"empty\"]\n```\n\n> 本类是一个抽象类，不能进行实例化。请在应用程序中使用具体的类，如image\\_t。\n\n如果需要显示文件系统中的图片，只需将图片名称换成实际的文件名，并加上\"file://\"前缀即可。如：\n\n```\n<image draw_type=\"center\" image=\"file://./design/default/images/xx/flag_CN.png\" />\n<gif image=\"file://./design/default/images/x2/bee.gif\" />\n<svg image=\"file://./design/default/images/svg/china.bsvg\" />\n```",
    "name": "image_base_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置style的名称。",
        "name": "style_mutable_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          },
          {
            "type": "const char*",
            "name": "state",
            "desc": "控件状态。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "uint32_t",
            "name": "val",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定名称整数格式的值。",
        "name": "style_mutable_set_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "s",
            "desc": "style对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为style_mutable对象。",
        "name": "style_mutable_cast",
        "return": {
          "type": "style_t*",
          "desc": "style对象。"
        }
      },
      {
        "params": [
          {
            "type": "style_t*",
            "name": "default_style",
            "desc": "缺省的style。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建style\\_mutable对象。\n\n> 除了测试程序外不需要直接调用，widget会通过style\\_factory\\_create创建。",
        "name": "style_mutable_create",
        "return": {
          "type": "style_t*",
          "desc": "style对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": "名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/style_mutable.h",
    "desc": "可变的style(可实时修改并生效，主要用于在designer中被编辑的控件，或者一些特殊控件)。\n\nstyle\\_mutable也对style\\_const进行了包装，当用户没修改某个值时，便从style\\_const中获取。",
    "name": "style_mutable_t",
    "parent": "style_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window_base对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为window_base对象(供脚本语言使用)。",
        "name": "window_base_cast",
        "return": {
          "type": "widget_t*",
          "desc": "window_base对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_WINDOW_WILL_OPEN",
        "desc": "窗口即将打开事件。 如果有窗口动画，在窗口动画开始前触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_WINDOW_OPEN",
        "desc": "窗口打开事件。 如果有窗口动画，在窗口动画完成时触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。",
        "type": "event_t"
      },
      {
        "name": "EVT_WINDOW_TO_BACKGROUND",
        "desc": "窗口被切换到后台事件。 打开新窗口时，当前窗口被切换到后台时，对当前窗口触发本事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_WINDOW_TO_FOREGROUND",
        "desc": "窗口被切换到前台事件。 关闭当前窗口时，前一个窗口被切换到前台时，对前一个窗口触发本事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_WINDOW_CLOSE",
        "desc": "窗口关闭事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_WINDOW_LOAD",
        "desc": "窗口加载完成事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_REQUEST_CLOSE_WINDOW",
        "desc": "请求关闭窗口的事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_LOCALE_CHANGED",
        "desc": "locale改变的事件。",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "theme",
        "desc": "窗体样式资源的名称。\n每个窗口都可以有独立的窗体样式文件，如果没指定，则使用系统缺省的窗体样式文件。\n窗体样式是一个XML文件，放在assets/raw/styles目录下。\n请参考[窗体样式](https://github.com/zlgopen/awtk/blob/master/docs/theme.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "design_w",
        "desc": "设计时宽度。",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "design_h",
        "desc": "设计时高度。",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_scale_children_x",
        "desc": "窗口大小与设计时大小不同时，是否自动调整子控件的x坐标。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_scale_children_y",
        "desc": "窗口大小与设计时大小不同时，是否自动调整子控件的y坐标。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_scale_children_w",
        "desc": "窗口大小与设计时大小不同时，是否自动调整子控件的宽度。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_scale_children_h",
        "desc": "窗口大小与设计时大小不同时，是否自动调整子控件的高度。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "disable_anim",
        "desc": "禁用窗口动画。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "closable",
        "desc": "收到EVT_REQUEST_CLOSE_WINDOW是否自动关闭窗口。\n\n如果关闭窗口时，需要用户确认:\n\n* 1.将closable设置为WINDOW\\_CLOSABLE\\_CONFIRM\n\n* 2.处理窗口的EVT\\_REQUEST\\_CLOSE\\_WINDOW事件\n\n> closable在XML中取值为：yes/no/confirm，缺省为yes。",
        "type": "window_closable_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "open_anim_hint",
        "desc": "打开窗口动画的名称。\n请参考[窗口动画](https://github.com/zlgopen/awtk/blob/master/docs/window_animator.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "close_anim_hint",
        "desc": "关闭窗口动画的名称。\n请参考[窗口动画](https://github.com/zlgopen/awtk/blob/master/docs/window_animator.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "move_focus_prev_key",
        "desc": "向前移动焦点的键值。\n\n请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "move_focus_next_key",
        "desc": "向后移动焦点的键值。\n\n请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "move_focus_up_key",
        "desc": "向上移动焦点的键值。\n\n请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "move_focus_down_key",
        "desc": "向下移动焦点的键值。\n\n请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "move_focus_left_key",
        "desc": "向左移动焦点的键值。\n\n请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "move_focus_right_key",
        "desc": "向右移动焦点的键值。\n\n请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "single_instance",
        "desc": "单例。如果窗口存在，先关闭再打开。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "strongly_focus",
        "desc": "点击非focusable控件时，是否让当前焦点控件失去焦点。比如点击窗口空白区域，是否让编辑器失去焦点。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/window_base.h",
    "desc": "窗口。\n\n本类把窗口相关的公共行为进行抽象，放到一起方便重用。目前已知的具体实现如下图：\n\n```graphviz\n[default_style]\n\nwindow_t -> window_base_t[arrowhead = \"empty\"]\npopup_t -> window_base_t[arrowhead = \"empty\"]\ndialog_t -> window_base_t[arrowhead = \"empty\"]\nsystem_bar_t -> window_base_t[arrowhead = \"empty\"]\ncalibration_win_t -> window_base_t[arrowhead = \"empty\"]\n```\n\n> 本类是一个抽象类，不能进行实例化。请在应用程序中使用具体的类，如window\\_t。",
    "name": "window_base_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "cast": true
        },
        "desc": "获取全局window_manager对象",
        "name": "window_manager",
        "alias": "window_manager_instance",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window_manager对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为window_manager对象(供脚本语言使用)。",
        "name": "window_manager_cast",
        "return": {
          "type": "widget_t*",
          "desc": "window_manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取最上面的主窗口。",
        "name": "window_manager_get_top_main_window",
        "return": {
          "type": "widget_t*",
          "desc": "返回窗口对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取最上面的窗口。",
        "name": "window_manager_get_top_window",
        "return": {
          "type": "widget_t*",
          "desc": "返回窗口对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取前一个的窗口。",
        "name": "window_manager_get_prev_window",
        "return": {
          "type": "widget_t*",
          "desc": "返回窗口对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指针当前的X坐标。",
        "name": "window_manager_get_pointer_x",
        "return": {
          "type": "xy_t",
          "desc": "返回指针当前的X坐标。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指针当前的Y坐标。",
        "name": "window_manager_get_pointer_y",
        "return": {
          "type": "xy_t",
          "desc": "返回指针当前的X坐标。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指针当前是否按下。",
        "name": "window_manager_get_pointer_pressed",
        "return": {
          "type": "bool_t",
          "desc": "返回指针当前是否按下。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取当前窗口动画是否正在播放。",
        "name": "window_manager_is_animating",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示正在播放，FALSE表示没有播放。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "bool_t",
            "name": "show_fps",
            "desc": "是否显示FPS。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否显示FPS。",
        "name": "window_manager_set_show_fps",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "uint32_t",
            "name": "max_fps",
            "desc": "最大帧率。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "限制最大帧率。\n\n> TK\\_MAX\\_LOOP\\_FPS/max\\_fps最好是整数，比如TK\\_MAX\\_LOOP\\_FPS为120，max\\_fps可取60/30/20/10等。",
        "name": "window_manager_set_max_fps",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "bool_t",
            "name": "ignore_input_events",
            "desc": "是否忽略用户输入事件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否忽略用户输入事件。",
        "name": "window_manager_set_ignore_input_events",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "uint32_t",
            "name": "screen_saver_time",
            "desc": "屏保时间(单位毫秒), 为0关闭屏保。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置屏保时间。",
        "name": "window_manager_set_screen_saver_time",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "const char*",
            "name": "cursor",
            "desc": "图片名称(从图片管理器中加载)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置鼠标指针。",
        "name": "window_manager_set_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "请求关闭顶层窗口。\n\n> 如果顶层窗口时模态对话框，用DIALOG\\_QUIT\\_NONE调用dialog\\_quit。",
        "name": "window_manager_back",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "回到主窗口，关闭之上的全部窗口。\n\n> 如果顶层窗口时模态对话框，用DIALOG\\_QUIT\\_NONE调用dialog\\_quit。",
        "name": "window_manager_back_to_home",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "回到指定的窗口，关闭之上的全部窗口。\n\n> 如果顶层窗口时模态对话框，用DIALOG\\_QUIT\\_NONE调用dialog\\_quit。",
        "name": "window_manager_back_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "调整原生窗口的大小。",
        "name": "window_manager_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "关闭全部窗口。",
        "name": "window_manager_close_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_TOP_WINDOW_CHANGED",
        "desc": "顶层窗口改变的事件。",
        "type": "window_event_t"
      },
      {
        "name": "EVT_SCREEN_SAVER",
        "desc": "在指定的时间内(WITH_SCREEN_SAVER_TIME)，没有用户输入事件，由窗口管理器触发。",
        "type": "window_event_t"
      },
      {
        "name": "EVT_ORIENTATION_CHANGED",
        "desc": "屏幕旋转事件。",
        "type": "event_t"
      }
    ],
    "properties": [],
    "header": "base/window_manager.h",
    "desc": "窗口管理器。",
    "name": "window_manager_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建canvas_widget对象",
        "name": "canvas_widget_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "canvas_widget对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为canvas_widget对象(供脚本语言使用)。",
        "name": "canvas_widget_cast",
        "return": {
          "type": "widget_t*",
          "desc": "canvas_widget对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "canvas_widget/canvas_widget.h",
    "desc": "画布控件。\n\n画布控件让开发者可以自己在控件上绘制需要的内容。\n\ncanvas\\_widget\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于canvas\\_widget\\_t控件。\n\n在xml中使用\"canvas\"标签创建画布控件。如：\n\n```xml\n<canvas name=\"paint_vgcanvas\" x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" />\n```\n\n> 更多用法请参考：\n[canvas_widget.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/vgcanvas.xml)\n\n在c代码中使用函数canvas\\_widget\\_create创建画布控件。如：\n\n```c\nwidget_t* canvas = canvas_widget_create(win, 0, 0, win->w, win->h);\n```\n\n> 创建之后，需要用widget\\_on注册EVT\\_PAINT事件，并在EVT\\_PAINT事件处理函数中绘制。\n\n```c\nwidget_on(canvas, EVT_PAINT, on_paint_event, canvas);\n```\n\n绘制时，可以通过canvas接口去绘制，也可以通过vgcanvas接口去绘制。\n先从evt获取canvas对象，再通过canvas\\_get\\_vgcanvas从canvas中获取vgcanvas对象。\n\n```c\n\nstatic ret_t on_paint_event(void* ctx, event_t* evt) {\nwidget_t* canvas_widget = WIDGET(ctx);\ncanvas_t* c = paint_event_cast(evt)->c;\nvgcanvas_t* vg = canvas_get_vgcanvas(c);\ncolor_t bg = color_init(0xe0, 0xe0, 0xe0, 0xff);\ncolor_t tc = color_init(0, 0, 0, 0xff);\nrect_t r = rect_init(canvas_widget->x, canvas_widget->y, canvas_widget->w, canvas_widget->h);\n\nvgcanvas_save(vg);\nvgcanvas_clip_rect(vg, r.x, r.y, r.w, r.h);\nvgcanvas_translate(vg, r.x, r.y);\n\n...\n\nvgcanvas_restore(vg);\n\nreturn RET_OK;\n}\n```\n\n> 完整示例请参考：\n[canvas demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/canvas.c)\n\n参考：\n\n* [canvas接口描述](canvas_t.md)\n* [vgcanvas接口描述](vgcanvas_t.md)",
    "name": "canvas_widget_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建color_component对象",
        "name": "color_component_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_component对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为color_component对象(供脚本语言使用)。",
        "name": "color_component_cast",
        "return": {
          "type": "widget_t*",
          "desc": "color_component对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_CHANGING",
        "desc": "颜色正在改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [],
    "header": "color_picker/color_component.h",
    "desc": "颜色选择器的颜色分量。\n控件的名称有严格规定：\nCOLOR_PICKER_CHILD_SV: 水平为Value/Brightness(递增)，垂直为Saturation(递减)。\nCOLOR_PICKER_CHILD_H: 水平为同色，垂直为Hue(递减)。",
    "name": "color_component_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建color_picker对象",
        "name": "color_picker_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置颜色。",
        "name": "color_picker_set_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_picker对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为color_picker对象(供脚本语言使用)。",
        "name": "color_picker_cast",
        "return": {
          "type": "widget_t*",
          "desc": "color_picker对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(颜色)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(颜色)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "颜色。",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "color_picker/color_picker.h",
    "desc": "颜色选择器。\n\ncolor\\_picker\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于color\\_picker\\_t控件。\n\n在xml中使用\"color\\_picker\"标签创建颜色选择器控件。如：\n\n```xml\n<color_picker x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" value=\"orange\">\n<color_component x=\"0\" y=\"0\" w=\"200\" h=\"200\" name=\"sv\"/>\n<color_component x=\"210\" y=\"0\" w=\"20\" h=\"200\" name=\"h\"/>\n<color_tile x=\"0\" y=\"210\" w=\"50%\" h=\"20\" name=\"new\" bg_color=\"green\"/>\n<color_tile x=\"right\" y=\"210\" w=\"50%\" h=\"20\" name=\"old\" bg_color=\"blue\"/>\n</color_picker>\n```\n\n> 更多用法请参考：\n[color\\_picker](https://github.com/zlgopen/awtk/blob/master/design/default/ui/color_picker.xml)\n\n其中的子控件必须按下列规则命名：\n\n* r 红色分量。可以是spin_box、edit和slider。\n* g 绿色分量。可以是spin_box、edit和slider。\n* b 蓝色分量。可以是spin_box、edit和slider。\n* h Hue分量。可以是spin_box、edit、slider和color_component。\n* s Saturation分量。可以是spin_box、edit和slider。\n* v Value/Brightness分量。可以是spin_box、edit和slider。\n* sv Saturation和Value/Brightness分量。可以是color_component。\n* old 旧的值。可以是spin_box、edit和color_tile。\n* new 新的值。可以是spin_box、edit和color_tile。",
    "name": "color_picker_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建draggable对象",
        "name": "draggable_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "draggable对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为draggable对象(供脚本语言使用)。",
        "name": "draggable_cast",
        "return": {
          "type": "widget_t*",
          "desc": "draggable对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "top",
            "desc": "拖动范围的顶部限制。缺省为父控件的顶部。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置top。",
        "name": "draggable_set_top",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "bottom",
            "desc": "拖动范围的底部限制。缺省为父控件的底部。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置bottom。",
        "name": "draggable_set_bottom",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "left",
            "desc": "拖动范围的左边限制。缺省为父控件的左边。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置left。",
        "name": "draggable_set_left",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "right",
            "desc": "拖动范围的右边限制。缺省为父控件的右边边。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置right。",
        "name": "draggable_set_right",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical_only",
            "desc": "只允许垂直拖动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置vertical_only。",
        "name": "draggable_set_vertical_only",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "horizontal_only",
            "desc": "只允许水平拖动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置horizontal_only。",
        "name": "draggable_set_horizontal_only",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "drag_window",
            "desc": "drag_window"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置drag_window。\n拖动窗口而不是父控件。比如放在对话框的titlebar上，拖动titlebar其实是希望拖动对话框。",
        "name": "draggable_set_drag_window",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "top",
        "desc": "拖动范围的顶部限制。缺省为父控件的顶部。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "bottom",
        "desc": "拖动范围的底部限制。缺省为父控件的底部。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "left",
        "desc": "拖动范围的左边限制。缺省为父控件的左边。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "right",
        "desc": "拖动范围的右边限制。缺省为父控件的右边边。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "vertical_only",
        "desc": "只允许垂直拖动。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "horizontal_only",
        "desc": "只允许水平拖动。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "drag_window",
        "desc": "拖动窗口而不是父控件。比如放在对话框的titlebar上，拖动titlebar其实是希望拖动对话框。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "features/draggable.h",
    "desc": "将draggable放入目标控件，即可让目标控件或当前窗口可以被拖动。\n\ndraggable\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于draggable\\_t控件。\n\n在xml中使用\"draggable\"标签创建draggable控件。如：\n\n```xml\n<button text=\"Drag Me\" w=\"80\" h=\"40\" x=\"10\" y=\"10\">\n<draggable />\n</button>\n```\n\n拖动对话框标题时移动对话框：\n\n```xml\n<dialog_title x=\"0\" y=\"0\" w=\"100%\" h=\"30\" text=\"Hello AWTK\" >\n<draggable drag_window=\"true\"/>\n</dialog_title>\n```\n\n> 更多用法请参考：\n[draggable.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/draggable.xml)\n\n在c代码中使用函数draggable\\_create创建按钮控件。如：\n\n```c\nwidget_t* draggable = draggable_create(target, 0, 0, 0, 0);\n```\n\n> draggable本身不可见，故无需style。",
    "name": "draggable_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建file_browser_view对象",
        "name": "file_browser_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "file_browser_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为file_browser_view对象(供脚本语言使用)。",
        "name": "file_browser_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "file_browser_view对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "init_dir",
            "desc": "初始文件夹。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置 初始文件夹。",
        "name": "file_browser_view_set_init_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "top_dir",
            "desc": "初始文件夹。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置 顶层文件夹。",
        "name": "file_browser_view_set_top_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "filter",
            "desc": "过滤规则。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置 过滤规则。\n> files_only 表示只列出文件，dir_only 表示只列出目录，其它表示只列出满足扩展名文件集合(如：.jpg.png.gif)。",
        "name": "file_browser_view_set_filter",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "重新加载。",
        "name": "file_browser_view_reload",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "ignore_hidden_files",
            "desc": "忽略隐藏文件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置 忽略隐藏文件。",
        "name": "file_browser_view_set_ignore_hidden_files",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "sort_ascending",
            "desc": "是否为升序排序。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置 是否为升序排序。",
        "name": "file_browser_view_set_sort_ascending",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "show_check_button",
            "desc": "是否显示checkbutton。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置 是否显示checkbutton。",
        "name": "file_browser_view_set_show_check_button",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "sort_by",
            "desc": "排序方式。可选值(name, size, mtime, type)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置 排序方式。可选值(name, size, mtime, type)。",
        "name": "file_browser_view_set_sort_by",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取当前路径。",
        "name": "file_browser_view_get_cwd",
        "return": {
          "type": "const char*",
          "desc": "返回当前路径。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "子文件夹名。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在当前文件夹创建子文件夹。",
        "name": "file_browser_view_create_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          },
          {
            "type": "const char*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在当前文件夹创建文件。",
        "name": "file_browser_view_create_file",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(当前显示目录)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "init_dir",
        "desc": "初始文件夹。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "top_dir",
        "desc": "最顶层目录。到达本目录后，不允许往上。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "filter",
        "desc": "过滤规则。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "ignore_hidden_files",
        "desc": "是否忽略隐藏文件。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "sort_ascending",
        "desc": "是否为升序排序。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "show_check_button",
        "desc": "是否显示checkbutton。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "sort_by",
        "desc": "排序方式。可选值(name, size, mtime, type)。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "file_browser/file_browser_view.h",
    "desc": "文件管理/浏览/选择控件。\n\nfile\\_browser\\_view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于file\\_browser\\_view\\_t控件。\n\n考虑到文件浏览器界面呈现的多样性，界面呈现工作完全有子控件来完成。\n\nfile\\_browser\\_view\\_t负责关联文件/文件夹数据到子控件上，子控件需要特定的规范命名。\n\n* 名为 \"cwd\" 的子控件用于显示当前路径。\n\n* 名为 \"selected_file\" 的子控件用于显示当前选择的文件。\n\n* 名为 \"file\" 的子控件用于显示文件项的模板控件。\n\n* 名为 \"folder\" 的子控件用于显示文件夹项的模板控件。\n\n* 名为 \"return_up\" 的子控件用于返回上一级文件夹的模板控件。\n\n* 名为 \"container\" 的子控件为容器控件，通常是scrollview。\n\n* 名为 \"name\" 的子控件用于显示文件和文件夹的名称(放在列表项目内)。\n\n* 名为 \"size\" 的子控件用于显示文件和文件夹的大小(放在列表项目内)。\n\n* 名为 \"mtime\" 的子控件用于显示文件和文件夹的修改时间(放在列表项目内)。\n\n* 名为 \"ctime\" 的子控件用于显示文件和文件夹的创建时间(放在列表项目内)。\n\n* 名为 \"icon\" 的子控件用于显示文件和文件夹的图标(放在列表项目内)。\n\n* 类型为 \"check_button\" 的子控件用于选择(放在列表项目内)。\n\n完整示例请参考：\n\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/file_chooser_for_open.xml",
    "name": "file_browser_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建file_chooser对象",
        "name": "file_chooser_create",
        "return": {
          "type": "file_chooser_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          },
          {
            "type": "const char*",
            "name": "init_dir",
            "desc": "初始目录"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置初始目录。",
        "name": "file_chooser_set_init_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          },
          {
            "type": "const char*",
            "name": "top_dir",
            "desc": "初始目录"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置初始目录。",
        "name": "file_chooser_set_top_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          },
          {
            "type": "const char*",
            "name": "filter",
            "desc": "过滤规则。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置过滤规则。\n> files_only 表示只列出文件，dir_only 表示只列出目录，其它表示只列出满足扩展名文件集合(如：.jpg.png.gif)。",
        "name": "file_chooser_set_filter",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为file_chooser对象(供脚本语言使用)。",
        "name": "file_chooser_cast",
        "return": {
          "type": "file_chooser_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "为了保存而选择文件。",
        "name": "file_chooser_choose_file_for_save",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "为了打开而选择文件。",
        "name": "file_chooser_choose_file_for_open",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "选择目录。",
        "name": "file_chooser_choose_folder",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取目录。",
        "name": "file_chooser_get_dir",
        "return": {
          "type": "const char*",
          "desc": "返回选择的目录。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取文件名。",
        "name": "file_chooser_get_filename",
        "return": {
          "type": "const char*",
          "desc": "返回选择的文件名。"
        }
      },
      {
        "params": [
          {
            "type": "file_chooser_t*",
            "name": "chooser",
            "desc": "file_chooser对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "用户是否取消了选择。",
        "name": "file_chooser_is_aborted",
        "return": {
          "type": "bool_t",
          "desc": "返回用户是否取消了选择。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "file_browser/file_chooser.h",
    "desc": "文件/目录选择器",
    "name": "file_chooser_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "emitter_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建gauge_pointer对象",
        "name": "gauge_pointer_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "gauge_pointer对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为gauge_pointer对象(供脚本语言使用)。",
        "name": "gauge_pointer_cast",
        "return": {
          "type": "widget_t*",
          "desc": "gauge_pointer对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "angle",
            "desc": "指针角度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指针角度。12点钟方向为0度，顺时钟方向为正，单位为度。",
        "name": "gauge_pointer_set_angle",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "指针的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指针的图片。",
        "name": "gauge_pointer_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "anchor_x",
            "desc": "指针的锚点坐标x。(后面加上px为像素点，不加px为相对百分比坐标)"
          },
          {
            "type": "const char*",
            "name": "anchor_y",
            "desc": "指针的锚点坐标y。(后面加上px为像素点，不加px为相对百分比坐标)"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指针的旋转锚点。",
        "name": "gauge_pointer_set_anchor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(角度)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(角度)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "angle",
        "desc": "指针角度。12点钟方向为0度，顺时钟方向为正，单位为度。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "image",
        "desc": "指针图片。\n\n图片须垂直向上，图片的中心点为旋转方向。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anchor_x",
        "desc": "图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anchor_y",
        "desc": "图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "gauge/gauge_pointer.h",
    "desc": "仪表指针控件。\n\n仪表指针就是一张旋转的图片，图片可以是普通图片也可以是SVG图片。\n\n在嵌入式平台上，对于旋转的图片，SVG图片的效率比位图高数倍，所以推荐使用SVG图片。\n\ngauge\\_pointer\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于gauge\\_pointer\\_t控件。\n\n在xml中使用\"gauge\\_pointer\"标签创建仪表指针控件。如：\n\n```xml\n<gauge_pointer x=\"c\" y=\"50\" w=\"24\" h=\"140\" value=\"-128\" image=\"gauge_pointer\" />\n```\n\n> 更多用法请参考：\n[gauge.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/gauge.xml)\n\n在c代码中使用函数gauge\\_pointer\\_create创建仪表指针控件。如：\n\n```c\nwidget_t* gauge_pointer = gauge_pointer_create(gauge, 10, 10, 100, 30);\ngauge_pointer_set_image(gauge_pointer, \"gauge_pointer\");\n```\n\n> 创建之后，需要用gauge\\_pointer\\_set\\_image设置仪表指针图片。",
    "name": "gauge_pointer_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建gauge对象",
        "name": "gauge_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "gauge对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为gauge对象(供脚本语言使用)。",
        "name": "gauge_cast",
        "return": {
          "type": "widget_t*",
          "desc": "gauge对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称，该图片必须存在于资源管理器。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置背景图片的名称。",
        "name": "gauge_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "image_draw_type_t",
            "name": "draw_type",
            "desc": "显示方式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置图片的显示方式。\n\n> 绘制方式的属性值和枚举值:\n[image\\_draw\\_type\\_name\\_value](https://github.com/zlgopen/awtk/blob/master/src/base/enums.c#L98)",
        "name": "gauge_set_draw_type",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "image",
        "desc": "背景图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "draw_type",
        "desc": "图片的绘制方式。",
        "type": "image_draw_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "gauge/gauge.h",
    "desc": "表盘控件。\n\n表盘控件就是一张图片。\n\ngauge\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于gauge\\_t控件。\n\n在xml中使用\"gauge\"标签创建表盘控件。如：\n\n```xml\n<gauge x=\"c\" y=\"10\" w=\"240\" h=\"240\" image=\"gauge_bg\" >\n```\n\n> 更多用法请参考：\n[gauge.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/gauge.xml)\n\n在c代码中使用函数gauge\\_create创建表盘控件。如：\n\n```c\nwidget_t* gauge = gauge_create(win, 10, 10, 200, 200);\ngauge_set_image(gauge, \"gauge_bg\");\n```\n\n可用通过style来设置控件的显示风格，如背景和边框等。如：\n\n```xml\n<gauge>\n<style name=\"border\">\n<normal border_color=\"#000000\" bg_color=\"#e0e0e0\" text_color=\"black\"/>\n</style>\n</gauge>\n```\n\n> 更多用法请参考：\n[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml)",
    "name": "gauge_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建image_animation对象",
        "name": "image_animation_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "bool_t",
            "name": "loop",
            "desc": "是否循环播放。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否循环播放。",
        "name": "image_animation_set_loop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "图片前缀。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置图片前缀。",
        "name": "image_animation_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "uint32_t",
            "name": "interval",
            "desc": "间隔时间(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置播放间隔时间。",
        "name": "image_animation_set_interval",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "延迟播放时间(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置延迟播放时间(仅适用于自动播放)。",
        "name": "image_animation_set_delay",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_play",
            "desc": "是否自动播放。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否自动播放。",
        "name": "image_animation_set_auto_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "const char*",
            "name": "sequence",
            "desc": "播放序列。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置播放序列。比如image为\"fire\"，sequence为\"12223\", 将依次播放\"fire1\", \"fire2\", \"fire2\", \"fire2\",\n\"fire3\"。",
        "name": "image_animation_set_sequence",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "uint32_t",
            "name": "start_index",
            "desc": "图片起始序数。"
          },
          {
            "type": "uint32_t",
            "name": "end_index",
            "desc": "图片结束序数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置播放序列。比如image为\"fire\"，start_index为0, end_index为99, 将依次播放\"fire0\", ...,\n\"fire99\"。\n\n若指定的图片不存在，则重复上一张图片。",
        "name": "image_animation_set_range_sequence",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "播放。",
        "name": "image_animation_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "停止(并重置index为-1)。",
        "name": "image_animation_stop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "暂停。",
        "name": "image_animation_pause",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "手动切换到下一张图片。",
        "name": "image_animation_next",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置生成图片名的格式。\n\nXXX:生成图片名时，第一个参数是图片名前缀，第二个是序数，只能在此前提下设置格式。\n\n```\nconst char* format = image_animation->format ? image_animation->format : \"%s%d\";\ntk_snprintf(name, TK_NAME_LEN, format, image_animation->image, image_animation->index);\n```",
        "name": "image_animation_set_format",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "bool_t",
            "name": "unload_after_paint",
            "desc": "是否绘制完成后unload图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置绘制完成后unload图片，以释放内存空间。",
        "name": "image_animation_set_unload_after_paint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "bool_t",
            "name": "reverse",
            "desc": "是否倒序播放。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否倒序播放。",
        "name": "image_animation_set_reverse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "bool_t",
            "name": "show_when_done",
            "desc": "是否继续显示最后一帧。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置结束播放后是否保持显示最后一帧。",
        "name": "image_animation_set_show_when_done",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为image_animation对象(供脚本语言使用)。",
        "name": "image_animation_cast",
        "return": {
          "type": "widget_t*",
          "desc": "image_animation对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断是否在播放。",
        "name": "image_animation_is_playing",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是，否则表示否。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_ANIM_ONCE",
        "desc": "使能循环播放时，控件动画完成一次事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_ANIM_END",
        "desc": "控件动画完成事件。",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "image",
        "desc": "图片名称的前缀。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "sequence",
        "desc": "播放的序列，字符可选值为数字和英文大小写字母，字符可以重复。如：0123456789或者123123abcd。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "start_index",
        "desc": "图片起始序数。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "end_index",
        "desc": "图片结束序数。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "reverse",
        "desc": "是否倒序播放。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "loop",
        "desc": "是否循环播放。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_play",
        "desc": "是否自动播放。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "unload_after_paint",
        "desc": "绘制完成后unload图片，以释放内存空间。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "format",
        "desc": "索引到图片名转换时的格式，缺省为\"%s%d\"。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "interval",
        "desc": "每张图片播放的时间(毫秒)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "delay",
        "desc": "自动播放时延迟播放的时间(毫秒)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "show_when_done",
        "desc": "结束后是否继续显示最后一帧。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "image_animation/image_animation.h",
    "desc": "图片动画控件，指定一个图片前缀，依次显示指定序列的图片，从而形成动画效果。\n\n图片序列可以用sequence指定，也可以用start\\_index和end\\_index指定一个范围。\n\nimage\\_animation\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于image\\_animation\\_t控件。\n\n在xml中使用\"image\\_animation\"标签创建图片动画控件。如：\n\n```xml\n<image_animation image=\"ani\" start_index=\"1\" end_index=\"9\" auto_play=\"true\" interval=\"50\"\ndelay=\"100\"/>\n```\n\n> 更多用法请参考：\n[image_animation.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/image_animation.xml)\n\n在c代码中使用函数image\\_animation\\_create创建图片动画控件。如：\n\n```c\nimage_animation = image_animation_create(win, 10, 10, 200, 200);\nimage_animation_set_image(image_animation, \"ani\");\nimage_animation_set_interval(image_animation, 50);\nimage_animation_set_range_sequence(image_animation, 1, 9);\nimage_animation_play(image_animation);\n```\n\n> 完整示例请参考：\n[image_animation\ndemo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/image_animation.c)\n\n可用通过style来设置控件的显示风格，如背景颜色和边框等等，不过一般情况并不需要。",
    "name": "image_animation_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建image_value对象",
        "name": "image_value_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_value对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "图片前缀。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置图片前缀。",
        "name": "image_value_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_value对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置格式。",
        "name": "image_value_set_format",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_value对象。"
          },
          {
            "type": "double",
            "name": "delta",
            "desc": "增量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置点击时加上的增量。",
        "name": "image_value_set_click_add_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_value对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值。",
        "name": "image_value_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_min对象。"
          },
          {
            "type": "double",
            "name": "min",
            "desc": "最小值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置最小值。",
        "name": "image_value_set_min",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_max对象。"
          },
          {
            "type": "double",
            "name": "max",
            "desc": "最大值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置最大值。",
        "name": "image_value_set_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_value对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为image_value对象(供脚本语言使用)。",
        "name": "image_value_cast",
        "return": {
          "type": "widget_t*",
          "desc": "image_value对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值即将改变事件(click_add_delta为非0时，点击触发)。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值改变事件(click_add_delta为非0时，点击触发)。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "image",
        "desc": "图片名称的前缀。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "format",
        "desc": "数值到字符串转换时的格式，缺省为\"%d\"。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "click_add_delta",
        "desc": "点击时加上一个增量。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": "值。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值(如果设置了click\\_add\\_delta，到达最小值后回到最大值)。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值(如果设置了click\\_add\\_delta，到达最大值后回到最小值)。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "image_value/image_value.h",
    "desc": "图片值控件。\n\n可以用图片来表示如电池电量、WIFI信号强度和其它各种数值的值。\n\n其原理如下：\n\n* 1.把value以format为格式转换成字符串。\n* 2.把每个字符与image(图片文件名前缀)映射成一个图片名。\n* 3.最后把这些图片显示出来。\n\n如果设置click\\_add\\_delta为非0，那么点击时自动增加指定的增量，值超过最大值时回到最小值,\n或者值超过最小值时回到最大值。\n\nimage\\_value\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于image\\_value\\_t控件。\n\n在xml中使用\"image\\_value\"标签创建图片值控件。如：\n\n```xml\n<image_value  value=\"0\" image=\"num_\" />\n```\n\n> 更多用法请参考：\n[image\\_value](https://github.com/zlgopen/awtk/blob/master/design/default/ui/image_value.xml)\n\n在c代码中使用函数image\\_value\\_create创建图片值控件。如：\n\n```c\nimage_value = image_value_create(win, 10, 10, 200, 200);\nimage_value_set_image(image_value, \"num_\");\nimage_value_set_value(image_value, 100);\n```\n\n> 完整示例请参考：\n[image_value demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/image_value.c)\n\n可用通过style来设置控件的显示风格，如背景颜色和边框等等，不过一般情况并不需要。",
    "name": "image_value_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建candidates对象",
        "name": "candidates_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "candidates对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为candidates对象(供脚本语言使用)。",
        "name": "candidates_cast",
        "return": {
          "type": "widget_t*",
          "desc": "candidates对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "pre",
            "desc": "是否为预候选字列表。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否为预候选字列表。\n\n> 为预候选字列表则注册EVT\\_IM\\_SHOW\\_PRE\\_CANDIDATES，否则注册EVT\\_IM\\_SHOW\\_CANDIDATES事件。",
        "name": "candidates_set_pre",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "select_by_num",
            "desc": "是否启用用数字选择候选字。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否启用用数字选择候选字。",
        "name": "candidates_set_select_by_num",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_hide",
            "desc": "是否自动隐藏。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否自动隐藏。",
        "name": "candidates_set_auto_hide",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "button_style",
            "desc": "按钮的style名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置按钮的style名称。",
        "name": "candidates_set_button_style",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "pre",
        "desc": "是否为预候选字。\n\n> 预候选字: 在有的输入法中，比如T9硬键盘输入时，按下12两个键时，预候选字会显示可用的拼音列表。\n> 从预候选字列表中选择拼音，再查询拼音对应的候选字列表。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "select_by_num",
        "desc": "是否启用用数字选择候选字。比如按下1选择第1个候选字，按下2选择第2个候选字。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_hide",
        "desc": "没有候选字时，是否自动隐藏控件。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "button_style",
        "desc": "按钮的style名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "keyboard/candidates.h",
    "desc": "输入法候选字词控件。\n\n如果希望启用用数字选择对应的候选字，请设置属性grab_keys=\"true\"。如：\n\n```xml\n<candidates x=\"0\" y=\"0\" w=\"100%\" h=\"30\" grab_keys=\"true\"/>\n```\n\n>相关文件： assets/default/raw/ui/kb_default.xml\n\n如果希望通过左右键切换不同的候选字，除了设置属性grab_keys=\"true\"，还需要设置按钮的focused状态的style。\n\n```xml\n<style name=\"candidates\" text_color=\"black\">\n<normal  />\n<pressed    bg_color=\"#c0c0c0\" border_color=\"#a0a0a0\"/>\n<over       bg_color=\"#e0e0e0\" border_color=\"#a0a0a0\"/>\n<focused    border_color=\"#a0a0a0\"/>\n</style>\n```\n\n>相关文件：assets/default/raw/styles/keyboard.xml",
    "name": "candidates_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建lang_indicator对象",
        "name": "lang_indicator_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "缺省获得焦点的子控件(可用控件名或类型)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置缺省获得焦点的子控件(可用控件名或类型)。",
        "name": "lang_indicator_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "lang_indicator对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为lang_indicator对象(供脚本语言使用)。",
        "name": "lang_indicator_cast",
        "return": {
          "type": "widget_t*",
          "desc": "lang_indicator对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "image",
        "desc": "如果希望用图片格式显示，本属性用于指定图片的前缀。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "keyboard/lang_indicator.h",
    "desc": "输入法语言指示器。\n\n用于显示输入法的输入语言或类型，主要用于T9输入法。\n\nlang_indicator\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于lang_indicator\\_t控件。\n\n在xml中使用\"lang_indicator\"标签创建lang_indicator。如：\n\n```xml\n<lang_indicator x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=2,r=2,m=5,s=5)\">\n</lang_indicator>\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "lang_indicator_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建line_number对象",
        "name": "line_number_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "top_margin",
            "desc": "顶部边距。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置顶部边距。",
        "name": "line_number_set_top_margin",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "bottom_margin",
            "desc": "顶部边距。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置顶部边距。",
        "name": "line_number_set_bottom_margin",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "line_height",
            "desc": "行高。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置行高。",
        "name": "line_number_set_line_height",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "yoffset",
            "desc": "行高。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置y偏移。",
        "name": "line_number_set_yoffset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "line_number对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为line_number对象(供脚本语言使用)。",
        "name": "line_number_cast",
        "return": {
          "type": "widget_t*",
          "desc": "line_number对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "mledit/line_number.h",
    "desc": "行号。多行编辑器的行号。\n\nline\\_number\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于line\\_number\\_t控件。\n\n在xml中使用\"lin\\e_number\"标签创建行号控件，一般配合mledit使用。如：\n\n```xml\n<mledit x=\"c\" y=\"10\" h=\"40%\" w=\"90%\" focus=\"true\" left_margin=\"36\" right_margin=\"16\"\nwrap_word=\"true\">\n<line_number x=\"0\" y=\"0\" w=\"32\" h=\"100%\" value=\"0\"/>\n<scroll_bar_d x=\"right\" y=\"0\" w=\"14\" h=\"100%\" value=\"0\"/>\n</mledit>\n```\n\n> 更多用法请参考：[mledit.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/mledit.xml)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<line_number>\n<style name=\"default\">\n<normal text_color=\"black\" bg_color=\"#d0d0d0\" text_align_h=\"right\"/>\n</style>\n</line_number>\n```\n\n> 更多用法请参考：\n[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L556)",
    "name": "line_number_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建mledit对象",
        "name": "mledit_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "readonly",
            "desc": "只读。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否为只读。",
        "name": "mledit_set_readonly",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "cancelable",
            "desc": "是否为可撤销修。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否为可撤销修改。",
        "name": "mledit_set_cancelable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "focus",
            "desc": "是否为焦点。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为焦点。",
        "name": "mledit_set_focus",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "wrap_word",
            "desc": "是否自动折行。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否自动折行。",
        "name": "mledit_set_wrap_word",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "max_lines",
            "desc": "最大行数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器的最大行数。",
        "name": "mledit_set_max_lines",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "max_chars",
            "desc": "最大字符数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器的最大字符数（0 为不限制字符数）。",
        "name": "mledit_set_max_chars",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "char*",
            "name": "tips",
            "desc": "输入提示。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器的输入提示。",
        "name": "mledit_set_tips",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "tr_tips",
            "desc": "提示信息。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取翻译之后的文本，然后调用mledit_set_tips。",
        "name": "mledit_set_tr_tips",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "char*",
            "name": "keyboard",
            "desc": "键盘名称(相应UI资源必须存在)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置自定义软键盘名称。",
        "name": "mledit_set_keyboard",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "cursor",
            "desc": "光标位置。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器光标位置。",
        "name": "mledit_set_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取编辑器光标位置。",
        "name": "mledit_get_cursor",
        "return": {
          "type": "uint32_t",
          "desc": "返回光标位置。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "scroll_line",
            "desc": "滚动行数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器滚动速度。",
        "name": "mledit_set_scroll_line",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移位置。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器滚动到指定偏移位置。",
        "name": "mledit_scroll_to_offset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "open_im_when_focused",
            "desc": "是否在获得焦点时打开输入法。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否在获得焦点时打开输入法。\n\n> * 设置默认焦点时，打开窗口时不弹出软键盘。\n> * 用键盘切换焦点时，编辑器获得焦点时不弹出软键盘。",
        "name": "mledit_set_open_im_when_focused",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "close_im_when_blured",
            "desc": "是否是否在失去焦点时关闭输入法。在失去焦点时关闭输入法。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否在失去焦点时关闭输入法。",
        "name": "mledit_set_close_im_when_blured",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "start",
            "desc": "起始偏移。"
          },
          {
            "type": "uint32_t",
            "name": "end",
            "desc": "结束偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "选择编辑器中指定范围的文本。",
        "name": "mledit_set_select",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取选中的文本。\n使用完后需调用 TKMEM_FREE() 进行释放文本占有内存。",
        "name": "mledit_get_selected_text",
        "return": {
          "type": "char*",
          "desc": "返回选中文本。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "mledit对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为mledit对象(供脚本语言使用)。",
        "name": "mledit_cast",
        "return": {
          "type": "widget_t*",
          "desc": "mledit对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_CHANGING",
        "desc": "文本正在改变事件(编辑中)。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "文本改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "tips",
        "desc": "输入提示。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "tr_tips",
        "desc": "保存用于翻译的提示信息。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "keyboard",
        "desc": "自定义软键盘名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max_lines",
        "desc": "最大行数。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max_chars",
        "desc": "最大字符数。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "wrap_word",
        "desc": "是否自动折行。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "scroll_line",
        "desc": "鼠标一次滚动行数。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "readonly",
        "desc": "编辑器是否为只读。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "cancelable",
        "desc": "是否支持撤销编辑。如果为TRUE，在失去焦点之前可以撤销所有修改(恢复获得焦点之前的内容)。\n\n> * 1.一般配合keyboard的\"cancel\"按钮使用。\n> * 2.为TRUE时，如果内容有变化，会设置编辑器的状态为changed，所以此时编辑器需要支持changed状态的style。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "open_im_when_focused",
        "desc": "获得焦点时打开输入法。\n\n> 主要用于没有指针设备的情况，否则每次切换焦点时都打开输入法。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "close_im_when_blured",
        "desc": "是否在失去焦点时关闭输入法(默认是)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "mledit/mledit.h",
    "desc": "多行编辑器控件。\n\nmledit\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于mledit\\_t控件。\n\n在xml中使用\"mledit\"标签创建多行编辑器控件。如：\n\n```xml\n<mledit x=\"c\" y=\"m\" w=\"300\" h=\"300\" />\n```\n\n> 更多用法请参考：[mledit.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/mledit.xml)\n\n在c代码中使用函数mledit\\_create创建多行编辑器控件。如：\n\n```c\nwidget_t* tc = mledit_create(win, 10, 10, 240, 240);\n```\n\n> 完整示例请参考：[mledit demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/mledit.c)\n\ntime\\_clock一般不需要设置style。",
    "name": "mledit_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建progress_circle对象",
        "name": "progress_circle_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "progress_circle对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为progress_circle对象(供脚本语言使用)。",
        "name": "progress_circle_cast",
        "return": {
          "type": "widget_t*",
          "desc": "progress_circle对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值。",
        "name": "progress_circle_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "max",
            "desc": "最大值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置最大值。",
        "name": "progress_circle_set_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "progress_circle对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置格式。",
        "name": "progress_circle_set_format",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "line_width",
            "desc": "环线的厚度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置环线的厚度。",
        "name": "progress_circle_set_line_width",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "start_angle",
            "desc": "起始角度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置起始角度。",
        "name": "progress_circle_set_start_angle",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "line_cap",
            "desc": "线帽类型(round:圆头，square:方头)。。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置线帽类型。",
        "name": "progress_circle_set_line_cap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "show_text",
            "desc": "是否显示文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否显示文本。",
        "name": "progress_circle_set_show_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "counter_clock_wise",
            "desc": "是否为逆时针方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否为逆时针方向。",
        "name": "progress_circle_set_counter_clock_wise",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值(缺省为0)。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值(缺省为100)。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "format",
        "desc": "数值到字符串转换时的格式，缺省为\"%d\"。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "start_angle",
        "desc": "起始角度(单位为度，缺省-90)。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "line_width",
        "desc": "环线的厚度(缺省为8)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "line_cap",
        "desc": "线帽类型(round:圆头，square:方头)。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "counter_clock_wise",
        "desc": "是否为逆时针方向(缺省为FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "show_text",
        "desc": "是否显示文本(缺省为TRUE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "progress_circle/progress_circle.h",
    "desc": "进度圆环控件。\n\nprogress\\_circle\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于progress\\_circle\\_t控件。\n\n在xml中使用\"progress\\_circle\"标签创建进度圆环控件。如：\n\n```xml\n<progress_circle max=\"360\" show_text=\"true\" start_angle=\"90\" />\n```\n\n> 更多用法请参考：\n[progress_circle.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/progress_circle.xml)\n\n在c代码中使用函数progress\\_circle\\_create创建进度圆环控件。如：\n\n```c\nprogress_circle = progress_circle_create(win, 10, 10, 200, 200);\nprogress_circle_set_max(progress_circle, 360);\nwidget_set_value(progress_circle, 128);\n```\n\n> 完整示例请参考：\n[progress_circle\ndemo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/progress_circle.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<style name=\"default\">\n<normal text_color=\"green\" fg_color=\"black\" />\n</style>\n```\n\n> 更多用法请参考：\n[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L467)",
    "name": "progress_circle_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建rich_text_view对象",
        "name": "rich_text_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "rich_text_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为rich_text_view对象(供脚本语言使用)。",
        "name": "rich_text_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "rich_text_view对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "rich_text/rich_text_view.h",
    "desc": "rich_text_view是一个专用容器，用来放rich text和 scroll bar，并在两者之间建立联系。\n\nrich_text_view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于rich_text_view\\_t控件。\n\n在xml中使用\"rich_text_view\"标签创建rich_text_view。如：\n\n```xml\n<rich_text_view x=\"0\" y=\"10\" w=\"100%\" h=\"300\">\n<rich_text line_gap=\"5\" x=\"0\" y=\"10\" w=\"-12\" h=\"100%\" margin=\"10\">\n...\n</rich_text>\n<scroll_bar_d name=\"bar\" x=\"right\" y=\"0\" w=\"12\" h=\"100%\" value=\"0\"/>\n</rich_text_view>\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "rich_text_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建rich_text对象",
        "name": "rich_text_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置文本。",
        "name": "rich_text_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "yslidable",
            "desc": "是否允许滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否允许y方向滑动。",
        "name": "rich_text_set_yslidable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "rich_text对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为rich_text对象(供脚本语言使用)。",
        "name": "rich_text_cast",
        "return": {
          "type": "widget_t*",
          "desc": "rich_text对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "line_gap",
        "desc": "行间距。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "yslidable",
        "desc": "标识控件是否允许上下拖动。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "rich_text/rich_text.h",
    "desc": "图文混排控件，实现简单的图文混排。\n\nrich\\_text\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于rich\\_text\\_t控件。\n\n在xml中使用\"rich\\_text\"标签创建图文混排控件。如：\n\n```xml\n<rich_text x=\"0\" y=\"0\" w=\"100%\" h=\"60\"\ntext=\"<image name=&quota;bricks&quota;/><font align_v=&quota;middle&quota;>hello awtk!</font>\" />\n```\n>\n\n> 更多用法请参考：\n[rich_text.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/rich_text.xml)\n\n在c代码中使用函数rich\\_text\\_create创建图文混排控件。如：\n\n```c\nwidget_t* rich_text = rich_text_create(win, 0, 0, 0, 0);\nwidget_set_text_utf8(rich_text,\n\"<image name=\\\"bricks\\\"/><font color=\\\"gold\\\" align_v=\\\"bottom\\\" \"\n\"size=\\\"24\\\">hello awtk!</font><font color=\\\"green\\\" size=\\\"20\\\">ProTip! The \"\n\"feed shows you events from people you follow and repositories you watch. \"\n\"nhello world. </font><font color=\\\"red\\\" \"\n\"size=\\\"20\\\">确定取消中文字符测试。确定。取消。中文字符测试。</font>\");\n\nwidget_set_self_layout_params(rich_text, \"center\", \"middle\", \"100%\", \"100%\");\n```\n\n> 完整示例请参考：\n[rich_text demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/rich_text.c)\n\n可用通过style来设置控件的显示风格，如背景颜色等等。而字体的大小和颜色则由文本内部的属性决定。\n\n目前支持image和font两个tag：\n\n* image 支持的属性有：\n* name 图片的名称。\n* w 图片的宽度。\n* h 图片的高度。\n\n* font 支持的属性有：\n* color 颜色。\n* size 大小。\n* align_v 垂直方向对齐的方式(top|middle|bottom)。\n* bold 粗体(暂不支持)\n* italic 斜体(暂不支持)\n* underline 下划线(暂不支持)",
    "name": "rich_text_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建hscroll_label对象",
        "name": "hscroll_label_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "lull",
            "desc": "间歇时间(ms)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置lull。",
        "name": "hscroll_label_set_lull",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "duration",
            "desc": "滚动时间(ms)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置duration。",
        "name": "hscroll_label_set_duration",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "only_focus",
            "desc": "是否只有处于focus时才滚动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置only_focus。",
        "name": "hscroll_label_set_only_focus",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "only_parent_focus",
            "desc": "是否只有处于focus时才滚动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置only_parent_focus。",
        "name": "hscroll_label_set_only_parent_focus",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "loop",
            "desc": "是否循环滚动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置loop。",
        "name": "hscroll_label_set_loop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "yoyo",
            "desc": "是否往返滚动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置yoyo。",
        "name": "hscroll_label_set_yoyo",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "ellipses",
            "desc": "是否在文本超长时在行尾显示\"...\"。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置ellipses。",
        "name": "hscroll_label_set_ellipses",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "xoffset",
            "desc": "x偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置x偏移(一般无需用户调用)。。",
        "name": "hscroll_label_set_xoffset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "启动(一般无需用户调用)。",
        "name": "hscroll_label_start",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "停止(一般无需用户调用)。",
        "name": "hscroll_label_stop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "hscroll_label对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为hscroll_label对象(供脚本语言使用)。",
        "name": "hscroll_label_cast",
        "return": {
          "type": "widget_t*",
          "desc": "hscroll_label对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "only_focus",
        "desc": "只有处于focus时才滚动(缺省否)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "only_parent_focus",
        "desc": "只有父控件处于focus时才滚动(缺省否)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "loop",
        "desc": "loop是否循环滚动(缺省FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "yoyo",
        "desc": "是否往返滚动(缺省FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "ellipses",
        "desc": "文本显示不下时，在行尾显示省略号(缺省FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "lull",
        "desc": "滚动之间的间歇时间(ms)，缺省3000ms。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "duration",
        "desc": "完整的滚动一次需要的时间(ms)，缺省5000ms。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "xoffset",
        "desc": "偏移量。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "text_w",
        "desc": "文本的宽度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_label/hscroll_label.h",
    "desc": "可水平滚动的文本控件，方便实现长文本滚动。\n\n\nhscroll\\_label\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于hscroll\\_label\\_t控件。\n\n在xml中使用\"hscroll\\_label\"标签创建行号控件，一般配合mledit使用。如：\n\n```xml\n```\n\n> 更多用法请参考：[mledit.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/mledit.xml)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<style name=\"default\" text_color=\"black\">\n<normal   />\n<focused  />\n</style>\n```\n\n> 更多用法请参考：\n[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml)",
    "name": "hscroll_label_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建list_item对象",
        "name": "list_item_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_item对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为list_item对象(供脚本语言使用)。",
        "name": "list_item_cast",
        "return": {
          "type": "widget_t*",
          "desc": "list_item对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_CLICK",
        "desc": "点击事件。",
        "type": "pointer_event_t"
      }
    ],
    "properties": [],
    "header": "scroll_view/list_item.h",
    "desc": "列表项控件。\n\n列表项控件是一个简单的容器控件，一般作为列表视图中滚动视图的子控件。\n\nlist\\_item\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于list\\_item\\_t控件。\n\n在xml中使用\"list\\_item\"标签创建列表项控件。如：\n\n```xml\n<list_view x=\"0\"  y=\"30\" w=\"100%\" h=\"-80\" item_height=\"60\">\n<scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\">\n<list_item style=\"odd\" children_layout=\"default(rows=1,cols=0)\">\n<image draw_type=\"icon\" w=\"30\" image=\"earth\"/>\n<label w=\"-30\" text=\"1.Hello AWTK !\">\n<switch x=\"r:10\" y=\"m\" w=\"60\" h=\"20\"/>\n</label>\n</list_item>\n...\n</scroll_view>\n</list_view>\n```\n\n> 更多用法请参考：[list\\_view\\_m.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_m.xml)\n\n在c代码中使用函数list\\_item\\_create创建列表项控件。如：\n\n```c\nwidget_t* list_item = list_item_create(scroll_view, 0, 0, 0, 0);\n```\n\n> 列表项控件大小一般由列表控制，不需指定xywh参数。\n\n可以用style来实现可点击或不可点击的效果。如：\n\n```xml\n<style name=\"odd_clickable\" border_color=\"#a0a0a0\"  border=\"bottom\" text_color=\"black\">\n<normal     bg_color=\"#f5f5f5\" />\n<pressed    bg_color=\"#c0c0c0\" />\n<over       bg_color=\"#f5f5f5\" />\n</style>\n```\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L372)",
    "name": "list_item_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建list_view_h对象",
        "name": "list_view_h_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "item_width",
            "desc": "列表项的宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置列表项的宽度。",
        "name": "list_view_h_set_item_width",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "spacing",
            "desc": "列表项的间距。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置列表项的间距。",
        "name": "list_view_h_set_spacing",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_view_h对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为list_view_h对象(供脚本语言使用)。",
        "name": "list_view_h_cast",
        "return": {
          "type": "widget_t*",
          "desc": "list_view_h对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "item_width",
        "desc": "列表项的宽度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "spacing",
        "desc": "间距。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/list_view_h.h",
    "desc": "水平列表视图控件。\n\nlist\\_view\\_h\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于list\\_view\\_h\\_t控件。\n\n在xml中使用\"list\\_view\\_h\"标签创建水平列表视图控件。如：\n\n```xml\n<list_view_h x=\"center\"  y=\"10\" w=\"90%\" h=\"100\" item_width=\"200\" spacing=\"5\">\n<scroll_view name=\"view\" w=\"100%\" h=\"100%\">\n<image style=\"border\" draw_type=\"auto\" image=\"1\" text=\"1\"/>\n...\n</scroll_view>\n</list_view_h>\n```\n\n> 注意：列表项不是作为列表视图控件的直接子控件，而是作为滚动视图的子控件。\n\n\n> 更多用法请参考：[list\\_view\\_h.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_h.xml)\n\n在c代码中使用函数list\\_view\\_h\\_create创建水平列表视图控件。如：\n\n```c\nwidget_t* list_view = list_view_h_create(win, 0, 0, 0, 0);\n```\n\n用代码构造列表视图是比较繁琐的事情，最好用XML来构造。\n如果需要动态修改，可以使用widget\\_clone来增加列表项，使用widget\\_remove\\_child来移出列表项。\n\n可用通过style来设置控件的显示风格，如背景颜色和边框颜色等(一般情况不需要)。",
    "name": "list_view_h_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建list_view对象",
        "name": "list_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "item_height",
            "desc": "列表项的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置列表项的高度。",
        "name": "list_view_set_item_height",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "default_item_height",
            "desc": "列表项的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置列表项的缺省高度。",
        "name": "list_view_set_default_item_height",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_hide_scroll_bar",
            "desc": "是否自动隐藏滚动条。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否自动隐藏滚动条。",
        "name": "list_view_set_auto_hide_scroll_bar",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "floating_scroll_bar",
            "desc": "滚动条是否悬浮在 scroll_view 上面。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滚动条是否悬浮在 scroll_view 上面。",
        "name": "list_view_set_floating_scroll_bar",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为list_view对象(供脚本语言使用)。",
        "name": "list_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "list_view对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_view对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "list_view重新初始化。",
        "name": "list_view_reinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "item_height",
        "desc": "列表项的高度。如果 item_height > 0，所有列表项使用固定高度，否则使用列表项自身的高度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "default_item_height",
        "desc": "列表项的缺省高度。如果item_height <= 0 而且列表项自身的高度 <= 0，则使用缺省高度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_hide_scroll_bar",
        "desc": "如果不需要滚动条时，自动隐藏滚动条。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "floating_scroll_bar",
        "desc": "滚动条是否悬浮在 scroll_view 上面",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/list_view.h",
    "desc": "列表视图控件。\n\n列表视图控件是一个可以垂直滚动的列表控件。\n\n如果不需要滚动，可以用view控件配置适当的layout参数作为列表控件。\n\n列表视图中的列表项可以固定高度，也可以使用不同高度。请参考[变高列表项](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_vh.xml)\n\n列表视图控件的中可以有滚动条，也可以没有滚动条。\n可以使用移动设备风格的滚动条，也可以使用桌面风格的滚动条。\n\nlist\\_view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于list\\_view\\_t控件。\n\n在xml中使用\"list\\_view\"标签创建列表视图控件。如：\n\n```xml\n<list_view x=\"0\"  y=\"30\" w=\"100%\" h=\"-80\" item_height=\"60\">\n<scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\">\n<list_item style=\"odd\" children_layout=\"default(rows=1,cols=0)\">\n<image draw_type=\"icon\" w=\"30\" image=\"earth\"/>\n<label w=\"-30\" text=\"1.Hello AWTK !\">\n<switch x=\"r:10\" y=\"m\" w=\"60\" h=\"20\"/>\n</label>\n</list_item>\n...\n</scroll_view>\n</list_view>\n```\n\n> 注意：列表项不是作为列表视图控件的直接子控件，而是作为滚动视图的子控件。\n\n\n> 更多用法请参考：[list\\_view\\_m.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_m.xml)\n\n在c代码中使用函数list\\_view\\_create创建列表视图控件。如：\n\n```c\nwidget_t* list_view = list_view_create(win, 0, 0, 0, 0);\n```\n\n用代码构造列表视图是比较繁琐的事情，最好用XML来构造。\n如果需要动态修改，可以使用widget\\_clone来增加列表项，使用widget\\_remove\\_child来移出列表项。\n\n可用通过style来设置控件的显示风格，如背景颜色和边框颜色等(一般情况不需要)。\n\n备注：list_view 下的 scroll_view 控件不支持遍历所有子控件的效果。\n\n下面是针对 scroll_bar_d （桌面版）有效果，scroll_bar_m（移动版）没有效果。\n如果 floating_scroll_bar 属性为 TRUE 和 auto_hide_scroll_bar 属性为 TRUE，scroll_view 宽默认为 list_view 的 100% 宽，鼠标在 list_view 上滚动条才显示，不在的就自动隐藏，如果 scroll_view 的高比虚拟高要大的话，滚动条变成不可见，scroll_view 宽不会变。\n如果 floating_scroll_bar 属性为 TRUE 和 auto_hide_scroll_bar 属性为 FALSE ，scroll_view 宽默认为 list_view 的 100% 宽，滚动条不隐藏，如果 scroll_view 的高比虚拟高要大的话，滚动条变成不可见，scroll_view 宽不会变。\n如果 floating_scroll_bar 属性为 FALSE 和 auto_hide_scroll_bar 属性为 FALSE，如果 scroll_view 的高比虚拟高要大的话，滚动条变成不可用，scroll_view 宽不会变。\n如果 floating_scroll_bar 属性为 FALSE 和 auto_hide_scroll_bar 属性为 TRUE，如果 scroll_view 的高比虚拟高要大的话，滚动条变成不可见，scroll_view 宽会合并原来滚动条的宽。",
    "name": "list_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建scroll_bar对象\n\n> 根据宏WITH_DESKTOP_STYLE决定创建desktop风格还是mobile风格的滚动条",
        "name": "scroll_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为scroll_bar对象(供脚本语言使用)。",
        "name": "scroll_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "scroll_bar对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建mobile风格的scroll_bar对象",
        "name": "scroll_bar_create_mobile",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建desktop风格的scroll_bar对象",
        "name": "scroll_bar_create_desktop",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "virtual_size",
            "desc": "虚拟高度。"
          },
          {
            "type": "int32_t",
            "name": "row",
            "desc": "每一行的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置参数。",
        "name": "scroll_bar_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "int32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "滚动到指定的值。",
        "name": "scroll_bar_scroll_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值，并触发EVT_VALUE_CHANGED事件。",
        "name": "scroll_bar_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在当前的值上增加一个值，并触发EVT_VALUE_CHANGED事件。",
        "name": "scroll_bar_add_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在当前的值上增加一个值，并滚动到新的值，并触发EVT_VALUE_CHANGED事件。",
        "name": "scroll_bar_scroll_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值，但不触发EVT_VALUE_CHANGED事件。",
        "name": "scroll_bar_set_value_only",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "bool_t",
            "name": "auto_hide",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置auto_hide属性。\n\n>仅对mobile风格的滚动条有效",
        "name": "scroll_bar_set_auto_hide",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断是否是mobile风格的滚动条。",
        "name": "scroll_bar_is_mobile",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是mobile风格的，否则表示不是mobile风格的。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(滚动值)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(滚动值)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "virtual_size",
        "desc": "虚拟宽度或高度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": "当前的值。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "row",
        "desc": "行的高度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "animatable",
        "desc": "滚动时是否启用动画。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_hide",
        "desc": "是否自动隐藏(仅对mobile风格的滚动条有效)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/scroll_bar.h",
    "desc": "滚动条控件。\n\n> 目前只支持垂直滚动。\n\nscroll\\_bar\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于scroll\\_bar\\_t控件。\n\n在xml中使用\"scroll\\_bar\"或\"scroll\\_bar\\_d\"或\"scroll\\_bar\\_m\"标签创建滚动条控件。如：\n\n```xml\n<list_view x=\"0\"  y=\"30\" w=\"100%\" h=\"-80\" item_height=\"60\">\n<scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\">\n...\n</scroll_view>\n<scroll_bar_m name=\"bar\" x=\"right\" y=\"0\" w=\"6\" h=\"100%\" value=\"0\"/>\n</list_view>\n```\n\n> 更多用法请参考：[list\\_view\\_m.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_m.xml)\n\n在c代码中使用函数scroll\\_bar\\_create创建列表项控件。如：\n\n```c\nwidget_t* scroll_bar = scroll_bar_create(list_view, 0, 0, 0, 0);\n```\n\n```xml\n<style name=\"default\">\n<normal bg_color=\"#c0c0c0\" fg_color=\"#808080\"/>\n<over bg_color=\"#c0c0c0\" fg_color=\"#808080\"/>\n<pressed bg_color=\"#c0c0c0\" fg_color=\"#808080\"/>\n</style>\n```\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L350)",
    "name": "scroll_bar_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建scroll_view对象",
        "name": "scroll_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为scroll_view对象(供脚本语言使用)。",
        "name": "scroll_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "scroll_view对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "虚拟宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置虚拟宽度。",
        "name": "scroll_view_set_virtual_w",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "虚拟高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置虚拟高度。",
        "name": "scroll_view_set_virtual_h",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "xslidable",
            "desc": "是否允许滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否允许x方向滑动。",
        "name": "scroll_view_set_xslidable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "yslidable",
            "desc": "是否允许滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否允许y方向滑动。",
        "name": "scroll_view_set_yslidable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "snap_to_page",
            "desc": "是否按页面对齐。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滚动时offset是否按页面对齐。",
        "name": "scroll_view_set_snap_to_page",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "move_to_page",
            "desc": "是否每次翻一页。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滚动时是否每次翻一页\n备注：当 snap_to_page 为ture 的时候才有效果，主要用于区分一次翻一页还是一次翻多页。",
        "name": "scroll_view_set_move_to_page",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归查找全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否递归查找全部子控件。",
        "name": "scroll_view_set_recursive",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归查找全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否递归查找全部子控件。(不触发repaint和relayout)。",
        "name": "scroll_view_set_recursive_only",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "xoffset",
            "desc": "x偏移量。"
          },
          {
            "type": "int32_t",
            "name": "yoffset",
            "desc": "y偏移量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置偏移量。",
        "name": "scroll_view_set_offset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "xspeed_scale",
            "desc": "x偏移速度比例。"
          },
          {
            "type": "float_t",
            "name": "yspeed_scale",
            "desc": "y偏移速度比例。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置偏移速度比例。",
        "name": "scroll_view_set_speed_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "xoffset_end",
            "desc": "x偏移量。"
          },
          {
            "type": "int32_t",
            "name": "yoffset_end",
            "desc": "y偏移量。"
          },
          {
            "type": "int32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "滚动到指定的偏移量。",
        "name": "scroll_view_scroll_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "xoffset_delta",
            "desc": "x偏移量。"
          },
          {
            "type": "int32_t",
            "name": "yoffset_delta",
            "desc": "y偏移量。"
          },
          {
            "type": "int32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "滚动到指定的偏移量。",
        "name": "scroll_view_scroll_delta_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_SCROLL_START",
        "desc": "开始滚动事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_SCROLL_END",
        "desc": "结束滚动事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_SCROLL",
        "desc": "滚动事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_PAGE_CHANGED",
        "desc": "页面改变事件。",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "virtual_w",
        "desc": "虚拟宽度。",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "virtual_h",
        "desc": "虚拟高度。",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "xoffset",
        "desc": "x偏移量。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "yoffset",
        "desc": "y偏移量。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "xspeed_scale",
        "desc": "x偏移速度比例。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "yspeed_scale",
        "desc": "y偏移速度比例。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "xslidable",
        "desc": "是否允许x方向滑动。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "yslidable",
        "desc": "是否允许y方向滑动。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "snap_to_page",
        "desc": "滚动时offset是否按页面对齐。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "move_to_page",
        "desc": "是否每次翻一页（当 move_to_page 为ture 的时候才有效果，主要用于区分一次翻一页还是一次翻多页）。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "recursive",
        "desc": "是否递归查找全部子控件。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/scroll_view.h",
    "desc": "滚动视图。\n\nscroll\\_view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于scroll\\_view\\_t控件。\n\n在xml中使用\"scroll\\_view\"标签创建滚动视图控件。如：\n\n```xml\n<list_view x=\"0\"  y=\"30\" w=\"100%\" h=\"-80\" item_height=\"60\">\n<scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\">\n<list_item style=\"odd\" children_layout=\"default(rows=1,cols=0)\">\n<image draw_type=\"icon\" w=\"30\" image=\"earth\"/>\n<label w=\"-30\" text=\"1.Hello AWTK !\">\n<switch x=\"r:10\" y=\"m\" w=\"60\" h=\"20\"/>\n</label>\n</list_item>\n...\n</scroll_view>\n</list_view>\n```\n\n> 滚动视图一般作为列表视图的子控件使用。\n\n> 更多用法请参考：[list\\_view\\_m.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_m.xml)\n\n在c代码中使用函数scroll\\_view\\_create创建列表视图控件。如：\n\n```c\nwidget_t* scroll_view = scroll_view_create(win, 0, 0, 0, 0);\n```\n\n可用通过style来设置控件的显示风格，如背景颜色和边框颜色等(一般情况不需要)。",
    "name": "scroll_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建slide_menu对象",
        "name": "slide_menu_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_menu对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换slide_menu对象(供脚本语言使用)。",
        "name": "slide_menu_cast",
        "return": {
          "type": "widget_t*",
          "desc": "slide_menu对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_menu对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "当前项的索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前项。",
        "name": "slide_menu_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_menu对象。"
          },
          {
            "type": "align_v_t",
            "name": "align_v",
            "desc": "对齐方式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置垂直对齐方式。",
        "name": "slide_menu_set_align_v",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_menu对象。"
          },
          {
            "type": "float_t",
            "name": "min_scale",
            "desc": "最小缩放比例，范围[0.5-1]。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置最小缩放比例。",
        "name": "slide_menu_set_min_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(当前项)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(当前项)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。代表当前选中项的索引。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "align_v",
        "desc": "垂直对齐方式。",
        "type": "align_v_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "min_scale",
        "desc": "最小缩放比例。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "slide_menu/slide_menu.h",
    "desc": "左右滑动菜单控件。\n\n一般用一组按钮作为子控件，通过左右滑动改变当前的项。除了当菜单使用外，也可以用来切换页面。\n\nslide\\_menu\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于slide\\_menu\\_t控件。\n\n在xml中使用\"slide\\_menu\"标签创建左右滑动菜单控件。如：\n\n```xml\n<slide_menu style=\"mask\" align_v=\"top\">\n<button style=\"slide_button\" text=\"0\"/>\n<button style=\"slide_button\" text=\"1\"/>\n<button style=\"slide_button\" text=\"2\"/>\n<button style=\"slide_button\" text=\"3\"/>\n<button style=\"slide_button\" text=\"4\"/>\n</slide_menu>\n```\n\n> 更多用法请参考：[slide_menu.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/slide_menu.xml)\n\n在c代码中使用函数slide\\_menu\\_create创建左右滑动菜单控件。如：\n\n```c\nslide_menu = slide_menu_create(win, 10, 10, 300, 60);\nb = button_create(slide_menu, 0, 0, 0, 0);\nwidget_set_text_utf8(b, \"1\");\nb = button_create(slide_menu, 0, 0, 0, 0);\nwidget_set_text_utf8(b, \"2\");\nb = button_create(slide_menu, 0, 0, 0, 0);\nwidget_set_text_utf8(b, \"3\");\nb = button_create(slide_menu, 0, 0, 0, 0);\nwidget_set_text_utf8(b, \"4\");\n```\n\n可按下面的方法关注当前项改变的事件：\n\n```c\nwidget_on(slide_menu, EVT_VALUE_CHANGED, on_current_changed, slide_menu);\n```\n\n可按下面的方法关注当前按钮被点击的事件：\n\n```c\nwidget_on(b, EVT_CLICK, on_button_click, b);\n```\n\n> 完整示例请参考：[slide_menu demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/slide_menu.c)\n\n可用通过style来设置控件的显示风格，如背景颜色和蒙版颜色等等。如：\n\n```xml\n<style name=\"mask\">\n<normal     bg_color=\"#f0f0f0\" mask_color=\"#f0f0f0\"/>\n</style>\n```\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L493)",
    "name": "slide_menu_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建slide_indicator对象",
        "name": "slide_indicator_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建slide_indicator对象（线性显示）",
        "name": "slide_indicator_create_linear",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建slide_indicator对象（圆弧显示）",
        "name": "slide_indicator_create_arc",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为slide_indicator对象(供脚本语言使用)。",
        "name": "slide_indicator_cast",
        "return": {
          "type": "widget_t*",
          "desc": "slide_indicator对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "当前项的序号。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前页的序号。",
        "name": "slide_indicator_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          },
          {
            "type": "uint32_t",
            "name": "max",
            "desc": "数量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指示器的数量。",
        "name": "slide_indicator_set_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          },
          {
            "type": "indicator_default_paint_t",
            "name": "default_paint",
            "desc": "默认绘制类型。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指示器的默认绘制类型。",
        "name": "slide_indicator_set_default_paint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          },
          {
            "type": "uint16_t",
            "name": "auto_hide",
            "desc": "0表示禁止，非0表示无操作后延迟多久隐藏。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指示器是否自动隐藏。",
        "name": "slide_indicator_set_auto_hide",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          },
          {
            "type": "int32_t",
            "name": "margin",
            "desc": "指示器的边距。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指示器的边距(默认为10像素)。",
        "name": "slide_indicator_set_margin",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          },
          {
            "type": "float_t",
            "name": "spacing",
            "desc": "指示器的间距。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指示器的间距(指示器有弧度时为角度值，否则为直线间距)。",
        "name": "slide_indicator_set_spacing",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "指示器的大小。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指示器的大小(默认为8)。",
        "name": "slide_indicator_set_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          },
          {
            "type": "const char*",
            "name": "anchor_x",
            "desc": "锚点坐标x。(后面加上px为像素点，不加px为相对百分比坐标)"
          },
          {
            "type": "const char*",
            "name": "anchor_y",
            "desc": "锚点坐标y。(后面加上px为像素点，不加px为相对百分比坐标)"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置旋转锚点。",
        "name": "slide_indicator_set_anchor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_indicator对象。"
          },
          {
            "type": "const char*",
            "name": "target_name",
            "desc": "指示器指示的目标控件的名称"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指示器指示的目标。",
        "name": "slide_indicator_set_indicated_target",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(当前页的序号)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(当前页的序号)改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_PAGE_CHANGED",
        "desc": "页面改变事件。",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值(缺省为0)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值(缺省为100)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "default_paint",
        "desc": "指示器的类型。",
        "type": "indicator_default_paint_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_hide",
        "desc": "自动隐藏。0表示禁止，非0表示无操作后延迟多久隐藏。",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "margin",
        "desc": "指示器与边缘的边距。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "spacing",
        "desc": "指示器的中心之间的间距（圆弧显示时，间距的单位为弧度，否则为像素）。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "size",
        "desc": "指示器的大小。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anchor_x",
        "desc": "锚点x坐标。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anchor_y",
        "desc": "锚点y坐标。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "indicated_target",
        "desc": "指示器指示的目标控件的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "slide_view/slide_indicator.h",
    "desc": "slide_view的指示器控件。\n\n> 支持直线、弧线排布，默认有4种绘制样式，若设置了icon/active_icon，则优先使用icon/active_icon\n\nslide\\_indicator\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于slide\\_indicator\\_t控件。\n\n在xml中使用\"slide\\_indicator\"或\"slide\\_indicator\\_arc\"标签创建指示器控件。如：\n\n```xml\n<slide_view name=\"view\" x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\">\n...\n</slide_view>\n<slide_indicator name=\"indicator\" x=\"right\" y=\"0\" w=\"6\" h=\"100%\"/>\n```\n\n> 更多用法请参考：[slide\\_view.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/slide_view.xml)\n\n在c代码中使用函数slide\\_indicator\\_create创建指示器控件。如：\n\n```c\nwidget_t* slide_indicator = slide_indicator_create(parent, 0, 0, 0, 0);\n```\n\n```xml\n<style name=\"default\">\n<normal fg_color=\"#FFFFFF80\" selected_fg_color=\"#FFFFFF\"/>\n</style>\n```\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L350)",
    "name": "slide_indicator_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建slide_view对象",
        "name": "slide_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为slide_view对象(供脚本语言使用)。",
        "name": "slide_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "slide_view对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "uint16_t",
            "name": "auto_play",
            "desc": "0表示禁止自动播放，非0表示自动播放时每一页播放的时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为自动播放模式。",
        "name": "slide_view_set_auto_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "当前页的序号。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前页的序号(默认启用动画)。",
        "name": "slide_view_set_active",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "当前页的序号。"
          },
          {
            "type": "bool_t",
            "name": "animate",
            "desc": "是否启用动画。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前页的序号。",
        "name": "slide_view_set_active_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical",
            "desc": "TRUE表示上下滑动，FALSE表示左右滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为上下滑动(缺省为左右滑动)。",
        "name": "slide_view_set_vertical",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "const char*",
            "name": "anim_hint",
            "desc": "页面切换动画。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置页面切换动画。\n\nanim_hint取值如下：\n\n* \"translate\"：平移。\n* \"overlap\"：覆盖。\n* \"overlap\\_with\\_alpha\"：覆盖并改变透明度。\n\n> 使用\"overlap\"或\"overlap\\_with\\_alpha\"动画时，背景图片最好指定到page上。\n>\n> 使用\"overlap\\_with\\_alpha\"动画时，slideview的背景设置为黑色，\n> 或slideview的背景设置为透明，窗口的背景设置为黑色，以获得更好的视觉效果和性能。",
        "name": "slide_view_set_anim_hint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "bool_t",
            "name": "loop",
            "desc": "是否启用循环切换模式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置循环切换模式。",
        "name": "slide_view_set_loop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "删除页面的序号。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "删除指定序号页面。",
        "name": "slide_view_remove_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(当前页)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(当前页)改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_PAGE_CHANGED",
        "desc": "页面改变事件。",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "vertical",
        "desc": "是否为上下滑动模式。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_play",
        "desc": "自动播放。0表示禁止自动播放，非0表示自动播放时每一页播放的时间。",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "loop",
        "desc": "循环切换模式。\n\n向后切换：切换到最后一页时，再往后切换就到第一页。\n向前切换：切换到第一页时，再往前切换就到最后一页。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anim_hint",
        "desc": "页面切换效果。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "slide_view/slide_view.h",
    "desc": "滑动视图。\n\n滑动视图可以管理多个页面，并通过滑动来切换当前页面。也可以管理多张图片，让它们自动切换。\n\nslide\\_view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于slide\\_view\\_t控件。\n\n在xml中使用\"slide\\_view\"标签创建滑动视图控件。如：\n\n```xml\n<slide_view x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" style=\"dot\">\n<view x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(w=60,h=60,m=5,s=10)\">\n...\n</view>\n<view x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(w=60,h=60,m=5,s=10)\">\n...\n</view>\n</slide_view>\n```\n\n> 更多用法请参考：[slide_view.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/slide_view.xml)\n\n在c代码中使用函数slide\\_view\\_create创建滑动视图控件。如：\n\n```c\nslide_view = slide_view_create(win, 0, 0, win->w, win->h);\n```\n\n> 完整示例请参考：\n[slide_view demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/slide_view.c)\n\n可用通过style来设置控件的显示风格，如背景颜色和指示器的图标等等。如：\n\n```xml\n<style name=\"dot\">\n<normal  icon=\"dot\" active_icon=\"active_dot\"/>\n</style>\n```\n\n> 如果希望背景图片跟随滚动，请将背景图片设置到页面上，否则设置到slide\\_view上。\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L458)",
    "name": "slide_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建switch对象",
        "name": "switch_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "switch对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值。",
        "name": "switch_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "switch对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换switch对象(供脚本语言使用)。",
        "name": "switch_cast",
        "return": {
          "type": "widget_t*",
          "desc": "switch对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_CLICK",
        "desc": "点击事件。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(开关状态)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(开关状态)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max_xoffset_ratio",
        "desc": "当开关处于关闭时，图片偏移相对于图片宽度的比例(缺省为1/3)。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "switch/switch.h",
    "desc": "开关控件。\n\nswitch\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于switch\\_t控件。\n\n在xml中使用\"switch\"标签创建开关控件。如：\n\n```xml\n<switch x=\"10\" y=\"60\" w=\"60\" h=\"22\" />\n```\n\n> 更多用法请参考：[switch.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/switch.xml)\n\n在c代码中使用函数switch\\_create创建开关控件。如：\n\n```c\nwidget_t* sw = switch_create(win, 10, 10, 80, 30);\nwidget_on(sw, EVT_VALUE_CHANGED, on_changed, NULL);\n```\n\n> 完整示例请参考：[switch demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/switch.c)\n\n可用通过style来设置控件的显示风格，如背景图片等。如：\n\n```xml\n<style name=\"default\">\n<normal  bg_image=\"switch\" />\n</style>\n```\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L452)",
    "name": "switch_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建text_selector对象",
        "name": "text_selector_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换text_selector对象(供脚本语言使用)。",
        "name": "text_selector_cast",
        "return": {
          "type": "widget_t*",
          "desc": "text_selector对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "重置所有选项。",
        "name": "text_selector_reset_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取选项个数。",
        "name": "text_selector_count_options",
        "return": {
          "type": "int32_t",
          "desc": "返回选项个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "追加一个选项。",
        "name": "text_selector_append_option",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "char*",
            "name": "options",
            "desc": "选项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置选项。",
        "name": "text_selector_set_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "start",
            "desc": "起始值。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "个数。"
          },
          {
            "type": "int32_t",
            "name": "step",
            "desc": "步长。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "选项的格式化。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置一系列的整数选项。",
        "name": "text_selector_set_range_options_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "start",
            "desc": "起始值。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "个数。"
          },
          {
            "type": "int32_t",
            "name": "step",
            "desc": "步长。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置一系列的整数选项。",
        "name": "text_selector_set_range_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取text_selector的值。",
        "name": "text_selector_get_value",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置text_selector的值。",
        "name": "text_selector_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取text_selector的文本。",
        "name": "text_selector_get_text",
        "alias": "text_selector_get_text_value",
        "return": {
          "type": "const char*",
          "desc": "返回文本。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置text_selector的文本。",
        "name": "text_selector_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置第index个选项为当前选中的选项。",
        "name": "text_selector_set_selected_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "uint32_t",
            "name": "visible_nr",
            "desc": "选项数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置可见的选项数。",
        "name": "text_selector_set_visible_nr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "bool_t",
            "name": "localize_options",
            "desc": "是否本地化(翻译)选项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否本地化(翻译)选项。",
        "name": "text_selector_set_localize_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "bool_t",
            "name": "loop_options",
            "desc": "是否循环选项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否循环选项。",
        "name": "text_selector_set_loop_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "yspeed_scale",
            "desc": "y偏移速度比例。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置Y轴偏移速度比例。",
        "name": "text_selector_set_yspeed_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "animating_time",
            "desc": "滚动动画播放时间。(单位毫秒)"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滚动动画播放时间。",
        "name": "text_selector_set_animating_time",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "enable_value_animator",
            "desc": "是否修改值时启用动画"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否修改值时启用动画。",
        "name": "text_selector_set_enable_value_animator",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(当前项)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(当前项)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "visible_nr",
        "desc": "可见的选项数量(只能是1或者3或者5，缺省为5)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected_index",
        "desc": "当前选中的选项。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "options",
        "desc": "设置可选项(冒号分隔值和文本，分号分隔选项，如:1:red;2:green;3:blue)。\n对于数值选项，也可以指定一个范围，用『-』分隔起始值、结束值和格式。\n如：\"1-7-%02d\"表示1到7，格式为『02d』，格式为可选，缺省为『%d』。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "yspeed_scale",
        "desc": "y偏移速度比例。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "animating_time",
        "desc": "滚动动画播放时间。(单位毫秒)",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "localize_options",
        "desc": "是否本地化(翻译)选项(缺省为FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "loop_options",
        "desc": "是否循环选项(缺省为FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "enable_value_animator",
        "desc": "是否修改值时启用动画。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "text_selector/text_selector.h",
    "desc": "文本选择器控件，通常用于选择日期和时间等。\n\n> XXX: 目前需要先设置options和visible_nr，再设置其它参数(在XML中也需要按此顺序)。\n\ntext\\_selector\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于text\\_selector\\_t控件。\n\n在xml中使用\"text\\_selector\"标签创建文本选择器控件。如：\n\n```xml\n<text_selector options=\"red;green;blue;gold;orange\" visible_nr=\"3\" text=\"red\"/>\n```\n\n> 更多用法请参考：[text\\_selector.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/text_selector.xml)\n\n在c代码中使用函数text\\_selector\\_create创建文本选择器控件。如：\n\n```c\nwidget_t* ts = text_selector_create(win, 10, 10, 80, 150);\ntext_selector_set_options(ts, \"1:red;2:green;3:blue;4:orange;5:gold\");\ntext_selector_set_value(ts, 1);\nwidget_use_style(ts, \"dark\");\n```\n\n> 完整示例请参考：[text\\_selector demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/text_selector.c)\n\n可用通过style来设置控件的显示风格，如字体和背景颜色等。如：\n\n```xml\n<style name=\"dark\" fg_color=\"#a0a0a0\"  text_color=\"black\" text_align_h=\"center\">\n<normal     bg_color=\"#ffffff\" mask_color=\"#404040\" border_color=\"#404040\"/>\n</style>\n```\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L443)",
    "name": "text_selector_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建time_clock对象",
        "name": "time_clock_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "time_clock对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为time_clock对象(供脚本语言使用)。",
        "name": "time_clock_cast",
        "return": {
          "type": "widget_t*",
          "desc": "time_clock对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "hour",
            "desc": "小时的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置小时的值。",
        "name": "time_clock_set_hour",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "minute",
            "desc": "分钟的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置分钟的值。",
        "name": "time_clock_set_minute",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "second",
            "desc": "秒的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置秒的值。",
        "name": "time_clock_set_second",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "hour",
            "desc": "小时的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置小时的图片。",
        "name": "time_clock_set_hour_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "minute_image",
            "desc": "分钟的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置分钟的图片。",
        "name": "time_clock_set_minute_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "second_image",
            "desc": "秒的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置秒的图片。",
        "name": "time_clock_set_second_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "bg_image",
            "desc": "背景图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置背景图片。",
        "name": "time_clock_set_bg_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置中心图片。",
        "name": "time_clock_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "anchor_x",
            "desc": "指针的锚点坐标x。"
          },
          {
            "type": "const char*",
            "name": "anchor_y",
            "desc": "指针的锚点坐标y。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置小时指针的旋转锚点。\n> 后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f",
        "name": "time_clock_set_hour_anchor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "anchor_x",
            "desc": "指针的锚点坐标x。"
          },
          {
            "type": "const char*",
            "name": "anchor_y",
            "desc": "指针的锚点坐标y。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置分钟指针的旋转锚点。\n> 后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f",
        "name": "time_clock_set_minute_anchor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "anchor_x",
            "desc": "指针的锚点坐标x。"
          },
          {
            "type": "const char*",
            "name": "anchor_y",
            "desc": "指针的锚点坐标y。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置秒钟指针的旋转锚点。\n> 后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f",
        "name": "time_clock_set_second_anchor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "hour",
        "desc": "小时。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "minute",
        "desc": "分钟。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "second",
        "desc": "秒。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "image",
        "desc": "中心图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "bg_image",
        "desc": "背景图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "hour_image",
        "desc": "时针图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "minute_image",
        "desc": "分针图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "second_image",
        "desc": "秒针图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "hour_anchor_x",
        "desc": "时针图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "hour_anchor_y",
        "desc": "时针图片旋转锚点y坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "minute_anchor_x",
        "desc": "分针图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "minute_anchor_y",
        "desc": "分针图片旋转锚点y坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "second_anchor_x",
        "desc": "秒针图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "second_anchor_y",
        "desc": "秒针图片旋转锚点y坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "time_clock/time_clock.h",
    "desc": "模拟时钟控件。\n\ntime\\_clock\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于time\\_clock\\_t控件。\n\n在xml中使用\"time\\_clock\"标签创建模拟时钟控件。如：\n\n```xml\n<time_clock x=\"c\" y=\"m\" w=\"300\" h=\"300\" bg_image=\"clock_bg\" image=\"clock\"\nhour_image=\"clock_hour\" minute_image=\"clock_minute\" second_image=\"clock_second\"/>\n```\n\n> 更多用法请参考：[time\\_clock.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/time_clock.xml)\n\n在c代码中使用函数time\\_clock\\_create创建模拟时钟控件。如：\n\n```c\nwidget_t* tc = time_clock_create(win, 10, 10, 240, 240);\ntime_clock_set_image(tc, \"clock\");\ntime_clock_set_bg_image(tc, \"clock_bg\");\ntime_clock_set_hour_image(tc, \"clock_hour\");\ntime_clock_set_minute_image(tc, \"clock_minute\");\ntime_clock_set_second_image(tc, \"clock_second\");\n```\n\n> 完整示例请参考：[time_clock demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/time_clock.c)\n\ntime\\_clock一般不需要设置style。",
    "name": "time_clock_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建vpage对象",
        "name": "vpage_create",
        "return": {
          "type": "widget_t*",
          "desc": "vpage对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "vpage对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为vpage对象(供脚本语言使用)。",
        "name": "vpage_cast",
        "return": {
          "type": "widget_t*",
          "desc": "vpage对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "ui_asset",
            "desc": "UI资源名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置 UI资源名称。",
        "name": "vpage_set_ui_asset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "anim_hint",
            "desc": "动画类型。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置动画类型(vtranslate: 垂直平移，htranslate: 水平平移)。",
        "name": "vpage_set_anim_hint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VPAGE_WILL_OPEN",
        "desc": "页面即将打开(动画前)。",
        "type": "event_t"
      },
      {
        "name": "EVT_VPAGE_OPEN",
        "desc": "页面打开完成(动画后)。",
        "type": "event_t"
      },
      {
        "name": "EVT_VPAGE_CLOSE",
        "desc": "页面已经关闭(动画后)。",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "ui_asset",
        "desc": "UI资源名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anim_hint",
        "desc": "动画类型(目前支持：vtranslate: 垂直平移，htranslate: 水平平移)。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "vpage/vpage.h",
    "desc": "虚拟页面(根据情况自动加载/卸载页面，并提供入场/出场动画)。\n\n> 虚拟页面只能作为pages的直接子控件使用。\n\n如果指定了ui_asset:\n\n* 当页面切换到后台时自动卸载，并触发EVT\\_VPAGE\\_CLOSE消息。\n* 当页面切换到前台时自动加载，在动画前出发EVT\\_VPAGE\\_WILL\\_OPEN消息，在动画完成时触发 EVT\\_VPAGE\\_CLOSE消息。\n\nvpage\\_t也可以当作普通view嵌入到pages中，让tab控件在切换时具有动画效果。\n\n在xml中使用\"vpage\"标签创建控件。如：\n\n```xml\n<!-- ui -->\n<vpage x=\"c\" y=\"50\" w=\"100\" h=\"100\" ui_asset=\"mypage\"/>\n```\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等(一般无需指定)。如：\n\n```xml\n<!-- style -->\n<vpage>\n<style name=\"default\">\n<normal />\n</style>\n</vpage>\n```",
    "name": "vpage_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转prop_change_event_t对象，主要给脚本语言使用。",
        "name": "prop_change_event_cast",
        "return": {
          "type": "prop_change_event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": "属性的名称。",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": "属性的值。",
        "type": "const value_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "对象属性变化事件。",
    "name": "prop_change_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转progress_event_t对象，主要给脚本语言使用。",
        "name": "progress_event_cast",
        "return": {
          "type": "progress_event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "percent",
        "desc": "进度百分比。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "进度变化事件。",
    "name": "progress_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转done_event_t对象，主要给脚本语言使用。",
        "name": "done_event_cast",
        "return": {
          "type": "done_event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "result",
        "desc": "执行结果。",
        "type": "ret_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "执行完成事件。",
    "name": "done_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转error_event_t对象，主要给脚本语言使用。",
        "name": "error_event_cast",
        "return": {
          "type": "error_event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "code",
        "desc": "错误码。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "message",
        "desc": "错误信息。",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "执行完成事件。",
    "name": "error_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转cmd_exec_event_t对象，主要给脚本语言使用。",
        "name": "cmd_exec_event_cast",
        "return": {
          "type": "cmd_exec_event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": "命令的名称。",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "args",
        "desc": "命令的参数。",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "result",
        "desc": "执行结果(适用于EXECED)。",
        "type": "ret_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "can_exec",
        "desc": "标识命令是否可以执行(适用于CAN_EXEC)。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "对象执行命令的事件。",
    "name": "cmd_exec_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建app_bar对象",
        "name": "app_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "app_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为app_bar对象(供脚本语言使用)。",
        "name": "app_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "app_bar对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/app_bar.h",
    "desc": "app_bar控件。\n\n一个简单的容器控件，一般在窗口的顶部，用于显示本窗口的状态和信息。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\napp\\_bar\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于app\\_bar\\_t控件。\n\n在xml中使用\"app\\_bar\"标签创建app\\_bar。如：\n\n```xml\n<app_bar x=\"0\" y=\"0\" w=\"100%\" h=\"30\" >\n<label x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" text=\"Basic Controls\" />\n</app_bar>\n```\n\n在c代码中使用函数app\\_bar\\_create创建app\\_bar。如：\n\n```c\nwidget_t* app_bar = app_bar_create(win, 0, 0, 320, 30);\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "app_bar_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建button_group对象",
        "name": "button_group_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "button_group对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为button_group对象(供脚本语言使用)。",
        "name": "button_group_cast",
        "return": {
          "type": "widget_t*",
          "desc": "button_group对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/button_group.h",
    "desc": "Button Group控件。一个简单的容器控件，用于容纳一组按钮控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\nbutton\\_group\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于button\\_group\\_t控件。\n\n在xml中使用\"button\\_group\"标签创建button\\_group。如：\n\n```xml\n<button_group x=\"0\" y=\"m\" w=\"100%\" h=\"40\" children_layout=\"default(c=4,r=1,s=5,m=5)\">\n<button name=\"open:basic\" text=\"Basic\"/>\n<button name=\"open:button\" text=\"Buttons\"/>\n<button name=\"open:edit\" text=\"Edits\"/>\n<button name=\"open:keyboard\" text=\"KeyBoard\"/>\n</button_group>\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "button_group_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建button对象",
        "name": "button_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "button对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为button对象(供脚本语言使用)。",
        "name": "button_cast",
        "return": {
          "type": "widget_t*",
          "desc": "button对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "repeat",
            "desc": "触发EVT_CLICK事件的时间间隔(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置触发EVT\\_CLICK事件的时间间隔。为0则不重复触发EVT\\_CLICK事件。",
        "name": "button_set_repeat",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "long_press_time",
            "desc": "触发长按事件的时间(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置触发长按事件的时间。",
        "name": "button_set_long_press_time",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "enable_long_press",
            "desc": "是否启用长按事件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否启用长按事件。",
        "name": "button_set_enable_long_press",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_CLICK",
        "desc": "点击事件。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_LONG_PRESS",
        "desc": "长按事件。",
        "type": "pointer_event_t"
      }
    ],
    "properties": [
      {
        "name": "repeat",
        "desc": "重复触发EVT\\_CLICK事件的时间间隔。\n\n为0则不重复触发EVT\\_CLICK事件。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "enable_long_press",
        "desc": "是否启用长按事件，为true时才触发长按事件。\n\n触发长按事件后不再触发点击事件。\n缺省不启用。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "long_press_time",
        "desc": "触发长按事件的时间(ms)",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/button.h",
    "desc": "按钮控件。\n\n点击按钮之后会触发EVT\\_CLICK事件，注册EVT\\_CLICK事件以执行特定操作。\n\n按钮控件也可以作为容器使用，使用图片和文本作为其子控件，可以实现很多有趣的效果。\n\nbutton\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于button\\_t控件。\n\n在xml中使用\"button\"标签创建按钮控件。如：\n\n```xml\n<button x=\"c\" y=\"m\" w=\"80\" h=\"30\" text=\"OK\"/>\n```\n\n> 更多用法请参考：\n[button.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/button.xml)\n\n在c代码中使用函数button\\_create创建按钮控件。如：\n\n```c\nwidget_t* button = button_create(win, 10, 10, 128, 30);\nwidget_set_text(button, L\"OK\");\nwidget_on(button, EVT_CLICK, on_click, NULL);\n```\n\n> 创建之后，需要用widget\\_set\\_text或widget\\_set\\_text\\_utf8设置文本内容。\n\n> 完整示例请参考：\n[button demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/button.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\">\n<normal     bg_color=\"#f0f0f0\" />\n<pressed    bg_color=\"#c0c0c0\" x_offset=\"1\" y_offset=\"1\"/>\n<over       bg_color=\"#e0e0e0\" />\n<disable    bg_color=\"gray\" text_color=\"#d0d0d0\" />\n</style>\n```\n\n> 更多用法请参考：\n[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L31)",
    "name": "button_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建多选按钮对象",
        "name": "check_button_create",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建单选按钮对象",
        "name": "check_button_create_radio",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "check_button对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "值(勾选为TRUE，非勾选为FALSE)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值。",
        "name": "check_button_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "check_button对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换check_button对象(供脚本语言使用)。",
        "name": "check_button_cast",
        "return": {
          "type": "widget_t*",
          "desc": "check_button对象。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(勾选状态)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(勾选状态)改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_CLICK",
        "desc": "点击事件。",
        "type": "pointer_event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值(勾选为TRUE，非勾选为FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/check_button.h",
    "desc": "勾选按钮控件(单选/多选)。\n\ncheck\\_button\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于check\\_button\\_t控件。\n\n在xml中使用\"check_button\"标签创建多选按钮控件。如：\n\n```xml\n<check_button name=\"c1\" text=\"Book\"/>\n```\n\n在xml中使用\"radio_button\"标签创建单选按钮控件。如：\n\n```xml\n<radio_button name=\"r1\" text=\"Book\"/>\n```\n\n> 更多用法请参考：\n[button.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/basic.xml)\n\n在c代码中使用函数check\\_button\\_create创建多选按钮控件。如：\n\n```c\nwidget_t* button = check_button_create(win, x, y, w, h);\nwidget_set_text(button, L\"OK\");\nwidget_on(button, EVT_VALUE_CHANGED, on_changed, NULL);\n```\n\n在c代码中使用函数check\\_button\\_create\\_radio创建单选按钮控件。如：\n\n```c\nwidget_t* button = check_button_create_radio(win, x, y, w, h);\nwidget_set_text(button, L\"OK\");\nwidget_on(button, EVT_VALUE_CHANGED, on_changed, NULL);\n```\n\n> 完整示例请参考：\n[button demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/check_button.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<style name=\"default\" icon_at=\"left\">\n<normal  icon=\"unchecked\" />\n<pressed icon=\"unchecked\" />\n<over    icon=\"unchecked\" text_color=\"green\"/>\n<normal_of_checked icon=\"checked\" text_color=\"blue\"/>\n<pressed_of_checked icon=\"checked\" text_color=\"blue\"/>\n<over_of_checked icon=\"checked\" text_color=\"green\"/>\n</style>\n```\n\n> 更多用法请参考：\n[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L227)",
    "name": "check_button_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建clip_view对象",
        "name": "clip_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "clip_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为clip_view对象(供脚本语言使用)。",
        "name": "clip_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "clip_view对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/clip_view.h",
    "desc": "一个裁剪子控件的容器控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\nclip\\_view\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于clip\\_view\\_t控件。\n\n在xml中使用\"clip_view\"标签创建clip_view，在clip_view控件下的所有子控件都会被裁剪。如下button控件会被裁剪，无法画出clip_view控件 ：\n\n```xml\n<clip_view x=\"0\" y=\"0\" w=\"100\" h=\"100\">\n<button x=\"50\" y=\"10\" w=\"100\" h=\"50\" />\n</clip_view>\n```\n\n备注：在clip_view控件下的所有子控件都会被裁剪，如果子控件本身会设置裁剪区的话，在子控件中计算裁剪区的交集，具体请参考scroll_view控件的scroll_view_on_paint_children函数。\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "clip_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建color_tile对象",
        "name": "color_tile_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_tile对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为color_tile对象(供脚本语言使用)。",
        "name": "color_tile_cast",
        "return": {
          "type": "widget_t*",
          "desc": "color_tile对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "背景颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置背景颜色。",
        "name": "color_tile_set_bg_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取背景颜色。",
        "name": "color_tile_get_bg_color",
        "return": {
          "type": "const char*",
          "desc": "返回背景颜色。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取边框颜色。",
        "name": "color_tile_get_border_color",
        "return": {
          "type": "const char*",
          "desc": "返回边框颜色。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(颜色)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(颜色)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "bg_color",
        "desc": "背景颜色。",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "border_color",
        "desc": "边框颜色。",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/color_tile.h",
    "desc": "色块控件。\n\n用来显示一个颜色块，它通过属性而不是窗体样式来设置颜色，方便在运行时动态改变颜色。\n\n可以使用value属性访问背景颜色的颜色值。\n\ncolor\\_tile\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于color\\_tile\\_t控件。\n\n在xml中使用\"color_tile\"标签创建色块控件。如：\n\n```xml\n<color_tile x=\"c\" y=\"m\" w=\"80\" h=\"30\" bg_color=\"green\" />\n```\n\n> 更多用法请参考：\n[color_tile](https://github.com/zlgopen/awtk/blob/master/design/default/ui/color_picker_rgb.xml)\n\n在c代码中使用函数color_tile\\_create创建色块控件。如：\n\n```c\nwidget_t* color_tile = color_tile_create(win, 10, 10, 128, 30);\ncolor_tile_set_bg_color(color_tile, \"red\");\n```\n> 创建之后，用color\\_tile\\_set\\_bg\\_color设置背景颜色。",
    "name": "color_tile_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建column对象",
        "name": "column_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "column对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为column对象(供脚本语言使用)。",
        "name": "column_cast",
        "return": {
          "type": "widget_t*",
          "desc": "column对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/column.h",
    "desc": "column。一个简单的容器控件，垂直排列其子控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\ncolumn\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于column\\_t控件。\n\n在xml中使用\"column\"标签创建column。如：\n\n```xml\n<column x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=1,r=0)\">\n<button name=\"open:basic\" text=\"Basic\"/>\n<button name=\"open:button\" text=\"Buttons\"/>\n<button name=\"open:edit\" text=\"Edits\"/>\n<button name=\"open:keyboard\" text=\"KeyBoard\"/>\n</column>\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "column_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建combo_box_item对象",
        "name": "combo_box_item_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box_item对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换combo_box_item对象(供脚本语言使用)。",
        "name": "combo_box_item_cast",
        "return": {
          "type": "widget_t*",
          "desc": "combo_box_item对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box_item对象。"
          },
          {
            "type": "bool_t",
            "name": "checked",
            "desc": "是否被选中。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否被选中。",
        "name": "combo_box_item_set_checked",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box_item对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值。",
        "name": "combo_box_item_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_CLICK",
        "desc": "点击事件。",
        "type": "pointer_event_t"
      },
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(勾选状态)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(勾选状态)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "checked",
        "desc": "是否被选中。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/combo_box_item.h",
    "desc": "ComboBox Item控件。\n\n本类仅供combo\\_box控件内部使用。",
    "name": "combo_box_item_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dialog客户区对象。",
        "name": "dialog_client_create",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog_client对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为dialog_client对象(供脚本语言使用)。",
        "name": "dialog_client_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dialog_client对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/dialog_client.h",
    "desc": "对话框客户区控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\ndialog\\_client\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于dialog\\_client\\_t控件。\n\n在xml中使用\"dialog\\_client\"标签创建dialog\\_client。如：\n\n```xml\n<dialog anim_hint=\"center_scale(duration=300)\" x=\"c\" y=\"m\" w=\"80%\" h=\"160\" text=\"Dialog\">\n<dialog_title x=\"0\" y=\"0\" w=\"100%\" h=\"30\" text=\"Hello AWTK\" />\n<dialog_client x=\"0\" y=\"bottom\" w=\"100%\" h=\"-30\">\n<label name=\"\" x=\"center\" y=\"middle:-20\" w=\"200\" h=\"30\" text=\"Are you ready?\"/>\n<button name=\"quit\" x=\"10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"确定\"/>\n<button name=\"quit\" x=\"right:10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"取消\"/>\n</dialog_client>\n</dialog>\n```\n\n在c代码中，用dialog\\_create\\_simple创建对话框时，自动创建dialog客户区对象。",
    "name": "dialog_client_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dialog对象。",
        "name": "dialog_title_create",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog_title对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为dialog_title对象(供脚本语言使用)。",
        "name": "dialog_title_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dialog_title对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/dialog_title.h",
    "desc": "对话框标题控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\ndialog\\_title\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于dialog\\_title\\_t控件。\n\n在xml中使用\"dialog\\_title\"标签创建dialog\\_title。如：\n\n```xml\n<dialog anim_hint=\"center_scale(duration=300)\" x=\"c\" y=\"m\" w=\"80%\" h=\"160\" text=\"Dialog\">\n<dialog_title x=\"0\" y=\"0\" w=\"100%\" h=\"30\" text=\"Hello AWTK\" />\n<dialog_client x=\"0\" y=\"bottom\" w=\"100%\" h=\"-30\">\n<label name=\"\" x=\"center\" y=\"middle:-20\" w=\"200\" h=\"30\" text=\"Are you ready?\"/>\n<button name=\"quit\" x=\"10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"确定\"/>\n<button name=\"quit\" x=\"right:10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"取消\"/>\n</dialog_client>\n</dialog>\n```\n\n在c代码中，用dialog\\_create\\_simple创建对话框时，自动创建dialog标题对象。",
    "name": "dialog_title_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建digit_clock对象",
        "name": "digit_clock_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "digit_clock对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为digit_clock对象(供脚本语言使用)。",
        "name": "digit_clock_cast",
        "return": {
          "type": "widget_t*",
          "desc": "digit_clock对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置显示格式。",
        "name": "digit_clock_set_format",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "format",
        "desc": "显示格式。\n\n* Y 代表年(完整显示)\n* M 代表月(1-12)\n* D 代表日(1-31)\n* h 代表时(0-23)\n* m 代表分(0-59)\n* s 代表秒(0-59)\n* w 代表星期(0-6)\n* W 代表星期的英文缩写(支持翻译)\n* YY 代表年(只显示末两位)\n* MM 代表月(01-12)\n* DD 代表日(01-31)\n* hh 代表时(00-23)\n* mm 代表分(00-59)\n* ss 代表秒(00-59)\n* MMM 代表月的英文缩写(支持翻译)\n\n如 日期时间为：2018/11/12 9:10:20\n* \"Y/M/D\"显示为\"2018/11/12\"\n* \"Y-M-D\"显示为\"2018-11-12\"\n* \"Y-M-D h:m:s\"显示为\"2018-11-12 9:10:20\"\n* \"Y-M-D hh:mm:ss\"显示为\"2018-11-12 09:10:20\"",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/digit_clock.h",
    "desc": "数字时钟控件。\n\ndigit\\_clock\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于digit\\_clock\\_t控件。\n\n在xml中使用\"digit\\_clock\"标签创建数字时钟控件。如：\n\n```xml\n<digit_clock format=\"YY/MM/DD h:mm:ss\"/>\n```\n\n> 更多用法请参考：[digit\\_clock.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/digit_clock.xml)\n\n在c代码中使用函数digit\\_clock\\_create创建数字时钟控件。如：\n\n```c\nwidget_t* tc = digit_clock_create(win, 10, 10, 240, 30);\ndigit_clock_set_format(tc, \"YY/MM/DD h:mm:ss\");\n```\n\n> 完整示例请参考：[digit\\_clock demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/digit_clock.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<style name=\"default\">\n<normal text_color=\"black\" />\n</style>\n```\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L138)",
    "name": "digit_clock_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dragger对象。",
        "name": "dragger_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dragger对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为dragger对象(供脚本语言使用)。",
        "name": "dragger_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dragger对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dragger控件。"
          },
          {
            "type": "xy_t",
            "name": "x_min",
            "desc": "x坐标最小值。"
          },
          {
            "type": "xy_t",
            "name": "y_min",
            "desc": "y坐标最小值。"
          },
          {
            "type": "xy_t",
            "name": "x_max",
            "desc": "x坐标最大值。"
          },
          {
            "type": "xy_t",
            "name": "y_max",
            "desc": "y坐标最大值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置拖动的范围。",
        "name": "dragger_set_range",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_DRAG_START",
        "desc": "开始拖动事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_DRAG",
        "desc": "拖动事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_DRAG_END",
        "desc": "结束拖动事件。",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "x_min",
        "desc": "x坐标的最小值。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y_min",
        "desc": "y坐标的最小值。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "x_max",
        "desc": "x坐标的最大值。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y_max",
        "desc": "y坐标的最大值。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/dragger.h",
    "desc": "dragger控件。\n\n目前主要用于scrollbar里的滑块。",
    "name": "dragger_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建edit对象",
        "name": "edit_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "edit对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为edit对象(供脚本语言使用)。",
        "name": "edit_cast",
        "return": {
          "type": "widget_t*",
          "desc": "edit对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取int类型的值。",
        "name": "edit_get_int",
        "return": {
          "type": "int32_t",
          "desc": "返回int的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取double类型的值。",
        "name": "edit_get_double",
        "return": {
          "type": "double",
          "desc": "返回double的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置int类型的值。",
        "name": "edit_set_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置double类型的值。",
        "name": "edit_set_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "min",
            "desc": "最小长度。"
          },
          {
            "type": "uint32_t",
            "name": "max",
            "desc": "最大长度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为文本输入及其长度限制，不允许输入超过max个字符，少于min个字符时进入error状态。",
        "name": "edit_set_text_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "min",
            "desc": "最小值。"
          },
          {
            "type": "int32_t",
            "name": "max",
            "desc": "最大值。"
          },
          {
            "type": "uint32_t",
            "name": "step",
            "desc": "步长。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为整数输入及取值范围。",
        "name": "edit_set_int_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "double",
            "name": "min",
            "desc": "最小值。"
          },
          {
            "type": "double",
            "name": "max",
            "desc": "最大值。"
          },
          {
            "type": "double",
            "name": "step",
            "desc": "步长。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为浮点数输入及取值范围。",
        "name": "edit_set_float_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "readonly",
            "desc": "只读。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否为只读。",
        "name": "edit_set_readonly",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "cancelable",
            "desc": "是否为可撤销修。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否为可撤销修改。",
        "name": "edit_set_cancelable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_fix",
            "desc": "自动改正。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否为自动改正。",
        "name": "edit_set_auto_fix",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "select_none_when_focused",
            "desc": "是否在获得焦点时不选中文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否在获得焦点时不选中文本。",
        "name": "edit_set_select_none_when_focused",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "open_im_when_focused",
            "desc": "是否在获得焦点时打开输入法。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否在获得焦点时打开输入法。\n\n> * 设置默认焦点时，打开窗口时不弹出软键盘。\n> * 用键盘切换焦点时，编辑器获得焦点时不弹出软键盘。",
        "name": "edit_set_open_im_when_focused",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "close_im_when_blured",
            "desc": "是否是否在失去焦点时关闭输入法。在失去焦点时关闭输入法。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否在失去焦点时关闭输入法。",
        "name": "edit_set_close_im_when_blured",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "input_type_t",
            "name": "type",
            "desc": "输入类型。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器的输入类型。",
        "name": "edit_set_input_type",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "char*",
            "name": "action_text",
            "desc": "软键盘上action按钮的文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置软键盘上action按钮的文本。",
        "name": "edit_set_action_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "char*",
            "name": "tips",
            "desc": "输入提示。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器的输入提示。",
        "name": "edit_set_tips",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "tr_tips",
            "desc": "提示信息。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取翻译之后的文本，然后调用edit_set_tips。",
        "name": "edit_set_tr_tips",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "char*",
            "name": "keyboard",
            "desc": "键盘名称(相应UI资源必须存在)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置自定义软键盘名称。",
        "name": "edit_set_keyboard",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "password_visible",
            "desc": "密码是否可见。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "当编辑器输入类型为密码时，设置密码是否可见。",
        "name": "edit_set_password_visible",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "focus",
            "desc": "是否为焦点。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为焦点。",
        "name": "edit_set_focus",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "cursor",
            "desc": "光标位置。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置输入框的光标位置。",
        "name": "edit_set_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取输入框的光标位置。",
        "name": "edit_get_cursor",
        "return": {
          "type": "uint32_t",
          "desc": "返回光标位置。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "start",
            "desc": "起始偏移。"
          },
          {
            "type": "uint32_t",
            "name": "end",
            "desc": "结束偏移。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "选择指定范围的文本。",
        "name": "edit_set_select",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取选中的文本。\n使用完后需调用 TKMEM_FREE() 进行释放文本占有内存。",
        "name": "edit_get_selected_text",
        "return": {
          "type": "char*",
          "desc": "返回选中文本。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_CHANGING",
        "desc": "文本正在改变事件(编辑中)。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "文本改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "tips",
        "desc": "输入提示。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "tr_tips",
        "desc": "保存用于翻译的提示信息。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "action_text",
        "desc": "软键盘上action按钮的文本。内置取值有：\n\n* next 将焦点切换到下一个控件。\n* done 完成，关闭软键盘。\n\n也可以使用其它文本，比如send表示发送。这个需要自己实现相应的功能，处理EVT\\_IM\\_ACTION事件即可。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "keyboard",
        "desc": "自定义软键盘名称。AWTK优先查找keyboard属性设置的键盘文件名（该键盘的XML文件需要在default\\raw\\ui目录下存在），如果keyboard为空就找input_type设置的键盘类型",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值或最小长度。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值或最大长度。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。\n作为数值型编辑器时，一次增加和减少时的数值。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "input_type",
        "desc": "输入类型。",
        "type": "input_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "readonly",
        "desc": "编辑器是否为只读。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "password_visible",
        "desc": "密码是否可见。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_fix",
        "desc": "输入无效时，是否自动改正。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "select_none_when_focused",
        "desc": "获得焦点时不选中文本。\n\n> 主要用于没有指针设备的情况，否则软键盘无法取消选中文本。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "open_im_when_focused",
        "desc": "获得焦点时打开输入法。\n\n> 主要用于没有指针设备的情况，否则每次切换焦点时都打开输入法。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "close_im_when_blured",
        "desc": "是否在失去焦点时关闭输入法(默认是)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "cancelable",
        "desc": "是否支持撤销编辑。如果为TRUE，在失去焦点之前可以撤销所有修改(恢复获得焦点之前的内容)。\n\n> * 1.一般配合keyboard的\"cancel\"按钮使用。\n> * 2.为TRUE时，如果内容有变化，会设置编辑器的状态为changed，所以此时编辑器需要支持changed状态的style。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/edit.h",
    "desc": "单行编辑器控件。\n\n在基于SDL的平台，单行编辑器控件使用平台原生的输入法，对于嵌入式平台使用内置的输入法。\n\n在使用内置的输入法时，软键盘由输入类型决定，开发者可以自定义软键盘的界面。\n\nedit\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于edit\\_t控件。\n\nedit\\_t本身可以做为容器，放入按钮等控件。有几个特殊的子控件：\n\n* 名为\"clear\"的按钮。点击时清除编辑器中的内容。\n* 名为\"inc\"的按钮。点击时增加编辑器的值，用于实现类似于spinbox的功能。\n* 名为\"dec\"的按钮。点击时减少编辑器的值，用于实现类似于spinbox的功能。\n* 名为\"visible\"的复选框。勾选时显示密码，反之不显示密码。\n\n在xml中使用\"edit\"标签创建编辑器控件。如：\n\n```xml\n<edit x=\"c\" y=\"m\" w=\"80\" h=\"30\"\ntips=\"age\" input_type=\"uint\" min=\"0\" max=\"150\" step=\"1\" auto_fix=\"true\" style=\"number\" />\n```\n\n> XXX：需要在min/max/step之前设置input\\_type。\n\n>更多用法请参考：\n[edit.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/edit.xml)\n\n在c代码中使用函数edit\\_create创建编辑器控件。如：\n\n```c\nwidget_t* edit = edit_create(win, 10, 10, 128, 30);\nwidget_set_text(edit, L\"OK\");\n```\n\n> 创建之后，可以用widget\\_set\\_text或widget\\_set\\_text\\_utf8设置文本内容。\n\n> 完整示例请参考：\n[edit demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/edit.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\" text_align_h=\"left\">\n<normal     bg_color=\"#f0f0f0\" />\n<focused    bg_color=\"#f0f0f0\" border_color=\"black\"/>\n<disable    bg_color=\"gray\" text_color=\"#d0d0d0\" />\n<error      bg_color=\"#f0f0f0\" text_color=\"red\" />\n<empty      bg_color=\"#f0f0f0\" text_color=\"#a0a0a0\" />\n</style>\n```\n\n> 更多用法请参考：\n[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L104)",
    "name": "edit_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建grid_item对象",
        "name": "grid_item_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "grid_item对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为grid_item对象(供脚本语言使用)。",
        "name": "grid_item_cast",
        "return": {
          "type": "widget_t*",
          "desc": "grid_item对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/grid_item.h",
    "desc": "grid_item。一个简单的容器控件，一般作为grid的子控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\ngrid\\_item\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于grid\\_item\\_t控件。\n\n在xml中使用\"grid\\_item\"标签创建grid\\_item。如：\n\n```xml\n<grid x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=2,r=2,m=5,s=5)\">\n<grid_item>\n<button x=\"c\" y=\"m\" w=\"80%\" h=\"30\" name=\"0\" text=\"0\"/>\n</grid_item>\n<grid_item>\n<button x=\"c\" y=\"m\" w=\"80%\" h=\"30\" name=\"1\" text=\"1\"/>\n</grid_item>\n<grid_item>\n<button x=\"c\" y=\"m\" w=\"80%\" h=\"30\" name=\"2\" text=\"2\"/>\n</grid_item>\n<grid_item>\n<button x=\"c\" y=\"m\" w=\"80%\" h=\"30\" name=\"3\" text=\"3\"/>\n</grid_item>\n</grid>\n\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "grid_item_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建grid对象",
        "name": "grid_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "grid对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为grid对象(供脚本语言使用)。",
        "name": "grid_cast",
        "return": {
          "type": "widget_t*",
          "desc": "grid对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/grid.h",
    "desc": "grid控件。一个简单的容器控件，用于网格排列一组控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\ngrid\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于grid\\_t控件。\n\n在xml中使用\"grid\"标签创建grid。如：\n\n```xml\n<grid x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=2,r=2,m=5,s=5)\">\n<button name=\"open:basic\" text=\"Basic\"/>\n<button name=\"open:button\" text=\"Buttons\"/>\n<button name=\"open:edit\" text=\"Edits\"/>\n<button name=\"open:keyboard\" text=\"KeyBoard\"/>\n</grid>\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "grid_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建group_box对象",
        "name": "group_box_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "group_box对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为group_box对象(供脚本语言使用)。",
        "name": "group_box_cast",
        "return": {
          "type": "widget_t*",
          "desc": "group_box对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/group_box.h",
    "desc": "分组控件。\n\n单选按钮在同一个父控件中是互斥的，所以通常将相关的单选按钮放在一个group\\_box中。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\ngroup\\_box\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于group\\_box\\_t控件。\n\n在xml中使用\"group\\_box\"标签创建group\\_box。如：\n\n```xml\n<group_box x=\"20\" y=\"230\" w=\"50%\" h=\"90\" children_layout=\"default(r=3,c=1,ym=2,s=10)\" >\n<radio_button name=\"r1\" text=\"Book\"/>\n<radio_button name=\"r2\" text=\"Food\"/>\n<radio_button name=\"r3\" text=\"Pencil\" value=\"true\"/>\n</group_box>\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "group_box_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建label对象",
        "name": "label_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "length",
            "desc": "最大可显示字符个数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置显示字符的个数(小余0时全部显示)。",
        "name": "label_set_length",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "max_w",
            "desc": "最大宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置max_w。",
        "name": "label_set_max_w",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "line_wrap",
            "desc": "是否自动换行。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否自动换行。",
        "name": "label_set_line_wrap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "word_wrap",
            "desc": "是否允许整个单词换行。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否允许整个单词换行。(需要开启自动换行才有效果)",
        "name": "label_set_word_wrap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "min_w",
            "desc": "最小宽度。"
          },
          {
            "type": "uint32_t",
            "name": "max_w",
            "desc": "最大宽度。"
          },
          {
            "type": "uint32_t",
            "name": "min_h",
            "desc": "最小高度。"
          },
          {
            "type": "uint32_t",
            "name": "max_h",
            "desc": "最大高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "根据文本内容调节控件大小。",
        "name": "label_resize_to_content",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "label对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为label对象(供脚本语言使用)。",
        "name": "label_cast",
        "return": {
          "type": "widget_t*",
          "desc": "label对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "length",
        "desc": "显示字符的个数(小余0时全部显示)。\n主要用于动态改变显示字符的个数，来实现类似[拨号中...]的动画效果。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "line_wrap",
        "desc": "是否自动换行(默认FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "word_wrap",
        "desc": "是否允许整个单词换行(默认FALSE)。\n> 需要开启自动换行才有效果",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max_w",
        "desc": "当auto_adjust_size为TRUE时，用于控制控件的最大宽度，超出该宽度后才自动换行。\n>为0表示忽略该参数。小于0时取父控件宽度加上max_w。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/label.h",
    "desc": "文本控件。用于显示一行或多行文本。\n\n文本控件不会根据文本的长度自动换行，只有文本内容包含换行符时才会换行。\n\n如需自动换行请使用[rich\\_text\\_t](rich_text_t.md)控件。\n\nlabel\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于label\\_t控件。\n\n在xml中使用\"label\"标签创建文本控件。如：\n\n```xml\n<label style=\"center\" text=\"center\"/>\n```\n\n> 更多用法请参考：[label.xml](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/label.xml)\n\n在c代码中使用函数label\\_create创建文本控件。如：\n\n```c\nwidget_t* label = label_create(win, 10, 10, 128, 30);\nwidget_set_text(label, L\"hello awtk!\");\n```\n\n> 创建之后，需要用widget\\_set\\_text或widget\\_set\\_text\\_utf8设置文本内容。\n\n> 完整示例请参考：[label demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/label.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<style name=\"left\">\n<normal text_color=\"red\" text_align_h=\"left\" border_color=\"#a0a0a0\" margin=\"4\" />\n</style>\n```\n\n> 更多用法请参考：\n[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L144)",
    "name": "label_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建pages对象",
        "name": "pages_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "pages对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为pages对象(供脚本语言使用)。",
        "name": "pages_cast",
        "return": {
          "type": "widget_t*",
          "desc": "pages对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "当前Page的序号。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前的Page。",
        "name": "pages_set_active",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "当前Page的名字。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "通过页面的名字设置当前的Page。",
        "name": "pages_set_active_by_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(当前页)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(当前页)改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "active",
        "desc": "当前活跃的page。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/pages.h",
    "desc": "页面管理控件。\n\n只有一个Page处于active状态，处于active状态的Page才能显示并接收事件。\n常用于实现标签控件中的页面管理。\n\npages\\_t是[widget\\_t](widget_t.md)的子类控件，\nwidget\\_t的函数均适用于pages\\_t控件。\n\n在xml中使用\"pages\"标签创建页面管理控件。如：\n\n```xml\n<tab_control x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" >\n<pages x=\"c\" y=\"20\" w=\"90%\" h=\"-60\" value=\"1\">\n...\n</pages>\n<tab_button_group>\n...\n</tab_button_group>\n</tab_control>\n```\n\n> 更多用法请参考：\n[tab control](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)",
    "name": "pages_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建progress_bar对象",
        "name": "progress_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "progress_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为progress_bar对象(供脚本语言使用)。",
        "name": "progress_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "progress_bar对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "进度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置进度条的进度。",
        "name": "progress_bar_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "double",
            "name": "max",
            "desc": "最大值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置最大值。",
        "name": "progress_bar_set_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "progress_bar对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置格式。",
        "name": "progress_bar_set_format",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical",
            "desc": "是否为垂直方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置进度条的方向。",
        "name": "progress_bar_set_vertical",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "show_text",
            "desc": "是否显示文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置进度条的是否显示文本。",
        "name": "progress_bar_set_show_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "reverse",
            "desc": "是否反向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置进度条是否反向。",
        "name": "progress_bar_set_reverse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取进度百分比。\n\n> 当max为100时，percent和value取整后一致。",
        "name": "progress_bar_get_percent",
        "return": {
          "type": "uint32_t",
          "desc": "返回百分比。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "进度条的值[0-max]。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值(缺省为100)。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "format",
        "desc": "数值到字符串转换时的格式，缺省为\"%d\"。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "vertical",
        "desc": "进度条的是否为垂直方向。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "show_text",
        "desc": "是否显示文本。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "reverse",
        "desc": "是否反向显示。如果为TRUE，水平方向从右向左表示增加，垂直方向从上到下表示增加。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/progress_bar.h",
    "desc": "进度条控件。\n\n进度条控件可以水平显示也可以垂直显示，由vertical属性决定。\n\nprogress\\_bar\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于progress\\_bar\\_t控件。\n\n在xml中使用\"progress\\_bar\"标签创建进度条控件。如：\n\n```xml\n<progress_bar name=\"bar1\" x=\"10\" y=\"128\" w=\"240\" h=\"30\" value=\"40\"/>\n<progress_bar name=\"bar2\" x=\"280\" y=\"128\" w=\"30\" h=\"118\" value=\"20\" vertical=\"true\"/>\n```\n\n> 更多用法请参考：\n[basic demo](https://github.com/zlgopen/awtk/blob/master/design/default/ui/basic.xml)\n\n在c代码中使用函数progress\\_bar\\_create创建进度条控件。如：\n\n```c\nwidget_t* progress_bar = progress_bar_create(win, 10, 10, 128, 30);\n```\n\n> 完整示例请参考：\n[progress_bar demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/progress_bar.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<style>\n<normal bg_color=\"#f0f0f0\" text_color=\"gold\" fg_color=\"#c0c0c0\" border_color=\"#a0a0a0\" />\n</style>\n```\n\n> 更多用法请参考：\n[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L183)",
    "name": "progress_bar_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建row对象",
        "name": "row_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "row对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为row对象(供脚本语言使用)。",
        "name": "row_cast",
        "return": {
          "type": "widget_t*",
          "desc": "row对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/row.h",
    "desc": "row。一个简单的容器控件，用于水平排列其子控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\nrow\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于row\\_t控件。\n\n在xml中使用\"row\"标签创建row。如：\n\n```xml\n<row x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=0,r=1)\">\n<button name=\"open:basic\" text=\"Basic\"/>\n<button name=\"open:button\" text=\"Buttons\"/>\n<button name=\"open:edit\" text=\"Edits\"/>\n<button name=\"open:keyboard\" text=\"KeyBoard\"/>\n</row>\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "row_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建slider对象",
        "name": "slider_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slider对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为slider对象(供脚本语言使用)。",
        "name": "slider_cast",
        "return": {
          "type": "widget_t*",
          "desc": "slider对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的值。",
        "name": "slider_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "double",
            "name": "min",
            "desc": "最小值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的最小值。",
        "name": "slider_set_min",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "double",
            "name": "max",
            "desc": "最大值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的最大值。",
        "name": "slider_set_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "double",
            "name": "step",
            "desc": "拖动的最小单位。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的拖动的最小单位。",
        "name": "slider_set_step",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "bar_size",
            "desc": "bar的宽度或高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置bar的宽度或高度。",
        "name": "slider_set_bar_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical",
            "desc": "是否为垂直方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的方向。",
        "name": "slider_set_vertical",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGING",
        "desc": "值正在改变事件(拖动中)。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "step",
        "desc": "拖动的最小单位。",
        "type": "double",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "vertical",
        "desc": "滑块的是否为垂直方向。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "bar_size",
        "desc": "轴的宽度或高度（单位：像素），为0表示为控件的宽度或高度的一半，缺省为0。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "dragger_size",
        "desc": "滑块的宽度或高度（单位：像素），缺省为10。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "dragger_adapt_to_icon",
        "desc": "滑块的宽度或高度是否与icon适应，缺省为true。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "slide_with_bar",
        "desc": "是否允许在轴上滑动来改变滑块位置，缺省为FALSE。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/slider.h",
    "desc": "滑块控件。\n\nslider\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于slider\\_t控件。\n\n在xml中使用\"slider\"标签创建滑块控件。如：\n\n```xml\n<slider x=\"center\" y=\"10\" w=\"80%\" h=\"20\" value=\"10\"/>\n<slider style=\"img\" x=\"center\" y=\"50\" w=\"80%\" h=\"30\" value=\"20\" />\n<slider style=\"img\" x=\"center\" y=\"90\" w=\"80%\" h=\"30\" value=\"30\" min=\"5\" max=\"50\" step=\"5\"/>\n```\n\n> 更多用法请参考：\n[basic](https://github.com/zlgopen/awtk/blob/master/design/default/ui/basic.xml)\n\n在c代码中使用函数slider\\_create创建滑块控件。如：\n\n```c\nwidget_t* slider = slider_create(win, 10, 10, 200, 30);\nwidget_on(slider, EVT_VALUE_CHANGED, on_changed, NULL);\nwidget_on(slider, EVT_VALUE_CHANGING, on_changing, NULL);\n```\n\n> 完整示例请参考：\n[slider demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/slider.c)\n\n可用通过style来设置控件的显示风格，如图片和颜色等等。如：\n\n```xml\n<style name=\"img\" bg_image=\"slider_bg\" fg_image=\"slider_fg\">\n<normal icon=\"slider_drag\"/>\n<pressed icon=\"slider_drag_p\"/>\n<over icon=\"slider_drag_o\"/>\n</style>\n```\n\n> 更多用法请参考：\n[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L179)",
    "name": "slider_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建tab_button_group对象",
        "name": "tab_button_group_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "compact",
            "desc": "是否使用紧凑布局(缺省FALSE)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置compact。",
        "name": "tab_button_group_set_compact",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "scrollable",
            "desc": "是否允许滚动(缺省FALSE)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置scrollable。",
        "name": "tab_button_group_set_scrollable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button_group对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换tab_button_group对象(供脚本语言使用)。",
        "name": "tab_button_group_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tab_button_group对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "compact",
        "desc": "紧凑型排版子控件(缺省FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "scrollable",
        "desc": "是否支持滚动(缺省FALSE)。\n\n> 紧凑型排版子控件时才支持滚动。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/tab_button_group.h",
    "desc": "标签按钮分组控件。\n\n一个简单的容器，主要用于对标签按钮进行布局和管理。\n\ntab\\_button\\_group\\_t是[widget\\_t](widget_t.md)的子类控件，\nwidget\\_t的函数均适用于tab\\_button\\_group\\_t控件。\n\n在xml中使用\"tab\\_button\\_group\"标签创建标签按钮分组控件。如：\n\n```xml\n<tab_button_group x=\"c\" y=\"bottom:10\" w=\"90%\" h=\"30\" compact=\"true\" >\n<tab_button text=\"General\"/>\n<tab_button text=\"Network\" value=\"true\" />\n<tab_button text=\"Security\"/>\n</tab_button_group>\n```\n\n> 更多用法请参考：\n[tab control](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)\n\n可用通过style来设置控件的显示风格，如颜色等等。如：\n\n```xml\n<tab_button_group>\n<style name=\"default\">\n<normal/>\n</style>\n</tab_button_group>\n```",
    "name": "tab_button_group_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建tab_button对象",
        "name": "tab_button_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换tab_button对象(供脚本语言使用)。",
        "name": "tab_button_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tab_button对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "是否为当前标签。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为当前标签。",
        "name": "tab_button_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "当前项的图标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的图标。",
        "name": "tab_button_set_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "当前项的图标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的active图标。",
        "name": "tab_button_set_active_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "动态加载UI的资源名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件动态加载显示UI。",
        "name": "tab_button_set_load_ui",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值(激活状态)即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值(激活状态)改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_CLICK",
        "desc": "点击事件。",
        "type": "pointer_event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "load_ui",
        "desc": "激活后加载的UI名字。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "active_icon",
        "desc": "当前项的图标的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "icon",
        "desc": "非当前项的图标的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/tab_button.h",
    "desc": "标签按钮控件。\n\n标签按钮有点类似单选按钮，但点击标签按钮之后会自动切换当前的标签页。\n\ntab\\_button\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于tab\\_button\\_t控件。\n\n在xml中使用\"tab\\_button\"标签创建标签按钮控件。如：\n\n```xml\n<!-- tab_button_view_page1.xml -->\n<view w=\"100%\" h=\"100%\">\n<label x=\"c\" y=\"m\" w=\"100%\" h=\"60\" text=\"page1\" />\n<button name=\"close\" x=\"c\" y=\"bottom:100\" w=\"80\" h=\"40\" text=\"Close\" />\n</view>\n```\n\n```xml\n<!-- tab_button dynamic load UI -->\n<pages name=\"pages\" x=\"right\" y=\"0\" w=\"70%\" h=\"100%\">\n</pages>\n<list_view x=\"0\" y=\"0\" w=\"30%\" h=\"100%\" item_height=\"40\" auto_hide_scroll_bar=\"true\">\n<scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"-12\" h=\"100%\">\n<tab_button text=\"page1\" load_ui=\"tab_button_view_page1\" value=\"true\"/>\n<tab_button text=\"page2\" load_ui=\"tab_button_view_page2\" />\n<tab_button text=\"page3\" load_ui=\"tab_button_view_page3\" />\n<scroll_view />\n<scroll_bar_d name=\"bar\" x=\"right\" y=\"0\" w=\"12\" h=\"100%\" value=\"0\"/>\n</list_view>\n```\n\n```xml\n<!-- tab_button static load UI -->\n<tab_button_group x=\"c\" y=\"bottom:10\" w=\"90%\" h=\"30\" compact=\"true\" >\n<tab_button text=\"General\"/>\n<tab_button text=\"Network\" value=\"true\" />\n<tab_button text=\"Security\"/>\n</tab_button_group>\n```\n\n标签按钮一般放在标签按钮分组中，布局由标签按钮分组控件决定，不需要指定自己的布局参数和坐标。\n\n> 更多用法请参考：\n[tab control](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<tab_button>\n<style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\">\n<normal     bg_color=\"#d0d0d0\" />\n<pressed    bg_color=\"#f0f0f0\" />\n<over       bg_color=\"#e0e0e0\" />\n<normal_of_active     bg_color=\"#f0f0f0\" />\n<pressed_of_active    bg_color=\"#f0f0f0\" />\n<over_of_active       bg_color=\"#f0f0f0\" />\n</style>\n</tab_button>\n```",
    "name": "tab_button_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建tab_control对象",
        "name": "tab_control_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_control对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换tab_control对象(供脚本语言使用)。",
        "name": "tab_control_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tab_control对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/tab_control.h",
    "desc": "标签控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n\n标签控件通常会包含一个pages控件和一个tab\\_button\\_group控件。\n\n```graphviz\n[default_style]\n\npages_t -> tab_control_t[arrowhead = \"ediamond\"]\ntab_button_group_t -> tab_control_t[arrowhead = \"ediamond\"]\nview_t ->pages_t[arrowhead = \"ediamond\"]\ntab_button_t -> tab_button_group_t[arrowhead = \"ediamond\"]\n```\n\ntab\\_control\\_t是[widget\\_t](widget_t.md)的子类控件，\nwidget\\_t的函数均适用于tab\\_control\\_t控件。\n\n在xml中使用\"tab\\_control\"标签创建标签控件。如：\n\n```xml\n<tab_control x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" >\n<pages x=\"c\" y=\"20\" w=\"90%\" h=\"-60\" value=\"1\">\n...\n</pages>\n<tab_button_group>\n...\n</tab_button_group>\n</tab_control>\n```\n\n> 更多用法请参考：\n[tab control](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)",
    "name": "tab_control_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建view对象",
        "name": "view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "default_focused_child",
            "desc": "缺省获得焦点的子控件(可用控件名或类型)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置缺省获得焦点的子控件(可用控件名或类型)。",
        "name": "view_set_default_focused_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为view对象(供脚本语言使用)。",
        "name": "view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "view对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "default_focused_child",
        "desc": "缺省获得焦点的子控件(可用控件名或类型)。\n\n> view作为pages/slideview的直接子控件才需要设置。\n> 正常情况下，一个窗口只能指定一个初始焦点。\n> 但是对于pages/slideview来说，可能希望每一个页面都有一个初始焦点，此时可用default\\_focused\\_child来指定。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/view.h",
    "desc": "一个通用的容器控件。\n\n它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。\n子控件的布局可用layout\\_children属性指定。\n请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。\n\nview\\_t是[widget\\_t](widget_t.md)的子类控件，widget\\_t的函数均适用于view\\_t控件。\n\n在xml中使用\"view\"标签创建view。如：\n\n```xml\n<view x=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(c=2,r=2,m=5,s=5)\">\n</view>\n```\n\n可用通过style来设置控件的显示风格，如背景颜色等。如：\n\n```xml\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" />\n</style>\n```",
    "name": "view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dialog对象。",
        "name": "dialog_create",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dialog对象，同时创建title/client。",
        "name": "dialog_create_simple",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换dialog对象(供脚本语言使用)。",
        "name": "dialog_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取title控件。",
        "name": "dialog_get_title",
        "return": {
          "type": "widget_t*",
          "desc": "title对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取client控件。",
        "name": "dialog_get_client",
        "return": {
          "type": "widget_t*",
          "desc": "client对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "dialog的名称。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "从资源文件中加载并创建Dialog对象。\n\n本函数在ui\\_loader/ui\\_builder_default里实现。",
        "name": "dialog_open",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          },
          {
            "type": "char*",
            "name": "title",
            "desc": "标题。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置对话框的标题文本。",
        "name": "dialog_set_title",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "模态显示对话框。\ndialog_modal返回后，dialog对象将在下一个idle函数中回收。\n也就是在dialog_modal调用完成后仍然可以访问dialog中控件，直到本次事件结束。",
        "name": "dialog_modal",
        "return": {
          "type": "dialog_quit_code_t",
          "desc": "返回退出码。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          },
          {
            "type": "uint32_t",
            "name": "code",
            "desc": "退出码，作为dialog_modal的返回值(参考：[dialog_quit_code_t](dialog_quit_code_t.md))。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "退出模态显示，关闭对话框。\n\n> 比如，在对话框中关闭按钮的事件处理函数中，调用本函数关闭对话框。",
        "name": "dialog_quit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查对话框是否已经退出模态。",
        "name": "dialog_is_quited",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示已经退出，否则表示没有。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查对话框是否为模态对话框。",
        "name": "dialog_is_modal",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是模态对话框，否则表示不是。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本内容。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "显示时间(单位为毫秒)。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "显示『短暂提示信息』对话框。\n\n窗体样式由dialog_toast.xml文件决定。",
        "name": "dialog_toast",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本内容。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "显示『提示信息』对话框。\n\n窗体样式由dialog_info.xml文件决定。",
        "name": "dialog_info",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本内容。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "显示『警告』对话框。\n\n窗体样式由dialog_warn.xml文件决定。",
        "name": "dialog_warn",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本内容。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "显示『确认』对话框。\n\n窗体样式由dialog_confirm.xml文件决定。",
        "name": "dialog_confirm",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示确认，否则表示取消。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "highlight",
        "desc": "对话框高亮策略。\n\n> 请参考 [对话框高亮策略](https://github.com/zlgopen/awtk/blob/master/docs/dialog_highlight.md)",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/dialog.h",
    "desc": "对话框。 对话框是一种特殊的窗口，大小和位置可以自由设置。\n\nAWTK中的对话框可以是模态的，也可以是非模态的。\n\n如果dialog有透明或半透效果则不支持窗口动画。\n\n> 由于浏览器中无法实现主循环嵌套，因此无法实现模态对话框。\n如果希望自己写的AWTK应用程序可以在浏览器(包括各种小程序)中运行或演示，\n请避免使用模态对话框。\n\n对话框通常由对话框标题和对话框客户区两部分组成：\n\n```graphviz\n[default_style]\n\ndialog_title_t -> dialog_t[arrowhead = \"ediamond\"]\ndialog_client_t -> dialog_t[arrowhead = \"ediamond\"]\n```\n\ndialog\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，window\\_base\\_t的函数均适用于dialog\\_t控件。\n\n在xml中使用\"dialog\"标签创建对话框。如：\n\n```xml\n<dialog anim_hint=\"center_scale(duration=300)\" x=\"c\" y=\"m\" w=\"80%\" h=\"160\" text=\"Dialog\">\n<dialog_title x=\"0\" y=\"0\" w=\"100%\" h=\"30\" text=\"Hello AWTK\" />\n<dialog_client x=\"0\" y=\"bottom\" w=\"100%\" h=\"-30\">\n<label name=\"\" x=\"center\" y=\"middle:-20\" w=\"200\" h=\"30\" text=\"Are you ready?\"/>\n<button name=\"quit\" x=\"10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"确定\"/>\n<button name=\"quit\" x=\"right:10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"取消\"/>\n</dialog_client>\n</dialog>\n```\n\n如果你不需要对话框的标题，可以这样写：\n\n```xml\n<dialog anim_hint=\"center_scale(duration=300)\" x=\"c\" y=\"m\" w=\"80%\" h=\"160\" text=\"Dialog\">\n<label name=\"\" x=\"center\" y=\"middle:-20\" w=\"200\" h=\"30\" text=\"Are you ready?\"/>\n<button name=\"quit\" x=\"10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"确定\"/>\n<button name=\"quit\" x=\"right:10\" y=\"bottom:10\" w=\"40%\" h=\"30\" text=\"取消\"/>\n</dialog>\n```\n\n打开非模态对话框时，其用法与普通窗口一样。打开非模态对话框时，还需要调用dialog\\_modal。\n\n```c\nwidget_t* dlg = dialog_open(name);\n\nret = dialog_modal(dlg);\n```\n\n关闭模态对话框用dialog\\_quit\n\n```c\nstatic ret_t on_dialog_btn_click(void* ctx, event_t* evt) {\nwidget_t* win = widget_get_window(WIDGET(evt->target));\nint code = (char*)ctx - (char*)NULL;\n\ndialog_quit(win, code);\n\nreturn RET_OK;\n}\n```\n\n关闭非模态对话框用window\\_close。\n\n```c\nstatic ret_t on_dialog_btn_click(void* ctx, event_t* evt) {\nwidget_t* win = widget_get_window(WIDGET(evt->target));\nint code = (char*)ctx - (char*)NULL;\n\nwindow_close(win);\n\nreturn RET_OK;\n}\n```\n\n> 更多用法请参考：\n[dialog.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)\n\n> 完整C代码示例请参考：\n\n* [非模态对话框](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/dialog.c)\n\n* [模态对话框](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/dialog_modal.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<style name=\"default\">\n<normal border_color=\"#606060\" />\n</style>\n```\n\n> 更多用法请参考：\n[theme default]\n(https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L324)",
    "name": "dialog_t",
    "parent": "window_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true,
      "window": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "native_window_t*",
            "name": "win",
            "desc": "win对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "bool_t",
            "name": "force",
            "desc": "无论是否shared都move。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "移动窗口。",
        "name": "native_window_move",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "native_window_t*",
            "name": "win",
            "desc": "win对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高。"
          },
          {
            "type": "bool_t",
            "name": "force",
            "desc": "无论是否shared都resize。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "调整窗口大小。",
        "name": "native_window_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "native_window_t*",
            "name": "win",
            "desc": "win对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "最小化窗口。",
        "name": "native_window_minimize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "native_window_t*",
            "name": "win",
            "desc": "win对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "最大化窗口。",
        "name": "native_window_maximize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "native_window_t*",
            "name": "win",
            "desc": "win对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "恢复窗口大小。",
        "name": "native_window_restore",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "native_window_t*",
            "name": "win",
            "desc": "win对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "窗口居中。",
        "name": "native_window_center",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "native_window_t*",
            "name": "win",
            "desc": "win对象。"
          },
          {
            "type": "bool_t",
            "name": "show",
            "desc": "是否显示。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "是否显示边框。",
        "name": "native_window_show_border",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "native_window_t*",
            "name": "win",
            "desc": "win对象。"
          },
          {
            "type": "bool_t",
            "name": "fullscreen",
            "desc": "是否全屏。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "是否全屏。",
        "name": "native_window_set_fullscreen",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "native_window_t*",
            "name": "win",
            "desc": "win对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "鼠标光标的名称。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "鼠标光标的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置鼠标光标。",
        "name": "native_window_set_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/native_window.h",
    "desc": "原生窗口。",
    "name": "native_window_t",
    "parent": "object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建window对象",
        "name": "window_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "以缺省的方式创建window对象。",
        "name": "window_create_default",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window对象。"
          },
          {
            "type": "bool_t",
            "name": "fullscreen",
            "desc": "是否全屏。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为全屏窗口。\n\n>如果app_type是SIMULATOR，全屏是指与LCD相同大小，而非让SDL窗口全屏。",
        "name": "window_set_fullscreen",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window对象。"
          },
          {
            "type": "uint32_t",
            "name": "design_w",
            "desc": "设计时宽度。"
          },
          {
            "type": "uint32_t",
            "name": "design_h",
            "desc": "设计时高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "当设计分辨率和实际分辨率不一致时，自动调整子控件的位置和大小。\n\n> 当子控件有self_layout参数或者子控件的父控件有children_layout参数时，不会自动调整。",
        "name": "window_set_auto_scale_children",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "window的名称。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "从资源文件中加载并创建window_base对象。本函数在ui_loader/ui_builder_default里实现。",
        "name": "window_open",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "window的名称。"
          },
          {
            "type": "widget_t*",
            "name": "to_close",
            "desc": "关闭该窗口。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "从资源文件中加载并创建window对象。本函数在ui_loader/ui_builder_default里实现。",
        "name": "window_open_and_close",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "关闭窗口。",
        "name": "window_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "立即无条件关闭窗口(无动画)。",
        "name": "window_close_force",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为window对象(供脚本语言使用)。",
        "name": "window_cast",
        "return": {
          "type": "widget_t*",
          "desc": "window对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "fullscreen",
        "desc": "是否全屏。\n\n>对于模拟器，全屏是让窗口和LCD具有相同大小，而非让SDL窗口全屏。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/window.h",
    "desc": "窗口。\n\n缺省的应用程序窗口，占用除system\\_bar\\_t之外的整个区域，请不要修改它的位置和大小(除非你清楚后果)。\n\nwindow\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，window\\_base\\_t的函数均适用于window\\_t控件。\n\n在xml中使用\"window\"标签创建窗口。无需指定坐标和大小，可以指定窗体样式和动画名称。如：\n\n```xml\n<window theme=\"basic\" anim_hint=\"htranslate\">\n...\n</window>\n```\n\n>\n更多用法请参考：[window.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)\n\n在c代码中使用函数window\\_create创建窗口。如：\n\n```c\nwidget_t* window = window_create(NULL, 0, 0, 0, 0);\n```\n\n> 无需指定父控件、坐标和大小，使用0即可。\n\n> 完整示例请参考：[window\ndemo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/)\n\n可用通过style来设置窗口的风格，如背景颜色或图片等。如：\n\n```xml\n<style name=\"bricks\">\n<normal bg_image=\"bricks\"  bg_image_draw_type=\"repeat\"/>\n</style>\n```\n\n> 更多用法请参考：[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L0)",
    "name": "window_t",
    "parent": "window_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true,
      "window": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建gif_image对象",
        "name": "gif_image_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "gif_image对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "播放。",
        "name": "gif_image_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "gif_image对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "停止(并重置index为-1)。",
        "name": "gif_image_stop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "gif_image对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "暂停。",
        "name": "gif_image_pause",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "gif_image对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为gif_image对象(供脚本语言使用)。",
        "name": "gif_image_cast",
        "return": {
          "type": "widget_t*",
          "desc": "gif_image对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "gif_image/gif_image.h",
    "desc": "GIF图片控件。\n\n> 注意：GIF图片的尺寸大于控件大小时会自动缩小图片，但一般的嵌入式系统的硬件加速都不支持图片缩放，\n所以缩放图片会导致性能明显下降。如果性能不满意时，请确认一下GIF图片的尺寸是否小余控件大小。\n\ngif\\_image\\_t是[image\\_base\\_t](image_base_t.md)的子类控件，image\\_base\\_t的函数均适用于gif\\_image\\_t控件。\n\n在xml中使用\"gif\"标签创建GIF图片控件。如：\n\n```xml\n<gif image=\"bee\"/>\n```\n\n>更多用法请参考：\n[gif\nimage](https://github.com/zlgopen/awtk/blob/master/design/default/ui/gif_image.xml)\n\n在c代码中使用函数gif\\_image\\_create创建GIF图片控件。如：\n\n```c\nwidget_t* image = gif_image_create(win, 10, 10, 200, 200);\nimage_set_image(image, \"bee\");\n```\n\n> 创建之后:\n>\n> 需要用widget\\_set\\_image设置图片名称。\n\n> 完整示例请参考：[gif image demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/gif_image.c)\n\n可用通过style来设置控件的显示风格，如背景和边框等。如：\n\n```xml\n<gif>\n<style name=\"border\">\n<normal border_color=\"#000000\" bg_color=\"#e0e0e0\" text_color=\"black\"/>\n</style>\n</gif>\n```\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml)",
    "name": "gif_image_t",
    "parent": "image_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建keyboard对象",
        "name": "keyboard_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "keyboard对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为keyboard对象(供脚本语言使用)。",
        "name": "keyboard_cast",
        "return": {
          "type": "widget_t*",
          "desc": "keyboard对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "keyboard/keyboard.h",
    "desc": "软键盘。\n\n软键盘是一个特殊的窗口，由编辑器通过输入法自动打开和关闭。\n\n这里介绍一下定制软键盘的方法：\n\n编辑器输入类型和软键盘UI资源文件的对应关系:\n\n| 输入类型       | 软键盘UI资源文件|\n|----------------|:---------------:|\n| INPUT\\_PHONE    | kb\\_phone.xml    |\n| INPUT\\_INT      | kb\\_int.xml      |\n| INPUT\\_FLOAT    | kb\\_float.xml    |\n| INPUT\\_UINT     | kb\\_uint.xml     |\n| INPUT\\_UFLOAT   | kb\\_ufloat.xml   |\n| INPUT\\_HEX      | kb\\_hex.xml      |\n| INPUT\\_EMAIL    | kb\\_ascii.xml    |\n| INPUT\\_PASSWORD | kb\\_ascii.xml    |\n| INPUT\\_ASCII    | kb\\_ascii.xml    |\n| INPUT\\_CUSTOM   | 使用自定义的键盘 |\n| 其它            | kb\\_default.xml  |\n\nkeyboard中按钮子控件的名称有些特殊要求：\n\n|  名称          | 功能            |\n|----------------|:---------------:|\n| return         | 回车键          |\n| action         | 定制按钮        |\n| backspace      | 删除键          |\n| tab            | tab键           |\n| space          | 空格键          |\n| close          | 关闭软键盘       |\n| clear          | 清除编辑器的内容 |\n| cancel         | 恢复编辑器的内容 |\n| back           | 关闭当前窗口     |\n| back_to_home   | 返回home窗口    |\n| 前缀key:        | 键值           |\n| 前缀hard_key:   | 模拟物理键盘    |\n| 前缀page:       | 切换到页面      |\n| 前缀opt:        | 多个字符选择一个，点击切换到下一个，超时提交字符(用于实现九宫格输入) |\n\n示例：\n\n* 按键\"a\"，提交输入法处理。\n\n```xml\n<button repeat=\"300\" name=\"key:a\" text=\"a\"/>\n```\n\n* 字符\"a\"，直接提交到编辑器。\n\n```xml\n<button repeat=\"300\" name=\"a\" text=\"a\"/>\n```\n\n* 模拟物理键盘数字\"1\"，触发key down/up事件（可以用来选择候选字）。\n\n```xml\n<button repeat=\"300\" name=\"hard_key:1\" text=\"1\"/>\n```\n\n* 九宫格输入\n\n```xml\n<button repeat=\"300\" name=\"opt:._@/#\" text=\"._@/#\"/>\n<button repeat=\"300\" name=\"opt:abc\" text=\"abc\"/>\n<button repeat=\"300\" name=\"opt:def\" text=\"def\"/>\n```\n\n\n* 输入语言切换\n\n有的输入法，同时支持输入多种语言。\n比如T9，可以同时支持中文和英文输入，配合软键盘随时切换输入的语言。\n\n可以在pages的页面里指定lang属性，切换到该页面时会设置输入法的语言。如：\n\n```xml\n<pages x=\"0\" y=\"bottom\" w=\"100%\" h=\"-28\" active=\"2\">\n<view name=\"lower\" lang=\"en_us\"\nx=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(r=4,c=4,s=2,m=2)\">\n...\n</view>\n<view name=\"chinese\" lang=\"zh_cn\"\nx=\"0\" y=\"0\" w=\"100%\" h=\"100%\" children_layout=\"default(r=4,c=4,s=2,m=2)\">\n...\n</view>\n</pages>\n```\n\n* 键盘跟随。\n默认情况下，键盘从底部弹出。如果需要让键盘在编辑器附近弹出，可以指定floating属性为true。如：\n\n```xml\n<keyboard theme=\"keyboard\" w=\"200\" h=\"200\" floating=\"true\">\n```\n\n> 更多用法请参考：\n[kb_default](https://github.com/zlgopen/awtk/blob/master/design/default/ui/kb_default.xml)",
    "name": "keyboard_t",
    "parent": "window_base_t",
    "annotation": {
      "design": true,
      "widget": true,
      "window": true,
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建mutable_image对象",
        "name": "mutable_image_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "mutable_image/mutable_image.h",
    "desc": "mutable图片控件。\n\n像摄像头和视频的图像是变化的，每一帧都不同，我们把这类图片称为mutable image。\n\n本控件辅助实现摄像头和视频的显示功能。\n\nmutable\\_image\\_t是[image\\_base\\_t](image_base_t.md)的子类控件，image\\_base\\_t的函数均适用于mutable\\_image\\_t控件。\n\n在xml中使用\"mutable\\_image\"标签创建mutable图片控件。如：\n\n```xml\n<mutable_image w=\"100%\" h=\"100%\"/>\n```\n\n>更多用法请参考：\n[mutable\nimage](https://github.com/zlgopen/awtk/blob/master/design/default/ui/mutable_image.xml)\n\n在c代码中使用函数mutable\\_image\\_create创建mutable图片控件。如：\n\n```c\nwidget_t* image = mutable_image_create(win, 10, 10, 200, 200);\nmutable_image_set_prepare_image(image, get_camera_image, camera);\n```\n\n> 创建之后:\n>\n> 需要用mutable\\_image\\_set\\_create\\_image设置创建图片的回调函数。\n> 需要用mutable\\_image\\_set\\_prepare\\_image设置准备图片的回调函数。\n\n> 完整示例请参考：[mutable image demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/mutable_image.c)\n\n一般不需通过style来设置控件的显示风格，如果在特殊情况下需要，可以参考其它控件。",
    "name": "mutable_image_t",
    "parent": "image_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建svg_image对象",
        "name": "svg_image_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称，该图片必须存在于资源管理器。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的图片名称。\n\n> 如果需要显示文件系统中的图片，只需将图片名称换成实际的文件名，并加上\"file://\"前缀即可。",
        "name": "svg_image_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "svg_image对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为svg_image对象(供脚本语言使用)。",
        "name": "svg_image_cast",
        "return": {
          "type": "widget_t*",
          "desc": "svg_image对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "svg_image/svg_image.h",
    "desc": "SVG图片控件。\n\nsvg\\_image\\_t是[image\\_base\\_t](image_base_t.md)的子类控件，image\\_base\\_t的函数均适用于svg\\_image\\_t控件。\n\n在xml中使用\"svg\"标签创建SVG图片控件。如：\n\n```xml\n<svg image=\"girl\"/>\n```\n\n>更多用法请参考：[svg image](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/ui/svg_image.xml)\n\n在c代码中使用函数svg\\_image\\_create创建SVG图片控件。如：\n\n```c\nwidget_t* image = svg_image_create(win, 10, 10, 200, 200);\nimage_set_image(image, \"girl\");\n```\n\n> 创建之后: 需要用widget\\_set\\_image设置图片名称。\n\n> 完整示例请参考：[svg image demo](\nhttps://github.com/zlgopen/awtk-c-demos/blob/master/demos/svg_image.c)\n\n可用通过style来设置控件的显示风格，如背景和边框等。如：\n\n```xml\n<svg>\n<style name=\"default\">\n<normal border_color=\"green\" fg_color=\"red\" />\n</style>\n</svg>\n```\n\n> 更多用法请参考：[theme default](\nhttps://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml)",
    "name": "svg_image_t",
    "parent": "image_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "idle_info_t*",
            "name": "idle",
            "desc": "idle_info对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为idle_info对象(供脚本语言使用)。",
        "name": "idle_info_cast",
        "return": {
          "type": "idle_info_t*",
          "desc": "idle_info对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "ctx",
        "desc": "idle回调函数上下文。",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "extra_ctx",
        "desc": "idle回调函数上下文。",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "id",
        "desc": "idle的ID\n\n> 为TK\\_INVALID\\_ID时表示无效idle。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/idle_info.h",
    "desc": "单个idle的信息。",
    "name": "idle_info_t",
    "parent": "object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建对象。",
        "name": "object_array_create",
        "return": {
          "type": "object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "for script gc",
        "name": "object_array_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "清除全部属性。",
        "name": "object_array_clear_props",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在指定位置插入一个元素。",
        "name": "object_array_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "追加一个元素。",
        "name": "object_array_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找元素出现的第一个位置。",
        "name": "object_array_index_of",
        "return": {
          "type": "int32_t",
          "desc": "如果找到返回其位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找元素出现的最后一个位置。",
        "name": "object_array_last_index_of",
        "return": {
          "type": "int32_t",
          "desc": "如果找到返回其位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在指定位置删除一个元素。",
        "name": "object_array_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "用于返回值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在指定位置删除一个元素，并返回它。",
        "name": "object_array_get_and_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": "属性个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/object_array.h",
    "desc": "简单的动态数组，内部存放value对象。\n\n访问时属性名称为：\n\n* \"size\"/\"length\" 用于获取数组的长度。\n* index 用于访问属性，-1可以用来追加新元素。",
    "name": "object_array_t",
    "parent": "object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建对象。",
        "name": "object_default_create",
        "return": {
          "type": "object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "for script gc",
        "name": "object_default_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "清除全部属性。",
        "name": "object_default_clear_props",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "props_size",
        "desc": "属性个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/object_default.h",
    "desc": "对象接口的缺省实现。\n\n内部使用有序数组保存所有属性，可以快速查找指定名称的属性。",
    "name": "object_default_t",
    "parent": "object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "timer_info_t*",
            "name": "timer",
            "desc": "timer_info对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为timer_info对象(供脚本语言使用)。",
        "name": "timer_info_cast",
        "return": {
          "type": "timer_info_t*",
          "desc": "timer_info对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "ctx",
        "desc": "定时器回调函数的上下文",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "extra_ctx",
        "desc": "定时器回调函数的上下文",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "id",
        "desc": "定时器的ID\n\n> 为TK\\_INVALID\\_ID时表示无效定时器。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "now",
        "desc": "当前时间(相对时间，单位为毫秒)。",
        "type": "uint64_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/timer_info.h",
    "desc": "单个定时器的信息。",
    "name": "timer_info_t",
    "parent": "object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建calibration_win对象",
        "name": "calibration_win_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "calibration_win对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为calibration_win对象(供脚本语言使用)。",
        "name": "calibration_win_cast",
        "return": {
          "type": "widget_t*",
          "desc": "calibration_win对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/calibration_win.h",
    "desc": "电阻屏校准窗口。\n\ncalibration\\_win\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，\nwindow\\_base\\_t的函数均适用于calibration\\_win\\_t控件。\n\n在xml中使用\"calibration\\_win\"标签创建电阻屏校准窗口。如：\n\n```xml\n<calibration_win name=\"cali\" w=\"100%\" h=\"100%\" text=\"Please click the center of cross\">\n</calibration_win>\n```\n\n> 更多用法请参考：\n[window.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/calibration_win.xml)\n\n在c代码中使用函数calibration\\_win\\_create创建窗口。如：\n\n```c\nwidget_t* win = calibration_win_create(NULL, 0, 0, 320, 480);\n```\n\n通过calibration\\_win\\_set\\_on\\_done注册回调函数，用于保存校准数据。",
    "name": "calibration_win_t",
    "parent": "window_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true,
      "window": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建combo_box对象",
        "name": "combo_box_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换combo_box对象(供脚本语言使用)。",
        "name": "combo_box_cast",
        "return": {
          "type": "widget_t*",
          "desc": "combo_box对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "const char*",
            "name": "open_window",
            "desc": "弹出窗口的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "点击按钮时可以打开popup窗口，本函数可设置窗口的名称。",
        "name": "combo_box_set_open_window",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "重置所有选项。",
        "name": "combo_box_reset_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取选项个数。",
        "name": "combo_box_count_options",
        "return": {
          "type": "int32_t",
          "desc": "返回选项个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置第index个选项为当前选中的选项。",
        "name": "combo_box_set_selected_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "bool_t",
            "name": "localize_options",
            "desc": "是否本地化(翻译)选项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否本地化(翻译)选项。",
        "name": "combo_box_set_localize_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值。",
        "name": "combo_box_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "uint32_t",
            "name": "item_height",
            "desc": "item的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置item高度。",
        "name": "combo_box_set_item_height",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "追加一个选项。",
        "name": "combo_box_append_option",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "删除选项。",
        "name": "combo_box_remove_option",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "const char*",
            "name": "options",
            "desc": "选项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置选项。",
        "name": "combo_box_set_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取combo_box的值。",
        "name": "combo_box_get_value",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取combo_box的文本。",
        "name": "combo_box_get_text",
        "alias": "combo_box_get_text_value",
        "return": {
          "type": "const char*",
          "desc": "返回文本。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值即将改变事件。",
        "type": "value_change_event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值改变事件。",
        "type": "value_change_event_t"
      }
    ],
    "properties": [
      {
        "name": "open_window",
        "desc": "为点击按钮时，要打开窗口的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected_index",
        "desc": "当前选中的选项。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": "值。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "localize_options",
        "desc": "是否本地化(翻译)选项(缺省为TRUE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "options",
        "desc": "设置可选项(冒号分隔值和文本，分号分隔选项，如:1:red;2:green;3:blue)。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "item_height",
        "desc": "下拉选项的高度。如果open_window为空，则使用缺省高度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/combo_box.h",
    "desc": "下拉列表控件。\n\n点击右边的按钮，可弹出一个下拉列表，从中选择一项作为当前的值。\n\ncombo\\_box\\_t是[edit\\_t](edit_t.md)的子类控件，edit\\_t的函数均适用于combo\\_box\\_t控件。\n\n在xml中使用\"combo_box\"标签创建下拉列表控件。\n\n列表选项可以直接写在\"options\"属性中。如：\n\n```xml\n<combo_box readonly=\"true\" x=\"10\" y=\"bottom:5\" w=\"200\" h=\"30\" tr_text=\"ok\"\noptions=\"1:ok;2:cancel;\"/>\n```\n\n列表选项也可以放在独立的窗口中，用属性\"open_window\"指定窗口的名称。如：\n\n```xml\n<combo_box open_window=\"language\" readonly=\"true\" x=\"10\" y=\"bottom:50\" w=\"200\" h=\"30\"\ntr_text=\"english\"/>\n```\n\nlanguage.xml:\n\n```xml\n<popup close_when_click_outside=\"true\" h=\"80\" >\n<list_view x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\" item_height=\"30\">\n<scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"-12\" h=\"100%\">\n<combo_box_item tr_text=\"english\"/>\n<combo_box_item tr_text=\"chinese\" />\n</scroll_view>\n<scroll_bar_d name=\"bar\" x=\"right\" y=\"0\" w=\"12\" h=\"100%\" value=\"0\"/>\n</list_view>\n</popup>\n```\n\n> 更多用法请参考：[combo_box.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/combo_box.xml)\n\n\n\n如果在文本比较长时，希望在获得焦点时文本自动滚动，可以放入一个hscroll_label为子控件，并命名为\"value\"。如：\n\n```xml\n<combo_box left_margin=\"6\" readonly=\"true\" x=\"10\" y=\"50\" w=\"80\" h=\"30\" options=\"leftttttttttt;centerrrrrrrrrrrrrrrr;rightttttttttt;\"\nselected_index=\"1\">\n<hscroll_label x=\"0\" y=\"0\" w=\"-30\" h=\"100%\"\nname=\"value\"\nlull=\"1000\"\nloop=\"true\"\nyoyo=\"true\"\nellipses=\"true\"\nonly_parent_focus=\"true\"/>\n<button style=\"combobox_down\" x=\"right:5\" y=\"middle\" w=\"20\" h=\"20\"/>\n</combo_box>\n```\n\n在c代码中使用函数combo\\_box\\_create创建下拉列表控件。如：\n\n```c\nwidget_t* combo_box = combo_box_create(win, 10, 10, 128, 30);\n\ncombo_box_set_options(combo_box, \"left;center;right;\");\ncombo_box_set_selected_index(combo_box, 1);\n\n```\n\n创建之后：\n\n* 用combo\\_box\\_set\\_options设置可选项目。\n* 用combo\\_box\\_set\\_selected\\_index设置缺省项。\n\n> 完整示例请参考：[combo_box\ndemo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/combo_box.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<combo_box>\n<style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\" text_align_h=\"left\">\n<normal     bg_color=\"#f0f0f0\" />\n<focused    bg_color=\"#f0f0f0\" border_color=\"black\"/>\n<empty      bg_color=\"#f0f0f0\" text_color=\"#a0a0a0\" />\n</style>\n</combo_box>\n```\n\n* 1.combobox的下拉按钮的style名称为combobox_down，可以在窗体样式文件中设置。\n\n```xml\n<button>\n<style name=\"combobox_down\" border_color=\"#a0a0a0\">\n<normal     bg_color=\"#f0f0f0\" icon=\"arrow_down_n\"/>\n<pressed    bg_color=\"#c0c0c0\" icon=\"arrow_down_p\"/>\n<over       bg_color=\"#e0e0e0\" icon=\"arrow_down_o\"/>\n</style>\n</button>\n```\n\n* 2.combobox的弹出popup窗口的style名称为combobox_popup，可以在窗体样式文件中设置。\n\n```xml\n<popup>\n<style name=\"combobox_popup\" border_color=\"red\">\n<normal bg_color=\"#808080\"/>\n</style>\n</popup>\n```\n\n> 更多用法请参考：[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L422)",
    "name": "combo_box_t",
    "parent": "edit_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建image对象",
        "name": "image_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "image_draw_type_t",
            "name": "draw_type",
            "desc": "绘制方式(仅在没有旋转和缩放时生效)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置图片的绘制方式。",
        "name": "image_set_draw_type",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为image对象(供脚本语言使用)。",
        "name": "image_cast",
        "return": {
          "type": "widget_t*",
          "desc": "image对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "draw_type",
        "desc": "图片的绘制方式(仅在没有旋转和缩放时生效)。",
        "type": "image_draw_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/image.h",
    "desc": "图片控件。\n\n用来显示一张静态图片，目前支持bmp/png/jpg等格式。\n\n如果要显示gif文件，请用[gif\\_image](gif_image_t.md)。\n\n如果要显示svg文件，请用[svg\\_image](svg_image_t.md)。\n\n如果需要支持勾选效果，请设置**selectable**属性。\n\n如果需要支持点击效果，请设置**clickable**属性。\n\nimage\\_t是[image\\_base\\_t](image_base_t.md)的子类控件，image\\_base\\_t的函数均适用于image\\_t控件。\n\n在xml中使用\"image\"标签创建图片控件。如：\n\n```xml\n<image style=\"border\" image=\"earth\" draw_type=\"icon\" />\n```\n\n> 更多用法请参考：\n[image.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/images.xml)\n\n在c代码中使用函数image\\_create创建图片控件。如：\n\n```c\nwidget_t* image = image_create(win, 10, 10, 128, 30);\nimage_set_image(image, \"earth\");\n```\n\n> 创建之后:\n>\n> 需要用widget\\_set\\_image设置图片名称。\n>\n> 可以用image\\_set\\_draw\\_type设置图片的绘制方式。\n\n> 绘制方式请参考[image\\_draw\\_type\\_t](image_draw_type_t.md)\n\n> 绘制方式的属性值和枚举值:\n[image\\_draw\\_type\\_name\\_value](https://github.com/zlgopen/awtk/blob/master/src/base/enums.c#L98)\n\n> 完整示例请参考：\n[image demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/image.c)\n\n可用通过style来设置控件的显示风格，如背景和边框等。如：\n\n```xml\n<image>\n<style name=\"border\">\n<normal border_color=\"#000000\" bg_color=\"#e0e0e0\" text_color=\"black\"/>\n</style>\n</image>\n```\n\n> 更多用法请参考：\n[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L313)",
    "name": "image_t",
    "parent": "image_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建overlay对象",
        "name": "overlay_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "click_through",
            "desc": "是否启用点击穿透。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否启用点击穿透。",
        "name": "overlay_set_click_through",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "always_on_top",
            "desc": "是否总是在最上面。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否总是在最上面。",
        "name": "overlay_set_always_on_top",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "overlay对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为overlay对象(供脚本语言使用)。",
        "name": "overlay_cast",
        "return": {
          "type": "widget_t*",
          "desc": "overlay对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "click_through",
        "desc": "点击穿透。点击没有子控件的位置，是否穿透到底层窗口。\n\n缺省不启用。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "always_on_top",
        "desc": "是否总在最上面。\n\n缺省不启用。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/overlay.h",
    "desc": "overlay窗口。\n\noverlay窗口有点类似于非模态的dialog，但是它位置和大小是完全自由的，窗口管理器不会对它做任何限制。\n\n如果overlay窗口有透明或半透效果，则不支持窗口动画，但可以通过移动窗口位置来实现类似动画的效果。\n\noverlay\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，window\\_base\\_t的函数均适用于overlay\\_t控件。\n\n在xml中使用\"overlay\"标签创建窗口。需要指定坐标和大小，可以指定窗体样式和动画名称。如：\n\n```xml\n<overlay theme=\"basic\" x=\"100\" y=\"100\" w=\"200\" h=\"300\">\n...\n</overlay>\n```\n\n>\n更多用法请参考：[overlay.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)\n\n在c代码中使用函数overlay\\_create创建窗口。如：\n\n```c\nwidget_t* overlay = overlay_create(NULL, 100, 100, 200, 300);\n```\n\n> 完整示例请参考：[overlay\ndemo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/)\n\n可用通过style来设置窗口的风格，如背景颜色或图片等。如：\n\n```xml\n<style name=\"bricks\">\n<normal bg_image=\"bricks\"  bg_image_draw_type=\"repeat\"/>\n</style>\n```\n\n> 更多用法请参考：[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L0)",
    "name": "overlay_t",
    "parent": "window_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true,
      "window": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建popup对象。",
        "name": "popup_create",
        "return": {
          "type": "widget_t*",
          "desc": "popup对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "popup对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为popup对象(供脚本语言使用)。",
        "name": "popup_cast",
        "return": {
          "type": "widget_t*",
          "desc": "popup对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "close_when_click",
            "desc": "点击时是否关闭窗口。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置点击时是否关闭窗口。",
        "name": "popup_set_close_when_click",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "close_when_click_outside",
            "desc": "点击窗口外部时是否关闭窗口。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置点击窗口外部时是否关闭窗口。",
        "name": "popup_set_close_when_click_outside",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "close_when_timeout",
            "desc": "大于0时，为定时器时间(ms)，超时关闭窗口。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置超时关闭时间(ms)。",
        "name": "popup_set_close_when_timeout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "close_when_click",
        "desc": "点击时是否关闭窗口。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "close_when_click_outside",
        "desc": "点击到窗口外时是否关闭窗口。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "close_when_timeout",
        "desc": "超时后自动关闭窗口(ms)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "widgets/popup.h",
    "desc": "弹出窗口。\n\n弹出窗口是一种特殊的窗口，大小和位置可以自由设置，主要用来实现右键菜单和combo\\_box的下列列表等功能。\n\npopup\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，window\\_base\\_t的函数均适用于popup\\_t控件。\n\n在xml中使用\"popup\"标签创建弹出窗口。如：\n\n```xml\n<popup close_when_click_outside=\"true\" x=\"c\" y=\"m\" w=\"80%\" h=\"80\" >\n<list_view x=\"0\"  y=\"0\" w=\"100%\" h=\"100%\" item_height=\"30\">\n<scroll_view name=\"view\" x=\"0\"  y=\"0\" w=\"-12\" h=\"100%\">\n<combo_box_item tr_text=\"english\"/>\n<combo_box_item tr_text=\"chinese\" />\n</scroll_view>\n<scroll_bar_d name=\"bar\" x=\"right\" y=\"0\" w=\"12\" h=\"100%\" value=\"0\"/>\n</list_view>\n</popup>\n```\n\n>\n更多用法请参考：[popup](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)\n\n在c代码中使用函数popup\\_create创建弹出窗口。如：\n\n```c\nwidget_t* win = popup_create(NULL, 0, 0, w, h);\npopup_set_close_when_click_outside(win, TRUE);\n```\n\n> 创建之后，和使用普通窗口是一样的。\n\n> 完整示例请参考：[combo_box.c](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/combo_box.c)\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<popup>\n<style name=\"default\" border_color=\"#a0a0a0\">\n<normal bg_color=\"#f0f0f0\"/>\n</style>\n</popup>\n```\n\n> 更多用法请参考：[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L324)",
    "name": "popup_t",
    "parent": "window_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true,
      "window": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建spin_box对象",
        "name": "spin_box_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "spin_box对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为spin_box对象(供脚本语言使用)。",
        "name": "spin_box_cast",
        "return": {
          "type": "widget_t*",
          "desc": "spin_box对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/spin_box.h",
    "desc": "spinbox控件。\n\n一个特殊的数值编辑器，将edit\\_t和button\\_t进行组合，方便编辑数值。\n\n点击向上的按钮将数值增加一个step，点击向下的按钮将数值减小一个step。\nstep的值可以通过step属性进行设置。\n\nspin_box\\_t是[edit\\_t](edit_t.md)的子类控件，edit\\_t的函数均适用于spin\\_box\\_t控件。\n\n在xml中使用\"spin_box\"标签创建spinbox控件。如：\n\n```xml\n<spin_box w=\"70%\" input_type=\"int\" min=\"-100\" max=\"100\" step=\"5\">\n```\n\n>\n更多用法请参考：[spin_box.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/spinbox.xml)\n\n在c代码中使用函数spin_box\\_create创建spinbox控件。如：\n\n```c\nwidget_t* spin_box = spin_box_create(win, 10, 10, 128, 30);\nedit_set_input_type(spin_box, type);\n```\n\n> 创建之后:\n>\n> 可以用edit相关函数去设置它的各种属性。\n\n> 完整示例请参考：[spin_box\ndemo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/spin_box.c)\n\n可用通过style来设置控件的显示风格，如背景和边框等。如：\n\n```xml\n<spin_box>\n<style name=\"default\" border_color=\"#a0a0a0\"  text_color=\"black\" text_align_h=\"left\">\n<normal     bg_color=\"#f0f0f0\" />\n<focused    bg_color=\"#f0f0f0\" border_color=\"black\"/>\n<disable    bg_color=\"gray\" text_color=\"#d0d0d0\" />\n<error      bg_color=\"#f0f0f0\" text_color=\"red\" />\n<empty      bg_color=\"#f0f0f0\" text_color=\"#a0a0a0\" />\n</style>\n</spin_box>\n```\n\n> 更多用法请参考：[theme\ndefault](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L128)",
    "name": "spin_box_t",
    "parent": "edit_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建system_bar对象。",
        "name": "system_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "system_bar对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "system_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为system_bar对象(供脚本语言使用)。",
        "name": "system_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "system_bar对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "widgets/system_bar.h",
    "desc": "system\\_bar窗口。\n\nsystem\\_bar窗口是一种特殊的窗口，独占LCD顶部区域，用来显示当前窗口的标题和关闭按钮等内容。\n\n> system\\_bar窗口需要在打开第一个应用程序窗口之前打开。\n\nsystem_bar对两个子控件会做特殊处理：\n\n* 1.名为\"title\"的label控件，自动显示当前主窗口的name或text。\n* 2.名为\"close\"的button控件，点击之后向当前主窗口发送EVT\\_REQUEST\\_CLOSE\\_WINDOW消息。\n\nsystem\\_bar\\_t是[window\\_base\\_t](window_base_t.md)的子类控件，\nwindow\\_base\\_t的函数均适用于system\\_bar\\_t控件。\n\n在xml中使用\"system\\_bar\"标签创建system\\_bar窗口。如：\n\n```xml\n<system_bar h=\"30\">\n<column x=\"0\" y=\"0\" w=\"-40\" h=\"100%\">\n<label style=\"title\" x=\"10\" y=\"m\" w=\"55%\" h=\"100%\" name=\"title\"/>\n<digit_clock style=\"time\" x=\"r\" y=\"m\" w=\"40%\" h=\"100%\" format=\"hh:mm\"/>\n</column>\n<button style=\"close\" x=\"r:5\" y=\"m\" w=\"26\" h=\"26\" name=\"close\" text=\"x\"/>\n</system_bar>\n```\n\n> 更多用法请参考：\n[system_bar](https://github.com/zlgopen/awtk/blob/master/design/default/ui/system_bar.xml)\n\n在c代码中使用函数system\\_bar\\_create创建system\\_bar窗口。如：\n\n```c\nwidget_t* win = system_bar_create(NULL, 0, 0, 320, 30);\n```\n\n> 创建之后，和使用普通窗口是一样的。\n\n可用通过style来设置控件的显示风格，如背景颜色等等。如：\n\n```xml\n<system_bar>\n<style name=\"default\">\n<normal bg_color=\"#a0a0a0\"/>\n</style>\n</system_bar>\n```\n\n> 更多用法请参考：\n[system_bar.xml](https://github.com/zlgopen/awtk/blob/master/design/default/styles/system_bar.xml)",
    "name": "system_bar_t",
    "parent": "window_base_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true,
      "window": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建combo_box_ex对象",
        "name": "combo_box_ex_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "combo_box_ex/combo_box_ex.h",
    "desc": "可滚动的combo_box控件。",
    "name": "combo_box_ex_t",
    "parent": "combo_box_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 4
  }
]